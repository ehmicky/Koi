
              
   TYPESCRIPT  
              



See:
  - https://github.com/Microsoft/TypeScript/wiki/FAQ

VERSION ==>                       #3.5.1

CONF ==>                          #Can be:
                                  #  -

tsc FILE...                       #Check and remove TypeScript types.
                                  #Output files with different extension ('.ts' -> '.js')
                                  #Transpile ES6 syntax like default values???

--outDir DIR                      #Where to output file (def: '.')
--outFile FILE2                   #Concatenate into single output FILE2

--watch|w                         #Watch mode


STRUCTURAL TYPING ==>             #Not nominative, i.e. TYPE is the structure not the name.
                                  #Exception: CLASS private|protected fields

TYPE                              #Among the ones below
'TYPE'                            #Stringified TYPE

type TYPE = TYPE2                 #Alias

typeof VAL                        #Returns its TYPE
                                  #If VAL is CLASS, returns its constructor() FUNC_TYPE

any                               #Union of all possible TYPEs
                                  #Default TYPE
                                  #Values can use any operators of any TYPE.
                                  #Transtype TYPE <-- any always possible (except never)
                                  #Transtype any <-- TYPE always possible
                                  #any | TYPE -> any
                                  #any & TYPE -> TYPE
unknown                           #Like any:
                                  #  - transtype TYPE <-- unknown always possible (except never)
                                  #  - unknown | TYPE -> unknown
                                  #  - unknown & TYPE -> TYPE
                                  #But:
                                  #  - values can only operators common to any TYPE, i.e. === !== =
                                  #  - can only transtype any <-- unknown
                                  #  - unknown | any -> any, unknown & any -> any
never                             #No possible value.
                                  #I.e. value that should not exist runtime. E.g.:
                                  #  - return value of function that never returns (e.g. throws)
                                  #  - type guards that can't be true
                                  #Transtype TYPE <-- never always possible.
                                  #Transtype never <-- TYPE never possible (except never itself)
                                  #never | TYPE -> TYPE
                                  #never & TYPE -> never

undefined                         #
null                              #
void                              #undefined|null
--strictNullChecks                #Unless set, transtype TYPE <-- undefined|null always possible

boolean                           #BOOL
number                            #NUM
string                            #STR

const enum ENUM                   #Def STR|NUM is previous NUM + 1, or 0 if first one.
 { NAME [=STR|NUM],... }          #STR|NUM can be an EXPR using () + - ~ * / % << >> >>> & | ^
ENUM.NAME                         #Item's VAL:
                                  #  - inlined to STR|NUM
                                  #  - must be used instead of STR|NUM directly
                                  #Can also be used as TYPE providing:
                                  #  - no STR|NUM is an EXPR
                                  #  - ENUM is the original variable (not an alias)

enum ENUM {...}                   #Same but ENUM is inlined as an OBJ:
                                  #  - i.e. can be used both as a TYPE and an OBJ
                                  #  - ENUM.NAME is inlined as OBJ.NAME instead of NUM|STR
                                  #Can use ENUM[NUM] -> 'TYPE'
                                  #NUM EXPR can use other operators but then:
                                  #  - cannot use ENUM as a TYPE
                                  #  - next NAME must be initialized

object                            #OBJ
                                  #Includes any child: FUNC, ARR, new String(STR), REGEXP, etc.
                                  #Includes Object.create(null)
                                  #Excludes null
{ VAR[?]: TYPE,... }              #OBJ with specific properties
                                  #Delimiters:
                                  #  - can be , ; or newline
                                  #  - can use trailing delimiters
                                  #No missing properties unless '?':
                                  #  - regardless of its TYPE
                                  #     - even undefined|null, i.e. {VAR: undefined} works but not {}
                                  #No additional properties:
                                  #  - unless both:
                                  #     - assigned an OBJ VAR (instead of an OBJ literal)
                                  #     - not all properties are additional
                                  #  - should not rely on those exceptions
{ [VAR: TYPE2]: TYPE, ... }       #Applies to all properties, additional or not.
                                  #Additional properties are then allowed.
                                  #TYPE2 is the key type, either:
                                  #  - NUM
                                  #  - STR: actually NUM|STR

class CLASS                       #CLASS can be used as OBJ_TYPE (of instances):
                                  #  - including methods, except constructor()
                                  #  - excluding static properties|methods
                                  #  - including non-initialized properties|methods
                                  #  - including protected|private properties|methods
                                  #     - i.e. can only match CLASS instances
                                  #  - {...} can use the same syntax (e.g. { VAR[?]: TYPE })
                                  #As opposed to INTERFACE, it is both a runtime value and an OBJ_TYPE
  [extends CLASS2]                #Same as JavaScript, i.e. inherit|mixin members (types+values) from CLASS2
  [implements OBJ_TYPE,...]       #Must redefined members from OBJ_TYPE,...
{
  [public|protected|private] VAR  #Fields visibility is different than JavaScript:
                                  #  - VAR -> [public] VAR
                                  #  - #VAR -> private VAR
                                  #  - not possible -> protected VAR
                                  #     - like private VAR but child CLASS can access it too
  constructor                     #When QUAL specified, shortcut to set this.VAR = VAL.
    (QUAL VAR[?]: TYPE,...)       #QUAL is public|protected|private|readonly and used the same as { QUAL VAR }
                                  #Constructor return type is always CLASS, i.e. must not be specified.
}

abstract CLASS ... {              #CLASS that cannot be instantiated (but children can)
  abstract FUNC(...): TYPE        #FUNC with no body, that must be reimplemented by children
}

interface INTERFACE               #Same as type INTERFACE = { ... } except for following points.
 [extends OBJ_TYPE,...] { ... }   #'extends': inherit|mixin members (types) from OBJ_TYPE

[new] ([...]VAR[?]: TYPE,...)     #FUNC
 => TYPE2                         #TYPE2 is return value.
                                  #No missing arguments: like OBJ missing properties
                                  #No additional arguments:
                                  #  - unless defined variadic ...VAR (always optional)
                                  #VAR names are not significant.
                                  #new:
                                  #  - requiring using new FUNC()
                                  #  - e.g. a CLASS constructor
                                  #VAR can be 'this' (must be first parameter)
{ FUNC(...): TYPE2 }              #OBJ.FUNC: shortcut for { FUNC: (...) => TYPE2 }
{ [new] (...): TYPE2 }            #FUNC with OBJ properties

TYPE[]
Array<TYPE>                       #ARR of same types
[TYPE,...]                        #ARR of different types (TUPLE).
                                  #Each TYPE is only for that index. If outside range, use a union of all possible TYPEs.

{ readonly ...: TYPE,... }        #Shallow immutability (like `const`) of OBJ properties.
Readonly<OBJ_TYPE>                #`readonly` to all OBJ properties.
readonly OBJ_TYPE[]               #Does not apply to the OBJ itself.
readonly [OBJ_TYPE,...]           #Does not work on INTERFACE.
ReadonlyArray<TYPE>               #Same as Readonly<Array<TYPE>>
class ...
  { readonly ...: TYPE,... }      #Like OBJ, but mutable in constructor()


TYPE | TYPE2                      #Union ("or")
TYPE & TYPE2                      #Intersection ("and")


type TYPE<T...> = ...             #Declaring a generic TYPE, i.e. must specify another TYPE2 during usage.
class CLASS<T...> {}              #<T...> is <T [extends TYPE3,...][= TYPE2],...>
interface INTERFACE<T,...> {}     #Type of T is:
[new] <T...>(...) => ...          #  - inside TYPE|CLASS|INTERFACE|FUNC: TYPE3 & ... (def: unknown)
{ FUNC<T...>(...): ... }          #  - outside: the TYPE2 it was instantiated with (def: TYPE2, or unknown)
{ [new] <T...>(...): ... }        #There can be several <T,...>
                                  #  - each can refer to each other

TYPE<TYPE2,...>                   #Using a generic TYPE


QUAL VAR: TYPE [= VAL]            #

function [FUNC][<T,...>]
 (VAR[?]: TYPE,...): TYPE2 {...}
[<T,...>]
 (VAR[?]: TYPE,...): TYPE2 => ...
[class ...] {
  FUNC[<T,...>]
   (VAR[?]: TYPE,...): TYPE2 {}
}                                 #

[new] CLASS|FUNC<TYPE2,...>(...)  #

function FUNC(...): TYPE2         #Function overloading.
...                               #The first FUNCs are the overloads, the last one is the implementation. Must follow each other.
function FUNC(...): TYPE3 {...}   #Each overload is tried in order until one matches.

<TYPE>VAL                         #Declaring TYPE of VAL ("type assertion")
VAL as TYPE                       #Has stronger operator precedence than everything except () .VAR [INDEX] new (...ARGS) ++ --


IMPLICIT TRANSTYPING ==>          #For TYPE2 <-- TYPE, TYPE2 must be contravariant to TYPE.
                                  #For FUNCs:
                                  #  - bivariant arguments (although should theoritically be covariant)
                                  #  - contravariant return value
                                  #For CLASS:
                                  #  - PARENT <-- CHILD must be possible
                                  #  - i.e. PARENT must be contravariant to CHILD
                                  #See polymorphism docs for more info.


--noImplicitThis                  #Error when using `this` with type ANY.
                                  #I.e. caller did FUNC() instead of OBJ.FUNC() or FUNC.call|bind(OBJ)
