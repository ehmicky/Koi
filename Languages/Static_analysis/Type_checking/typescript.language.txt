
              
   TYPESCRIPT  
              



See:
  - https://github.com/Microsoft/TypeScript/wiki
  - go through recent changelogs
  - https://github.com/microsoft/TypeScript/blob/master/doc/spec.md
  - source like https://github.com/microsoft/TypeScript/blob/master/src/lib/es5.d.ts

VERSION ==>                       #3.5.1

DIFFERENCE FROM JAVASCRIPT ==>    #  - TYPE declaration
                                  #  - TYPE transtyping
                                  #  - declare
                                  #  - namespace (including export, import, <reference/>)
                                  #  - [const] enum -> inlined as VAL|OBJ
                                  #  - different CLASS syntax|features: implements, public|protected|private, parameter properties, abstract

CONF ==>                          #Can be:
                                  #  -
CCONF                             #CONF.compilerOptions

tsc FILE...                       #Check and remove TypeScript types.
                                  #Output files with different extension ('.ts' -> '.js')
                                  #Transpile ES6 syntax like default values???

--outDir DIR                      #Where to output file (def: '.')
--outFile FILE2                   #Concatenate into single output FILE2
                                  #Cannot be used with --module es*|umd

--watch|w                         #Watch mode


STRUCTURAL TYPING ==>             #Not nominative, i.e. TYPE is the structure not the name.
                                  #Exception: CLASS private|protected fields.

TYPE                              #Among the ones below
TYPES                             #Union of several TYPE
                                  #never if no members.

type TYPE = TYPE2                 #Alias
                                  #TYPE2 name will be used (not TYPE) in error messages and IDE tools.

typeof VAL                        #Returns its TYPE
                                  #If VAL is CLASS, returns its constructor() FUNC_TYPE

TYPE extends TYPE2                #If TYPE is covariant (child|equal) to TYPE2, resolves to TYPE3, otherwise TYPE4
 ? TYPE3 : TYPE4                  #If TYPE is generic:
                                  #  - results in union of all possible TYPE3|TYPE4
                                  #  - transtyped to TYPE & TYPE2 if used inside TYPE3
                                  #TYPE2 can contain "infer T":
                                  #  - generic type that can be used inside TYPE3
                                  #  - guessed by trying to transtype TYPE to TYPE2
                                  #  - sometimes need () for operators precedence
                                  #Common ones:
                                  #  - boolean as generic TYPE and BOOL as TYPE2
                                  #  - STR_TYPES as generic TYPE and STR as TYPE2

KTYPE                             #TYPE of an OBJ key, i.e. STR|NUM|SYM_TYPE
                                  #Either:
                                  #  - literal value for { VAR: ... }
                                  #  - or not for { [VAR: TYPE2]: ... }
KTYPES                            #TYPES of KTYPE
keyof TYPE                        #KTYPES of TYPE properties keys (including methods)
                                  #Non-OBJ_TYPE use prototype properties
                                  #  - null|undefined have none
                                  #Common ones:
                                  #  - keyof any: any KTYPE
TYPE[TYPE2]                       #TYPES of TYPE properties values (including methods)
                                  #TYPE2 must intersect with keyof TYPE
                                  #Common ones:
                                  #  - ARR_TYPE[number]: TYPE of any ARR element
                                  #  - OBJ_TYPE[keyof OBJ_TYPE]: TYPE of any property
{ [T in KTYPES]: VAL }            #Expanded to OBJ_TYPE where:
                                  #  - keys are each KTYPE in KTYPES
                                  #  - VAL can refer to T (current KTYPE)
                                  #Cannot define other properties directly:
                                  #  - but can do it through ... & OBJ_TYPE2
                                  #Often used to map a TYPE using { [P in keyof TYPE]: TYPE[P] }
                                  #Can use ? and readonly on key like other OBJ_TYPEs
                                  #  - can be prefixed with -|+ to mean "remove|add"

any                               #Union of all possible TYPEs
                                  #Default TYPE
                                  #Values can use any operators of any TYPE.
                                  #Transtype TYPE <-- any always possible (except never)
                                  #Transtype any <-- TYPE always possible
                                  #any | TYPE -> any
                                  #any & TYPE -> TYPE
unknown                           #Like any:
                                  #  - transtype TYPE <-- unknown always possible (except never)
                                  #  - unknown | TYPE -> unknown
                                  #  - unknown & TYPE -> TYPE
                                  #But:
                                  #  - values can only operators common to any TYPE, i.e. === !== =
                                  #  - can only transtype any <-- unknown
                                  #  - unknown | any -> any, unknown & any -> any
never                             #No possible TYPE.
                                  #Transtype TYPE <-- never always possible.
                                  #Transtype never <-- TYPE never possible (except never itself)
                                  #never | TYPE -> TYPE
                                  #never & TYPE -> never
                                  #Examples:
                                  #  - union with no members
                                  #  - intersection with nothing in common
                                  #  - return statement that can't be reached (e.g. exception, or type guard that can't be true)

undefined                         #
null                              #
void                              #undefined|null
--strictNullChecks                #Unless set, transtype TYPE <-- undefined|null always possible
NonNullable<TYPE>                 #Same TYPE minus undefined|null

boolean                           #BOOL
number                            #NUM
string                            #STR
bigint                            #BIGINT
BOOL|NUM|STR|BIGINT               #TYPE for only that value. Must be literal value.

symbol                            #Any SYM
unique symbol                     #Specific SYM. Child of 'symbol'.
                                  #Well-known SYM have type 'symbol' but Symbol[.for]() have type 'unique symbol'

const enum ENUM                   #Def STR|NUM is previous NUM + 1, or 0 if first one.
 { NAME [=STR|NUM],... }          #STR|NUM can be an EXPR using () + - ~ * / % << >> >>> & | ^
ENUM.NAME                         #Item's VAL:
                                  #  - inlined to STR|NUM
                                  #  - must be used instead of STR|NUM directly
                                  #Can also be used as TYPE providing:
                                  #  - no STR|NUM is an EXPR
                                  #  - ENUM is the original variable (not an alias)

enum ENUM {...}                   #Same but ENUM is inlined as an OBJ:
                                  #  - i.e. can be used both as a TYPE and an OBJ
                                  #  - ENUM.NAME is inlined as OBJ.NAME instead of NUM|STR
                                  #Can use ENUM[NUM] -> 'TYPE'
                                  #NUM EXPR can also use other operators providing:
                                  #  - next NAME is initialized

object                            #OBJ
                                  #Includes any child: FUNC, ARR, new String(STR), REGEXP, etc.
                                  #Includes Object.create(null)
                                  #Excludes null
{ VAR[?]: TYPE,... }              #OBJ with specific properties
                                  #Delimiters:
                                  #  - can be , ; or newline
                                  #  - can use trailing delimiters
                                  #No missing properties unless '?':
                                  #  - regardless of its TYPE
                                  #     - even undefined|null, i.e. {VAR: undefined} works but not {}
                                  #No additional properties:
                                  #  - unless both:
                                  #     - assigned an OBJ VAR (instead of an OBJ literal)
                                  #     - not all properties are additional
                                  #  - should not rely on those exceptions
{ [VAR: TYPE2]: TYPE, ... }       #TYPE of OBJ[NUM|STR]
                                  #Applies to all properties, additional or not.
                                  #Additional properties are then allowed.
                                  #TYPE2 is the key type, either:
                                  #  - NUM
                                  #  - STR: actually NUM|STR
Partial<OBJ_TYPE>                 #Adds ? on all properties
Required<OBJ_TYPE>                #Removes ? on all properties
Pick<OBJ_TYPE, KTYPES>            #Only keep KTYPES properties
Omit<OBJ_TYPE, KTYPES>            #Inverse
Record<KTYPES, TYPE>              #OBJ_TYPE with:
                                  #  - key for each KTYPE
                                  #  - value TYPE

class CLASS                       #CLASS can be used as OBJ_TYPE (of instances):
                                  #  - including methods, except constructor()
                                  #  - excluding static properties|methods
                                  #  - including non-initialized properties|methods
                                  #  - including protected|private properties|methods
                                  #     - i.e. can only match CLASS instances
                                  #  - {...} can use the same syntax (e.g. { VAR[?]: TYPE })
                                  #As opposed to INTERFACE, it is both a runtime value and an OBJ_TYPE
  [extends CLASS2]                #Same as JavaScript, i.e. inherit|mixin members (types+values) from CLASS2
  [implements OBJ_TYPE,...]       #Must redefined members from OBJ_TYPE,...
{
  [public|protected|private] VAR  #Fields visibility is different than JavaScript:
                                  #  - VAR -> [public] VAR
                                  #  - #VAR -> private VAR
                                  #  - not possible -> protected VAR
                                  #     - like private VAR but child CLASS can access it too
  constructor                     #When QUAL specified, shortcut to set this.VAR = VAL. "Parameter properties"
    (QUAL VAR[?]: TYPE,...)       #QUAL is public|protected|private|readonly and used the same as { QUAL VAR }
                                  #Constructor return type is always CLASS, i.e. must not be specified.
}

abstract CLASS ... {              #CLASS that cannot be instantiated (but children can)
  abstract FUNC(...): TYPE        #FUNC with no body, that must be reimplemented by children
}

interface INTERFACE               #Like type INTERFACE = { ... } but preferred because:
 [extends OBJ_TYPE,...] { ... }   #  - can 'extends': inherit|mixin members (types) from OBJ_TYPE
                                  #  - INTERFACE name is used (instead of literal OBJ) in error messages and IDE tools
INTERFACE MERGING ==>             #If INTERFACE declared several times, merge them.
                                  #Properties can have same name but:
                                  #  - non-FUNCs must have same TYPE
                                  #  - FUNCs will be overloaded, in that order:
                                  #     - if single STR literal argument, always first
                                  #     - last declared < first declared

ConstructorType                   #Any OBJ children can be used as TYPE, just like CLASS.
                                  #This includes Error, RegExp, Date, etc.
Promise[<T>]                      #PROMISE resolving T or (if T includes 'never') rejecting anything.

Function                          #Any FUNC
[new] ([...]VAR[?]: TYPE,...)     #Specific FUNC (child of Function)
 => TYPE2                         #TYPE2 is return value.
                                  #No missing arguments: like OBJ missing properties
                                  #No additional arguments:
                                  #  - unless defined variadic ...VAR (always optional)
                                  #VAR names are not significant.
                                  #new:
                                  #  - requiring using new FUNC()
                                  #  - e.g. a CLASS constructor
                                  #Argument TYPEs is not checked inside body for transtyping that happens after declaration.
{ FUNC(...): TYPE2 }              #OBJ.FUNC: shortcut for { FUNC: (...) => TYPE2 }
{ [new] (...): TYPE2 }            #FUNC with OBJ properties

this                              #Can be:
                                  #  - VAR (argument): must be first parameter
                                  #  - TYPE2 (return value)

Parameters<FUNC_TYPE>             #Parameters [TYPE,...] (tuple)
ReturnType<FUNC_TYPE>             #Return value TYPE2
ConstructorParameters<FUNC_TYPE>  #Same as Parameters<> but for 'new FUNC'
InstanceType<FUNC_TYPE>           #Same as ReturnType<> but for 'new FUNC'

TYPE[]
Array<TYPE>                       #ARR of same types
[TYPE,...]                        #ARR of different types (TUPLE).
                                  #Each TYPE is only for that index. If outside range, use a union of all possible TYPEs.

{ readonly ...: TYPE,... }        #Shallow immutability (like `const`) of OBJ properties.
Readonly<OBJ_TYPE>                #`readonly` to all OBJ properties.
readonly OBJ_TYPE[]               #Does not apply to the OBJ itself.
readonly [OBJ_TYPE,...]           #Does not work on INTERFACE.
ReadonlyArray<TYPE>               #Same as Readonly<Array<TYPE>>
class ...
  { readonly ...: TYPE,... }      #Like OBJ, but mutable in constructor()


TYPE | TYPE2                      #Union ("or")
TYPE & TYPE2
Extract<TYPE, TYPE2>              #Intersection ("and")
Excludes<TYPE, TYPE2>             #Difference (in TYPE but not in TYPE2)


type TYPE<T...> = ...             #Declaring a generic TYPE, i.e. must specify another TYPE2 during usage.
class CLASS<T...> {}              #<T...> is <T [extends TYPE3,...][= TYPE4],...>
interface INTERFACE<T,...> {}     #Type of T is:
[new] <T...>(...) => ...          #  - when not instantiated: TYPE3 & ... (def: unknown)
{ FUNC<T...>(...): ... }          #  - when instantiated: the specified TYPE2 (def: TYPE4, required otherwise)
{ [new] <T...>(...): ... }        #There can be several <T,...>
                                  #  - each can refer to each other
                                  #Can also transtype towards TYPE|CLASS|INTERFACE|FUNC that is generic itself.
                                  #  - i.e. values transtyped towards generic TYPE must already have been declared using <T,...>

TYPE<TYPE2,...>                   #Using a generic TYPE


QUAL VAR: TYPE [= VAL]            #

function [FUNC][<T,...>]
 (VAR[?]: TYPE,...): TYPE2 {...}
[<T,...>]
 (VAR[?]: TYPE,...): TYPE2 => ...
[class ...] {
  FUNC[<T,...>]
   (VAR[?]: TYPE,...): TYPE2 {}
}                                 #

[new] CLASS|FUNC<TYPE2,...>(...)  #

function FUNC(...): TYPE2         #Function overloading.
...                               #The first FUNCs are the overloads, the last one is the implementation. Must follow each other.
function FUNC(...): TYPE3 {...}   #Each overload is tried in order until one matches.

<TYPE>VAL                         #Declaring TYPE of VAL ("type assertion")
VAL as TYPE                       #Has stronger operator precedence than everything except () .VAR [INDEX] new (...ARGS) ++ --
                                  #Bypasses transtyping rules

VAL!                              #Transtype to same TYPE minus undefined|null


TRANSTYPING RULES ==>             #For TYPE2 <-- TYPE, TYPE2 must be contravariant to TYPE.
                                  #For FUNCs:
                                  #  - bivariant arguments
                                  #     - although should theoritically be covariant
                                  #        - reason is common callback pattern in JavaScript:
                                  #           - TYPE2 is callback parameter, which must be generic
                                  #           - TYPE is callback argument, which is more specific
                                  #           - should theoritically use TYPE2 as argument instead, and do a <TYPE> assertion
                                  #             instead, but it's more verbose
                                  #     - including for argument optionality, for the same reasons
                                  #     - but covariant for arity: FUNC2.length must >= FUNC.length
                                  #  - contravariant return value
                                  #     - including type guards
                                  #For CLASS:
                                  #  - PARENT <-- CHILD must be possible
                                  #  - i.e. PARENT must be contravariant to CHILD
                                  #See polymorphism docs for more info.

TYPE INFERENCE ==>                #Only needed for untyped values:
                                  #  - i.e. not needed for JavaScript operators (including =) since their types is known
                                  #Untyped FUNC parameters:
                                  #  - use caller's argument literal value as TYPE
                                  #  - if "= VAL" (default value), use '?'
                                  #Untyped FUNC return value:
                                  #  - use return literal value as TYPE
                                  #  - if several return statements, use union
                                  #Literal values:
                                  #  - use literal value as TYPE
                                  #  - OBJ: do it recursively
                                  #  - ARR:
                                  #     - do it recursively, as a union
                                  #     - if empty -> never[]
                                  #Possible issues:
                                  #  - too generic TYPEs in entry points
                                  #     - e.g. default "any"
                                  #  - too generic|specific TYPEs in literal values
                                  #     - e.g. [] but meant readonlyArray<T>
                                  #     - e.g. TypeError but meant Error
                                  #  - FUNC arguments -> return value relation is not specified
                                  #     - e.g. output is number|boolean if input.type is "number|boolean"

TYPE GUARDS ==>                   #When:
                                  #  - using: if|else, switch, ternary (? :), chaining (&& ||)
                                  #  - with: typeof VAL, instanceof VAL, === !== == != VAL
                                  #  - and only: ! && ||
                                  #Then inside the blocks:
                                  #  - ARG will be transtyped to the right TYPE
                                  #  - including return value TYPE if has `return` statement
TAGGED UNION ==>                  #When type guarding with OBJ.VAR === !== == != VAL, it type guards OBJ as well.
                                  #For example:
                                  #  type A = { kind: 'A' }
                                  #  type B = { kind: 'B' }
                                  #  (obj: A|B) => obj.kind === 'A' && ... // `obj` will be of type A
VAR is TYPE                       #When used as FUNC return value's TYPE2, means FUNC() can be used as a type guard.
                                  #FUNC must return BOOL determining whether argument VAR belongs to TYPE.

--noImplicitThis                  #Error when using `this` with type ANY.
                                  #I.e. caller did FUNC() instead of OBJ.FUNC() or FUNC.call|bind(OBJ)

declare QUAL VAR ...              #Declaration|TYPEs only, not implementation:
declare function ...              #  - VAR: cannot be initialized
declare ... enum ...              #     - except with literal STR|NUM|BIGNUM|ENUM (treated as TYPE)
declare ... class ...             #  - FUNC: no body
declare namespace ...             #  - enum|class|namespace: only TYPE not value
declare type ...                  #  - type|interface: noop
declare interface ...             #Useful when TYPE declaration is in TypeScript and implementation in JavaScript.
                                  #"Ambient file":
                                  #  - file with only declare statements
                                  #  - often named *.d.ts
export declare ...                #ESM `export` must be before `declare`

/// <.../>                        #Transpiler pragma directives
                                  #Must be at top of file (except other comments or blank lines)

--moduleResolution STR            #"MODULE|PATH" resolution:
                                  #  - 'node' (def if --module commonjs):
                                  #     - like Node: node_modules, PACKAGE.main, index.js
                                  #     - *.json only if --resolveJsonModules
                                  #     - PACKAGE.types: same as PACKAGE.main but higher priority and TypeScript-specific
                                  #  - 'classic' (def otherwise):
                                  #     - "PATH": as is
                                  #     - "MODULE": search ".[/../...]/MODULE"
                                  #In both cases, still try different .EXT
                                  #  - e.g. if PACKAGE.main 'FILE.js', will search for 'FILE.ts|tsx|d.ts'
--traceResolution                 #Verbose|debug for --moduleResolution
--noResolve                       #Require all "MODULE|PATH" to be specified in tsc FILE...
                                  #Ignore all /// <reference .../>
--baseUrl URL|PATH                #Base URL|PATH for any "MODULE"
CCONF.paths.MODULE                #Base "URL|PATH"_ARR for this "MODULE"
                                  #If several, tried in order.
                                  #If MODULE is "*":
                                  #  - for any "MODULE"
                                  #  - can add "*" in "URL|PATH", which will be replaced by each "MODULE"
CCONF.rootDirs                    #"DIR"_ARR. When importing inside one of the "DIR", other "DIR"s are tried as well.
                                  #Goals:
                                  #  - when merging several source "DIR" into single "DIR2" during build
                                  #  - when "DIR" are dynamically generated and might not exist

*.JS TYPING ==>                   #*.js files can be imported but are untyped (any) by default.
--allowJs                         #Use type inference on *.js files, and do type checking on files using them
--checkJs                         #Do type checking inside *.js files themselves
JSDOC COMMENTS ==>                #Can be used for typecasting in *.js files

ES MODULES ==>                    #Should be used for sources.
                                  #Can also import|export type|enum|interface|namespace
                                  #Can use dynamic import()
                                  #import.meta is empty OBJ
                                  #Cannot import from CommonJS
                                  #PATH must not include .EXT
                                  #  - look for .ts, .tsx, .d.ts (in order), .js
                                  #Transpiled like Babel:
                                  #  - use __esModule as well, and same logic
--module STR                      #Which module system to transpile to:
                                  #  - es2015, es6, esnext:
                                  #     - ES modules
                                  #     - difference: which ES features can be used
                                  #  - commonjs (def)
                                  #  - amd
                                  #  - umd
                                  #  - system: SystemJS
                                  #  - none:
                                  #     - global variables
                                  #     - cannot use import|export

export = VAL|TYPE                 #CommonJS default export
import VAL = require(STR)         #CommonJS default import

require(STR)                      #CommonJS import
                                  #As opposed to import VAL = require(STR):
                                  #  - not only default import
                                  #  - can be dynamic
                                  #But return value is untyped (any), i.e. must transtype

/// <amd-module name="NAME"/>     #With --module amd, NAME of current file (instead of anonymous)

declare module "MODULE" { ... }   #Declare the TYPEs exported by `import "MODULE"`
                                  #The TYPEs are in { ... }:
                                  #  - same syntax as `declare ...` but without `declare`
                                  #import|export:
                                  #  - can be used in current file, but only inside { ... }
                                  #  - can only import from "MODULE" not "PATH"
                                  #  - can prefix statements with `export` but noop
                                  #Works with other --module as well
                                  #"MODULE" can use globbing *
                                  #  - e.g. "*!text" or "text!*" for loaders that allow such notation
declare module "MODULE";          #Make any `import "MODULE"` work, but not typed (TYPE any).
--skipLibCheck                    #Skip type checking of ambient files themselves (not the files that use them)
                                  #Meant to speed up compile speed. Not recommended.

MODULE AUGMENTATION ==>           #When declaring MODULE again, merge with MODULE already declared.
                                  #Merges the same way as INTERFACEs
                                  #import|export "MODULE|PATH" outside {...} can be used
                                  #  - it must be used in order to distinguish from normal module declaration
                                  #Cannot use globbing *
declare global { ... }            #Module augmentation for global scope.

namespace NAMESPACE { ... }       #Scope { ... } under NAMESPACE (which is transpiled to an anonymous function).
                                  #NAMESPACE can be used as an OBJ value.
                                  #If called several times, merge.
                                  #Meant for pre-ESM modules (global object, AMD, UMD, etc.)
export ...                        #Assign to NAMESPACE.VAR, i.e. allow using outside of NAMESPACE
                                  #Same syntax as `declare ...`

import VAR2 = NAMESPACE.VAR       #Like const VAR2 = NAMESPACE.VAR except also works if NAMESPACE.VAR is a TYPE
                                  #Not same as ES modules

NAMESPACE MERGING ==>             #If NAMESPACE declared several times, merge exported VARs.
                                  #Non-exported VARs are not merged.
                                  #Exported VARs must not have same names.
NAMESPACE MERGING OTHERS ==>      #If a CLASS|FUNC|ENUM with same name declared before a NAMESPACE,
                                  #do Object.assign(CLASS|FUNC|ENUM, NAMESPACE)

/// <reference path="PATH" />     #Like <script src="PATH"> means:
                                  #  - imported file is loaded at that point
                                  #  - current file and imported file share same scope
                                  #     - i.e. can reference declarations from each other, including NAMESPACEs
                                  #Those assumptions must be added either:
                                  #  - by loading both files with <script src="PATH"> from a parent file
                                  #  - if using --outFile, imported file's content is prepended as is, compile-time
                                  #Meant to be used with:
                                  #  - NAMESPACEs, for pre-ESM modules.
                                  #  - ambient files, although ESM import should be used instead

--lib 'LIB' ...                   #Use TYPEs for core JavaScript among:
/// <reference lib="LIB"/>        #  - es3|5|6|2015-2019|next
                                  #     - es2015-2019|next.FEATURE: specific feature (automatically included)
                                  #  - dom
                                  #     - dom.iterable: DOM objects being ITERABLE
                                  #     - webworker: WORKER
                                  #     - webworker.importscripts: WORKERGLOBAL.importScripts()
                                  #Available in "typescript" MODULE at lib/lib.STR.d.ts
                                  #Def: dom + es* depending on --target
--noLib                           #Do not include any 'LIB'
/// <reference
 no-default-lib="true"/>
--target STR                      #Which ES version to transpile to among es3 (def) or es5|6|2015-2020|next
                                  #I.e. --lib is for sources, --target is for build
                                  #It only adds few helpers|polyfills, not all though, so still need to use Babel.

@types/MODULE                     #Ambient files maintained by DefinitelyTyped
@types/node                       #Same for all core Node.js "MODULE"
/// <reference types="MODULE"/>   #Similar to import "@types/MODULE"
--types "MODULE" ...              #'MODULE'_ARR of @types/MODULE to automatically try during "MODULE" resolution (regardless of --moduleResolution)
                                  #Def: any
--typeRoots "DIR" ...             #Resolve "@types/*' to "DIR"_ARR instead.

