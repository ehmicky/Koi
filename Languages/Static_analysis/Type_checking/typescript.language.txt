
              
   TYPESCRIPT  
              



VERSION ==>                       #3.5.1

CONF ==>                          #Can be:
                                  #  -

tsc FILE...                       #Check and remove TypeScript types.
                                  #Output files with different extension ('.ts' -> '.js')
                                  #Transpile ES6 syntax like default values???

--outDir DIR                      #Where to output file (def: '.')
--outFile FILE2                   #Concatenate into single output FILE2

--watch|w                         #Watch mode


STRUCTURAL TYPING ==>             #Not nominative, i.e. values can have several TYPEs as long they fit.

TYPE                              #Among the ones below
'TYPE'                            #Stringified TYPE

type TYPE = TYPE2                 #Alias

never                             #No possible value.
                                  #I.e. value that should not exist runtime. E.g.:
                                  #  - return value of function that never returns (e.g. throws)
                                  #  - type guards that can't be true
                                  #Every TYPE is actually TYPE|never
any                               #Union of all possible TYPEs (except never)

undefined                         #
null                              #
void                              #undefined|null
--strictNullChecks                #Unless set, every TYPE is actually TYPE|void

boolean                           #BOOL
number                            #NUM
string                            #STR

enum ENUM {NAME [= VAL],...}      #ENUM
                                  #Def VAL is incrementing NUM, starting at 0.
ENUM.NAME                         #ENUM item's VAL
ENUM[VAL]                         #ENUM item's 'TYPE'

object                            #OBJ
                                  #Includes any child: FUNC, ARR, new String(STR), REGEXP, etc.
                                  #Includes Object.create(null)
                                  #Excludes null
{ VAR[?]: TYPE,... }              #OBJ with specific properties
                                  #'?':
                                  #  - unless '?', property must be defined, regardless of its TYPE
                                  #     - even undefined|null, i.e. {VAR: undefined} works but not {}
                                  #  - implied when using default '= VAL'

TYPE[]
Array<TYPE>                       #ARR of same types
[TYPE,...]                        #ARR of different types (TUPLE).
                                  #Each TYPE is only for that index. If outside range, use a union of all possible TYPEs.


DEFAULT ==>                       #Def TYPE is always ANY

QUAL VAR: TYPE [= VAL]            #
function [FUNC]
 (VAR[?]: TYPE,...): TYPE2 {...}
(VAR[?]: TYPE,...): TYPE2 => ...  #'?' is like for { VAR?: TYPE }

<TYPE>VAL
VAL as TYPE                       #Declaring TYPE of VAL ("type assertion")
                                  #Has stronger operator precedence than everything except () .VAR [INDEX] new (...ARGS) ++ --
