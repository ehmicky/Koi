
              
   TYPESCRIPT  
              



See:
  - updates:
     - https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript
     - https://github.com/microsoft/TypeScript/wiki/Breaking-Changes
     - https://devblogs.microsoft.com/typescript/
  - source like https://github.com/microsoft/TypeScript/blob/master/src/lib/es5.d.ts
  - https://github.com/microsoft/TypeScript/blob/master/doc/spec.md
  - JSDoc then https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html
  - reorganize this doc, adding chapters
  - check VSCode options
  - to_learn.txt
  - GitHub search
  - add to my projects

VERSION ==>                       #3.5.2

DIFFERENCE FROM JAVASCRIPT ==>    #  - TYPE declaration
                                  #  - TYPE transtyping
                                  #  - declare
                                  #  - namespace
                                  #  - [const] enum -> inlined as VAL|OBJ
                                  #  - different CLASS syntax|features: implements, public|protected|private, parameter properties, abstract
                                  #  - module resolution (no '.EXT', *.ts[x]|d.ts, PACKAGE.types[Version])
                                  #  - module loading (CommonJS default export, <reference/>, declare module|global, export as namespace)

CONF                              #Can be:
                                  #  - --FLAG: for CONF.compilerOptions.FLAG
                                  #  - [../...]tsconfig.json
                                  #  - -p|--project CONF_PATH
                                  #CONF files are ignored when FILE... passed to tsc
                                  #Unless specified otherwise, all BOOL options default to false
CONF_PATH                         #Either CONF_FILE.json or DIR with tsconfig.json it
CONF.extends                      #'PATH' to a CONF2 to merge with lower priority
--init                            #Create a boilerplate ./tsconfig.json
--showConfig                      #Print the resolved CONF

tsc                               #Does:
                                  #  - type checking of input files
                                  #  - transpile input files to JavaScript output files
                                  #     - with different extension ('.d.ts|ts[x]' -> '.js[x]')

tsc FILE...
CONF.files                        #Input FILE_ARR
CONF.include|exclude              #Input FILEs but as 'GLOB'_ARR
                                  #Def exclude: node_modules, bower_components, jspm_packages, --outDir

--outDir DIR                      #Where to output file (def: '.')
--rootDir DIR2                    #--outDir replicates input files directory layout.
                                  #It is based on --rootDir DIR2, which is the input files root (def: the lowest common root)
--outFile FILE2                   #Concatenate into single output FILE2
                                  #Cannot be used with --module es*|umd

--noEmit                          #Do not transpile (only type check).
--noEmitOnErrors                  #Do not transpile if type checks failed
--removeComments                  #Remove comments (during transpile) unless start with /*! and is on first line.

--watch|w                         #Watch mode
--preserveWatchOutput             #Do not clear screen between runs with --watch
CONF.compileOnSave                #Tells IDE to run tsc in watch mode.
ENVVAR TSC_WATCHFILE              #Whether --watch uses fs.watchFile() or fs.watch():
                                  #  - def: fs.watchFile() with 250ms interval
                                  #  - 'PriorityPollingInterval': fs.watchFile() with longer intervals for config files and missing files
                                  #  - 'DynamicPriorityPolling': fs.watchFile() with longer intervals for not frequently modified files
                                  #  - 'UseFsEventsOnParentDirectory' (def if ENVVAR TSC_NONPOLLING_WATCHER set): use fs.watch() on root directory
                                  #  - 'UseFsEvents': fs.watch() on files
                                  #  - 'UseFsEventsWithFallbackDynamicPolling': 'useFsEvents' with fallback to 'DynamicPriorityPolling'
ENVVAR TSC_WATCHDIRECTORY         #When using fs.watch('DIR') on Linux, since it does not support OPTS.recursive, how to handle it:
                                  #  - def: recurse over descendants and use fs.watch()
                                  #  - 'RecursiveDirectoryUsingFsWatchFile': fs.watchFile()
                                  #  - 'RecursiveDirectoryUsingDynamicPriorityPolling': fs.watchFile() with longer intervals for not frequently modified files

-i|--incremental                  #Outputs a tsconfig.tsbuildinfo containing:
                                  #  - a hash of each file's content
                                  #  - the import|export dependency tree
                                  #  - the current CONF
                                  #On next run use it to only build newly updated files.
--tsBuildInfoFile                 #'PATH' to tsconfig.tsbuildinfo (def: './tsconfig.tsbuildinfo')

CONF.references                   #Sub-CONFs:
                                  #  - when imported, only *.d.ts will be tried
                                  #  - must use --composite
                                  #Is OBJ_ARR:
                                  #  - path CONF_PATH
                                  #  - prepend BOOL (def: false):
                                  #     - when CONF and sub-CONF use --outFile (must use it)
                                  #     - prepend|concatenate sub-CONF output file
--composite                       #Means the current CONF is a sub-CONF
                                  #Implies --declaration and --incremental
                                  #Sets --rootDir to the tsconfig.json's DIR

-b|--build                        #Run tsc recursively on all CONF.references
                                  #tsc FILE... will instead be tsc CONF_PATH...
                                  #Implies --noEmitOnError
-f|--force                        #With --build, run tsc even on up-to-date sub-CONFs
-d|--dry                          #Dry run
--clean                           #Removes all *.d.ts and tsconfig.tsbuildinfo
-v|--verbose                      #

--preserveSymlinks                #Like node --preserve-symlinks

--sourceMap                       #Create external source maps
--inlineSourceMap                 #Create inline source map
--inlineSources                   #Set SOURCE_MAP.sourcesContent (for external source maps)
--sourceRoot 'DIR'                #SOURCE_MAP.sourceRoot
--mapRoot 'DIR'                   #'DIR' of the source maps (def: same as output file)
                                  #This changes SOURCE_MAP.sources, by assuming 'DIR' is the current directory
--declarationMap                  #Generate source maps for --declaration too.

--forceConsistentCasingInFileNames#Make paths specified as input|options case-sensitive
--newLine STR                     #In output: 'crlf' (def on Windows) or 'lf' (def on Unix)
--charset 'ENCODING'              #Of input files (def: 'utf8')
--emitBOM                         #Prepend UTF-8 BOM in output

--pretty                          #When true (def if TTY), errors have color and show source code lines.
--noErrorTruncation               #Do not truncate some error messages to 100 characters.
--locale LANG                     #LANG used in error messages (def: 'en-us')

--listEmittedFiles                #Prints (at beginning) list of output files, in order.
--listFiles                       #Same but also prints MODULEs and LIBs
--diagnostics                     #Print static analysis info:
                                  #  - number of files|lines|nodes|identifiers|symbols|types
                                  #  - time used for I/O|parse|bind|check|emit
                                  #  - memory used
--extendedDiagnostics             #Same but also show:
                                  #  - cache size
                                  #  - time used for program|transform|comment|print
--disableSizeLimit                #Do not crash when total non-*.ts[x] files size >= 20MB

tsserver                          #Like tsc but using a server/client architecture.
                                  #Commands are as JSON on stdin, and result is on stdout.
                                  #Not documented yet (do it when I need to)

LANGUAGE SERVICE PLUGINS ==>      #Programmatic API for changing behavior of TypeScript inside IDE / code editors.
                                  #Features: inline linting, autocompletion, "go to symbol"
                                  #Not documented yet (do it when I need to)
--plugins OBJ                     #Enable a language service plugin
                                  #OBJ: name STR, then custom config properties

PROGRAMMATIC USAGE ==>            #Not documented yet (do it when I need to).
                                  #Should then check TypeScript GitHub wiki: Using-the-Compiler-API, FAQs-for-API-Consumers API-Breaking-Changes

STRUCTURAL TYPING ==>             #Not nominative, i.e. TYPE is the structure not the name (including for CLASS|INTERFACE).
                                  #Exception: CLASS private|protected fields.

TYPE                              #Among the ones below
UTYPE                             #Union of several TYPE
                                  #never if no members.

type TYPE = TYPE2                 #Alias
                                  #TYPE2 name will be used (not TYPE) in error messages and IDE tools.

typeof VAL                        #Returns its TYPE
                                  #If VAL is CLASS, returns its constructor() FUNC_TYPE (instead of instance OBJ_TYPE)

TYPE extends TYPE2                #If TYPE is covariant (child|equal) to TYPE2, resolves to TYPE3, otherwise TYPE4
 ? TYPE3 : TYPE4                  #If TYPE is generic:
                                  #  - results in union of all possible TYPE3|TYPE4
                                  #  - transtyped to TYPE & TYPE2 if used inside TYPE3
                                  #TYPE2 can contain "infer T":
                                  #  - generic type that can be used inside TYPE3
                                  #  - guessed by trying to transtype TYPE to TYPE2
                                  #  - sometimes need () for operators precedence
                                  #Common ones:
                                  #  - boolean as generic TYPE and BOOL as TYPE2
                                  #  - STR_UTYPE as generic TYPE and STR as TYPE2

KTYPE                             #TYPE of an OBJ key, i.e. STR|NUM|SYM_TYPE
                                  #Either:
                                  #  - { VAR: ... }: literal value TYPE
                                  #  - { [VAR: TYPE]: ... }: any TYPE
KUTYPE                            #UTYPE of KTYPE
keyof TYPE                        #KUTYPE of TYPE properties keys (including methods)
                                  #Non-OBJ_TYPE use prototype properties
                                  #  - null|undefined have none
                                  #Common ones:
                                  #  - keyof any: any KTYPE
TYPE[TYPE2]                       #UTYPE of TYPE properties values (including methods)
                                  #TYPE2 must intersect with keyof TYPE
                                  #Common ones:
                                  #  - ARR_TYPE[number]: TYPE of any ARR element
                                  #  - OBJ_TYPE[keyof OBJ_TYPE]: TYPE of any property
{ [T in KUTYPE]: VAL }            #Expanded to OBJ_TYPE where:
                                  #  - keys are each KTYPE in KUTYPE
                                  #  - VAL can refer to T (current KTYPE)
                                  #Cannot define other properties directly:
                                  #  - but can do it through ... & OBJ_TYPE2
                                  #Often used to map a TYPE using { [P in keyof TYPE]: TYPE[P] }
                                  #Can use ? and readonly on key like other OBJ_TYPEs
                                  #  - can be prefixed with -|+ to mean "remove|add"
--keyofStringsOnly                #Backward compatibility with TypeScript <=2.9 where KTYPE could not be NUM|SYM_TYPE:
                                  #  - keyof TYPE will ignore them
                                  #  - { [T in KUTYPE]: VAL } will fail on them
                                  #Avoid it since it fails with newer libraries

any                               #Union of all possible TYPEs
                                  #Default TYPE
                                  #Values can use any operators of any TYPE.
                                  #Transtype TYPE <-- any always possible (except never)
                                  #Transtype any <-- TYPE always possible
                                  #any | TYPE -> any
                                  #any & TYPE -> TYPE
unknown                           #Like any:
                                  #  - transtype unknown <-- TYPE always possible
                                  #  - unknown | TYPE -> unknown
                                  #  - unknown & TYPE -> TYPE
                                  #But:
                                  #  - values can only operators common to any TYPE, i.e. === !== =
                                  #  - can only transtype any|unknown <-- unknown
                                  #  - unknown | any -> any, unknown & any -> any
never                             #No possible TYPE.
                                  #Transtype TYPE <-- never always possible.
                                  #Transtype never <-- TYPE never possible (except never itself)
                                  #never | TYPE -> TYPE
                                  #never & TYPE -> never
                                  #Examples:
                                  #  - union with no members
                                  #  - intersection with nothing in common
                                  #  - return statement that can't be reached (e.g. exception, or type guard that can't be true)

undefined                         #
null                              #
--strictNullChecks                #Unless set, transtype TYPE <-- undefined|null always possible

void                              #TYPE for "no return value" in FUNCs
                                  #  - i.e. not returning and returning undefined is conceptually different (although the same in JavaScript)
                                  #Distinct from undefined|null TYPEs
                                  #Can only transtype from|to itself
                                  #  - exception: void <-- undefined is allowed

NonNullable<TYPE>                 #Same TYPE minus undefined|null

boolean                           #BOOL
number                            #NUM
string                            #STR
bigint                            #BIGINT
BOOL|NUM|STR|BIGINT               #TYPE for only that value. Must be literal value.

symbol                            #Any SYM
unique symbol                     #Specific SYM. Child of 'symbol'.
                                  #Well-known SYM have type 'symbol' but Symbol[.for]() have type 'unique symbol'

const enum ENUM                   #Def STR|NUM is previous NUM + 1, or 0 if first one.
 { NAME [= STR|NUM],... }         #STR|NUM can be an EXPR using () + - ~ * / % << >> >>> & | ^
ENUM.NAME                         #Item's VAL:
                                  #  - inlined to STR|NUM
                                  #  - must be used instead of STR|NUM directly
                                  #Can also be used as TYPE providing:
                                  #  - no STR|NUM is an EXPR
                                  #  - ENUM is the original variable (not an alias)
--preserveConstEnums              #Inline const ENUM as OBJ.
                                  #Still treated it as a const ENUM during typechecking and ENUM.NAME inlining.
                                  #But can be exported, i.e. consumer can treat it as an OBJ.
enum ENUM {...}                   #Same but ENUM is inlined as an OBJ:
                                  #  - i.e. can be used both as a TYPE and an OBJ
                                  #  - ENUM.NAME is inlined as OBJ.NAME instead of NUM|STR
                                  #Can use ENUM[NUM] -> 'TYPE'
                                  #NUM EXPR can also use other operators providing:
                                  #  - next NAME is initialized

object                            #OBJ
                                  #Includes any child: FUNC, ARR, new String(STR), REGEXP, etc.
                                  #Includes Object.create(null)
                                  #Excludes null
{ VAR[?]: TYPE,... }              #OBJ with specific properties
                                  #Delimiters:
                                  #  - can be , ; or newline
                                  #  - can use trailing delimiters
                                  #No missing properties unless '?':
                                  #  - even undefined|null, i.e. {VAR: undefined} works but not {}
                                  #No additional properties:
                                  #  - with OBJ.VAR or { VAR }, not OBJ[NUM|STR] or { [NUM|STR] }
                                  #  - unless either:
                                  #     - empty OBJ_TYPE {}
                                  #     - using an OBJ VAR (instead of an OBJ literal)
                                  #        - only if not all properties are additional
                                  #        - should not rely on this exception
--suppressExcessPropertyErrors    #Allow additional properties
{ [VAR: TYPE2]: TYPE, ... }       #TYPE of OBJ[NUM|STR] (not OBJ.VAR)
                                  #Applies to all properties, additional or not.
                                  #TYPE2 is the key type, either:
                                  #  - NUM
                                  #  - STR: works for OBJ[NUM] too
                                  #Defaults to untyped (any)
--suppressImplicitAnyIndexErrors  #Do not make --noImplicitAny fail when OBJ[NUM|STR] use default untyped (any).

Partial<OBJ_TYPE>                 #Adds ? on all properties
Required<OBJ_TYPE>                #Removes ? on all properties
Pick<OBJ_TYPE, KUTYPE>            #Only keep KUTYPE properties
Omit<OBJ_TYPE, KUTYPE>            #Inverse
Record<KUTYPE, TYPE>              #OBJ_TYPE with:
                                  #  - key for each KTYPE
                                  #  - value always TYPE

class CLASS                       #CLASS can be used as OBJ_TYPE (of instances):
                                  #  - including:
                                  #     - methods
                                  #     - non-initialized properties|methods
                                  #     - protected|private properties|methods
                                  #        - if any, can only match CLASS instances
                                  #  - excluding:
                                  #     - constructor()
                                  #     - static properties|methods
                                  #{...} can use the same syntax (e.g. { VAR[?]: TYPE })
                                  #As opposed to INTERFACE, it is both a runtime value and an OBJ_TYPE
  [extends CLASS2]                #Same as JavaScript, i.e. inherit|mixin members (types+values) from CLASS2
  [implements OBJ_TYPE,...]       #Must implement members of OBJ_TYPE,...
{
  constructor(...)                #Constructor return type is always CLASS, i.e. must not be specified.
  constructor                     #When QUAL specified, shortcut to set this.VAR = VAL. "Parameter properties"
   (QUAL VAR[?]: TYPE,...)        #QUAL is public|protected|private|readonly and used like { QUAL VAR }
  [public|protected|private] VAR  #Fields visibility is different than JavaScript:
                                  #  - VAR -> [public] VAR
                                  #  - #VAR -> private VAR
                                  #  - not possible -> protected VAR
                                  #     - like private VAR but child CLASS can access it too
}

abstract CLASS ... {              #CLASS that cannot be instantiated (but children can)
  abstract FUNC(...): TYPE        #FUNC with no body, that must be reimplemented by children
}

interface INTERFACE               #Like type INTERFACE = { ... } but preferred because:
 [extends OBJ_TYPE,...] { ... }   #  - can 'extends': inherit|mixin members (types) from OBJ_TYPE
                                  #  - INTERFACE name is used (instead of literal OBJ) in error messages and IDE tools
INTERFACE MERGING ==>             #If INTERFACE declared several times, merge them.
                                  #Properties can have same name but:
                                  #  - non-FUNCs must have same TYPE (i.e. unchanged)
                                  #  - FUNCs will be overloaded, in that order:
                                  #     - if single STR literal argument, always first
                                  #     - last declared before first declared

CONSTRUCTOR_FUNC                  #Any constructor FUNC can be used as OBJ instance TYPE, just like CLASS.
                                  #This includes:
                                  #  - Error, RegExp, Date, etc.
                                  #  - Object|Number|String|Boolean but should use object|number|string|boolean instead
Promise[<T>]                      #PROMISE either:
                                  #  - resolving T
                                  #     - if 'never', means cannot resolve
                                  #  - rejecting anything

Function                          #Any FUNC
                                  #Should prefer the specific FUNC_TYPEs below
CallableFunction                  #Same as Function (child of it) except arguments of FUNC.bind|call|apply() are type checked.
NewableFunction                   #Same but for a constructor.
--strictBindCallApply             #Make FUNC_TYPEs inherit from CallableFunction|NewableFunction instead of Function

([...]VAR[?]: TYPE,...) => TYPE2  #Specific FUNC (child of Function)
                                  #TYPE2 is return value.
                                  #No missing arguments: like OBJ missing properties
                                  #No additional arguments:
                                  #  - unless defined variadic ...VAR (always optional)
                                  #VAR names are not significant.
                                  #Argument TYPEs are only checked inside body during declaration statement
                                  #  - not when FUNC is transtyped after declaration
{ FUNC(...): TYPE2 }              #OBJ.FUNC: shortcut for { FUNC: (...) => TYPE2 }
{ (...): TYPE2, ... }             #FUNC with OBJ properties
new (...) => TYPE2                #Require using new FUNC()
{ new (...): TYPE2 }              #  - e.g. a CLASS constructor
                                  #Prefer using a CLASS definition

this                              #Can be:
                                  #  - VAR (argument): must be first parameter
                                  #  - TYPE2 (return value)
--noImplicitThis                  #Error when using `this` with type ANY.
                                  #I.e. caller did FUNC() instead of OBJ.FUNC() or FUNC.call|bind(OBJ)
ThisType<TYPE>                    #OBJ_TYPE where all OBJ.FUNC() use TYPE as `this`
                                  #Usually used as intersection.
                                  #Only works when --noImplicitThis is used
                                  #Not needed for CLASSes (which guess `this`) or single FUNC (which can use `this` parameter)

Parameters<FUNC_TYPE>             #Parameters [TYPE,...] (tuple)
ReturnType<FUNC_TYPE>             #Return value TYPE2
ConstructorParameters<FUNC_TYPE>  #Same as Parameters<> but for 'new FUNC'
InstanceType<FUNC_TYPE>           #Same as ReturnType<> but for 'new FUNC'

TYPE[]
Array<TYPE>                       #ARR of same types
[TYPE,...]                        #ARR of different types (TUPLE).
                                  #Each TYPE is only for that index. If outside range, use a union of all possible TYPEs.
[..., ...ARR_TYPE]                #Spreads an ARR_TYPE
                                  #Does not work with TUPLE

{ readonly ...: TYPE,... }        #Shallow immutability (like `const`) of OBJ properties.
                                  #Should be specified whenever possible.
Readonly<OBJ_TYPE>                #`readonly` to all OBJ properties.
                                  #Does not apply to the OBJ itself.
                                  #Does not work on INTERFACE.
readonly TYPE[]
readonly [TYPE,...]
ReadonlyArray<TYPE>               #Same for all ARR members.
class ...
  { readonly ...: TYPE,... }      #Like OBJ. Exception: field is mutable in constructor()

TYPE | TYPE2                      #Union ("or")
TYPE & TYPE2
Extract<TYPE, TYPE2>              #Intersection ("and")
Exclude<TYPE, TYPE2>              #Difference (in TYPE but not in TYPE2)


type TYPE<T...> = ...             #Declaring a generic TYPE, i.e. must specify another TYPE2 during usage.
class CLASS<T...> {}              #<T...> is <T [extends TYPE3,...][= TYPE4],...>
interface INTERFACE<T,...> {}     #Type of T is:
[new] <T...>(...) => ...          #  - when not instantiated: TYPE3 & ... (def: unknown)
{ FUNC<T...>(...): ... }          #  - when instantiated: the specified TYPE2 (def: TYPE4, required otherwise)
{ [new] <T...>(...): ... }        #There can be several <T,...>
                                  #  - each can refer to each other
                                  #Can also transtype towards TYPE|CLASS|INTERFACE|FUNC that is generic itself.
                                  #  - i.e. values transtyped towards generic TYPE must already have been declared using <T,...>
--noStrictGenericChecks           #No type checking of <T,...> when transtyping generic FUNCs.
                                  #Avoid: only useful for backward compatibility with TypeScript<=2.4

TYPE<TYPE2,...>                   #Using a generic TYPE


<TYPE>VAL                         #Type assertion of a VAL
VAL as TYPE                       #Has stronger operator precedence than everything except () .VAR [INDEX] new (...ARGS) ++ --
                                  #Bypasses transtyping rules

QUAL VAR: TYPE [= VAL]            #Type assertion during VAR declaration

function [FUNC][<T,...>]
 (VAR[?]: TYPE,...): TYPE2 {...}
[<T,...>]
 (VAR[?]: TYPE,...): TYPE2 => ...
[class ...] {
  FUNC[<T,...>]
   (VAR[?]: TYPE,...): TYPE2 {}
}                                 #Type assertion during FUNC declaration

[new] CLASS|FUNC<TYPE2,...>(...)  #Type assertion during FUNC call

function FUNC(...): TYPE2         #Function overloading.
...                               #The first FUNCs are the overloads, the last one is the implementation. Must follow each other.
function FUNC(...): TYPE3 {...}   #Each overload is tried in order until one matches, i.e. most specific should be first.

VAL!                              #Transtype to same TYPE minus undefined|null

var|let VAR                       #Unitialized VARs are allowed even if their TYPE does not allow undefined.
                                  #They use their TYPE for assignments|transtyping, like initialized VARs.
                                  #But they use `undefined` TYPE for operators (including VAR.VAR2), i.e. will fail.
var|let VAR!: TYPE                #Do not use `undefined` TYPE for operators with unitialized VARs
class ... { VAR!: TYPE; ... }     #Useful when VAR is initialized but it cannot be guessed compile-time, e.g. when done in different scope.
--strictPropertyInitialization    #Do not allow class properties:
                                  #  - whose TYPE does not include undefined
                                  #  - and who is not initialized (including in constructor)

<const>VAL
VAL as const                      #
                                  #Type assertion adding Readonly<typeof VAL>
                                  #VAL must be a literal STR|NUM|BOOL|ARR|OBJ
Literal values typing with TypeScript:
  - if let "number" but if const NUM???
  - applies to readonly too???
  - applies to <const>VAL

TRANSTYPING RULES ==>             #For TYPE2 <-- TYPE, TYPE2 must be contravariant to TYPE.
                                  #For FUNCs:
                                  #  - bivariant arguments
                                  #     - although should theoritically be covariant
                                  #        - reason is common callback pattern in JavaScript:
                                  #           - TYPE2 is callback parameter, which must be generic
                                  #           - TYPE is callback argument, which is more specific
                                  #           - should theoritically use TYPE2 as argument instead, and do a <TYPE> assertion
                                  #             instead, but it's more verbose
                                  #     - including for argument optionality, for the same reasons
                                  #     - but covariant for arity: FUNC2.length must >= FUNC.length
                                  #  - contravariant return value
                                  #     - including type guards
                                  #For CLASS:
                                  #  - PARENT <-- CHILD must be possible
                                  #  - i.e. PARENT must be contravariant to CHILD
                                  #See polymorphism docs for more info.
--strictFunctionTypes             #Only allow transtyping to covariant arguments instead of bivariant.
                                  #  - including argument optionality
                                  #Does not apply to methods|constructors, i.e. { FUNC|new(...): TYPE2 }
                                  #  - but applies to { FUNC: [new] (...) => TYPE2 }

TYPE INFERENCE ==>                #Only needed for untyped values:
                                  #  - i.e. not needed for JavaScript operators (including =) since their types is known
                                  #Untyped 'MODULE' dependency:
                                  #  - i.e. without TypeScript TYPEs, and --allowJs --maxNodeModuleJsDepth was not used
                                  #Untyped FUNC parameters:
                                  #  - use caller's argument literal value as TYPE
                                  #  - if "= VAL" (default value), use '?'
                                  #Untyped FUNC return value:
                                  #  - use return literal value as TYPE
                                  #  - if several return statements, use union
                                  #Literal values:
                                  #  - use literal value as TYPE
                                  #  - OBJ: do it recursively
                                  #  - ARR:
                                  #     - do it recursively, as a union
                                  #     - if empty -> never[]
                                  #Possible issues:
                                  #  - too generic TYPEs in entry points
                                  #     - e.g. default "any"
                                  #  - too generic|specific TYPEs in literal values
                                  #     - e.g. [] but meant ReadonlyArray<T>
                                  #     - e.g. TypeError but meant Error
                                  #  - FUNC arguments -> return value relation is not specified
                                  #     - e.g. output is number|boolean if input.type is "number|boolean"
--noImplicitAny                   #Do not allow untyped values (type could not be infered).
                                  #Explicit any type assertion is allowed.

TYPE GUARDS ==>                   #When:
                                  #  - using: if|else, switch, ternary (? :), chaining (&& ||)
                                  #  - with: typeof VAL, instanceof VAL, === !== == != VAL
                                  #  - and only: ! && ||
                                  #Then inside the blocks:
                                  #  - ARG will be transtyped to the right TYPE
                                  #  - including return value TYPE if has `return` statement
VAR is TYPE                       #When used as FUNC return value's TYPE2, means FUNC() can be used as a type guard.
                                  #FUNC must return BOOL determining whether argument VAR belongs to TYPE.
TAGGED UNION ==>                  #When type guarding with OBJ.VAR === !== == != VAL, it type guards OBJ as well.
                                  #For example:
                                  #  type A = { kind: 'A' }
                                  #  type B = { kind: 'B' }
                                  #  (obj: A|B) => obj.kind === 'A' && ... // `obj` will be of type A

namespace NAMESPACE { ... }       #Scope { ... } under NAMESPACE (which is transpiled to an anonymous function).
                                  #NAMESPACE can be used as an OBJ value.
                                  #Meant:
                                  #  - for pre-ESM modules (global scope, UMD)
                                  #  - as a "trick" to export TYPEs with CommonJS|AMD|UMD default `module.exports` (see below)
export ...                        #Assign to NAMESPACE.VAR, i.e. allow using outside of NAMESPACE
                                  #Same syntax as `declare ...`
                                  #Not same as ESM `export` keyword.

import VAR2 = NAMESPACE.VAR       #Like const VAR2 = NAMESPACE.VAR except also works if NAMESPACE.VAR is a TYPE
                                  #Not same as ESM `import` keyword.

NAMESPACE MERGING ==>             #If NAMESPACE declared several times, merge exported VARs.
                                  #Non-exported VARs are not merged.
                                  #Exported VARs must not have same names.
NAMESPACE MERGING OTHERS ==>      #If another declaration|TYPE (not implementation) has same name, merge it:
                                  #  - i.e. can access NAMESPACE.* with VAR.*
                                  #Both|neither must use export.
                                  #For CLASS, NAMESPACE must de declared after.

declare QUAL VAR ...              #Declaration|TYPEs only, not implementation:
declare function ...              #  - VAR: cannot be initialized
declare ... enum ...              #     - except with literal STR|NUM|BIGNUM|ENUM (treated as TYPE)
declare ... class ...             #  - FUNC: no body
declare namespace ...             #  - enum|class|namespace: only TYPE not value
declare type ...                  #  - type|interface: noop
declare interface ...             #Useful when TYPE declaration is in TypeScript and implementation in JavaScript.

export declare ...                #ESM `export` must be before `declare`

AMBIENT FILE ==>                  #File where every statement is declaration|TYPE.
                                  #Often named *.d.ts. Should be sibling to each build file for easy resolution|discovery.
                                  #Should be treated as a production dependency, not dev dependency.
-d|--declaration                  #Generate *.d.ts ambient files:
                                  #  - type inference on import|export statements
                                  #  - only use top-level files (which is guessed from dependency tree)
                                  #  - non assigned import statements are kept
--declarationDir DIR              #Def: same directory as file
--emitDeclarationOnly             #Like --declaration + --noEmit
--stripInternal                   #--declaration will ignore statements preceded with /** @internal */

--moduleResolution STR            #"MODULE|PATH" resolution:
                                  #  - 'node' (def if --module commonjs):
                                  #     - like Node: node_modules, PACKAGE.main, index.js
                                  #     - *.json only if --resolveJsonModules
                                  #     - PACKAGE.types|typings: same as PACKAGE.main but higher priority and TypeScript-specific
                                  #     - PACKAGE.typesVersions.SEMVER OBJ:
                                  #        - same but only if TypeScript version matches SEMVER
                                  #        - OBJ has same syntax as --paths
                                  #  - 'classic' (def otherwise):
                                  #     - "PATH": as is
                                  #     - "MODULE": search ".[/../...]/MODULE"
--traceResolution                 #Verbose|debug for --moduleResolution
--baseUrl URL|PATH                #Base URL|PATH for any "MODULE"
--paths OBJ                       #{ MODULE: "URL|PATH"_ARR, ... } for each "MODULE"
                                  #If several, tried in order.
                                  #If MODULE is "*":
                                  #  - for any "MODULE"
                                  #  - can add "*" in "URL|PATH", which will be replaced by each "MODULE"
--rootDirs DIR_ARR                #When importing inside one of the "DIR"s, other "DIR"s are tried as well.
                                  #Goals:
                                  #  - when merging several source "DIR" into single "DIR2" during build
                                  #  - when "DIR" are dynamically generated and might not exist

FILE EXTENSIONS ==>               #import 'PATH' must not include .EXT
                                  #import 'PATH|MODULE' tries several times using (in order) .ts[x], .d.ts, (if --allowJs) .js[x]
                                  #  - including PACKAGE.main, i.e. 'FILE.js' will search for 'FILE.ts[x]|d.ts'

*.JS TYPING ==>                   #*.js can be imported but are untyped (any) by default.
--allowJs                         #Use type inference of *.js exported values
--checkJs                         #Also do type checking inside *.js
// @ts-ignore                     #Ignore --checkJs on next line
// @ts-nocheck                    #Ignore --checkJs on whole file (blacklisting, default)
// @ts-check                      #Only use --checkJs for files with this comment (whitelisting)
--maxNodeModuleJsDepth NUM        #Run --allowJs (if enabled) on imported 'MODULE' (instead of only 'PATH') providing:
                                  #  - they are NUM levels deep in dependencies tree
                                  #  - no *.ts[x]|d.ts can be found
                                  #Also run --checkJs (if enabled), but not recommended, as most *.js 'MODULE' will report errors.
                                  #Def: 0 (disabled)
JSDOC COMMENTS ==>                #Can be used for typecasting in *.js

--module STR                      #Module system for output:
                                  #  - esnext: ES modules
                                  #  - es2015|es6: same but without import() and import.meta
                                  #  - commonjs (def)
                                  #  - amd
                                  #  - umd
                                  #  - system: SystemJS
                                  #  - none:
                                  #     - global variables
                                  #     - cannot use import|export

ES MODULES ==>                    #Must be used for sources:
                                  #  - imported 'PATH' must use ESM
                                  #  - imported 'MODULE' can use any module system, but non-ESM will be untyped (any)
                                  #     - i.e. 'MODULE' should use ambient files if not packaged as TypeScript
                                  #Can also import|export TYPEs and type|enum|interface|namespace
                                  #Can use dynamic import()
                                  #import.meta is empty OBJ

export = VAL|TYPE                 #exporting|importing default `module.exports` of CommonJS|AMD|UMD
import VAL = require(STR)         #  - as opposed to `module.exports.default` / `export default`
                                  #Require --module commonjs|amd|umd
                                  #To export default `module.exports` but also export TYPEs:
                                  #  - should define TYPEs in a NAMESPACE
                                  #  - then use NAMESPACE merging, i.e. name it the same as the `module.exports` variable (even if not an OBJ)
--esModuleInterop                 #Check __esModule (like Babel) when using both:
                                  #  - ESM default import or import *
                                  #  - --module commonjs|amd|umd
                                  #I.e. allows using ESM default import or import * with CommonJS|AMD|UMD default export
                                  #  - should prefer using "import VAL = require(STR)" instead, providing --module commonjs|amd|umd used
                                  #ESM exports always set __esModule true regardless, except when using --module es*
--allowSyntheticDefaultImports    #Do not report ESM default import of a CommonJS|AMD|UMD default `module.exports`
                                  #Def: true if --esModuleInterop or --module system

require(STR)                      #Dynamic CommonJS import
                                  #Should prefer dynamic import() instead.
                                  #Return value is untyped (any), i.e. must transtype.

export as namespace NAME          #Declare NAME of global variable used in UMD declaration.
                                  #I.e. any exported variable VAR is also available as global NAME.VAR
                                  #The current file must:
                                  #  - be named *.d.ts
                                  #  - use ESM, i.e. use another import|export statement
--allowUmdGlobalAccess            #If false (def), `export as namespace NAME` can only be consumed by imported file if it:
                                  #  - uses <reference/>
                                  #  - does not use ESM, i.e. no other import|export statements

/// <amd-module name="NAME"/>     #With --module amd, NAME of current file (instead of anonymous)

declare module "MODULE" {...}     #Declare the TYPEs (inside {...}) exported by `import "MODULE"`
                                  #Should prefer directly using ESM `export` in ambient file instead.
                                  #Meant to be used with <reference/> but can be imported with ESM `import` too.
                                  #import|export:
                                  #  - can be used in current file, but only inside {...}
                                  #  - can only import from "MODULE" not "PATH"
                                  #  - `export` inside {...} is implied (but can still be used)
                                  #"MODULE" can use globbing *
                                  #  - e.g. "*!text" or "text!*" for loaders that allow such notation
declare module "MODULE";          #Make any `import "MODULE"` work, but untyped (any).
--skipLibCheck                    #Skip type checking of ambient files themselves (not the files that use them)
                                  #Meant to speed up compile speed. Not recommended.

MODULE AUGMENTATION ==>           #When declaring MODULE again, merge with MODULE already declared.
                                  #Merges the same way as INTERFACEs.
                                  #import|export "MODULE|PATH" outside {...} can be used
                                  #  - it must be used in order to distinguish from normal module declaration
                                  #Cannot use globbing *
declare global { ... }            #Module augmentation for global scope.

/// <.../>                        #Transpiler pragma directives
                                  #Must be at top of file (except other comments or blank lines)

/// <reference path="PATH" />     #Deprecated alternative to ESM `import`
                                  #  - meant to import PATH that does not use ESM `export`
                                  #Declare that:
                                  #  - PATH content is included there
                                  #  - current file and PATH share same scope
                                  #     - can reference declarations from each other
                                  #     - i.e. should use NAMESPACEs or 'declare module'
                                  #The inclusion itself is done separately either:
                                  #  - compile-time when using --outFile
                                  #  - by loading both files with <script> from a parent file
--noResolve                       #Ignore all /// <reference .../>

@types/MODULE                     #Ambient files maintained by DefinitelyTyped
                                  #  - central repository (must send PRs)
                                  #  - search at https://microsoft.github.io/TypeSearch/
                                  #Prefer keeping TYPEs in same repository as code instead.
@types/node                       #Same for all core Node.js "MODULE"
/// <reference types="MODULE"/>   #Same as <reference path> but for "@types/MODULE"
--types "MODULE" ...              #'MODULE'_ARR of @types/MODULE to automatically try during "MODULE" resolution (regardless of --moduleResolution)
                                  #Def: any
--typeRoots "DIR" ...             #Resolve "@types/*' to "DIR"_ARR instead.

--lib 'LIB' ...                   #Same as <reference path> but for 'typescript/lib/lib.LIB.d.ts', i.e. core JavaScript types among:
/// <reference lib="LIB"/>        #  - es3|5|6|2015-2020|next
                                  #     - es2015-2020|next.FEATURE: specific feature (automatically included)
                                  #  - dom
                                  #     - dom.iterable: DOM objects being ITERABLE
                                  #     - webworker: WORKER
                                  #     - webworker.importscripts: WORKERGLOBAL.importScripts()
                                  #Def: dom + es* depending on --target
--noLib
/// <reference
 no-default-lib="true"/>          #Do not include any 'LIB'

tslib                            ##Similar to core-js but fewer features:
                                 ##  - `STR`
                                 ##  - ...ARR, ...OBJ, Object.assign()
                                 ##  - async|await
                                 ##  - ITERATOR
                                 ##  - __esModule logic
                                 ##  - @DECORATOR
                                 ##Version 1.10.0
--importHelpers                  ##Use import 'tslib' statements (i.e. must install it) instead of inlining those functions.
--noEmitHelpers                  ##Same but must use <reference/> to load 'tslib' instead.
--target STR                      #Pick helpers from tslib based on ES version, among es3 (def) or es5|6|2015-2020|next
                                  #I.e. --lib is for sources, --target is for build
--downlevelIteration              #Whether to include ITERATOR full helpers (next|return|throw(), Symbol.iterator) instead of simplified ones.
                                  #Only useful when --target es3|5
--isolatedModules                 #Remove some features that rely on analyzing files together (instead of one at a time):
                                  #  - NAMESPACE
                                  #  - declare const enum
                                  #  - re-exporting a TYPE
                                  #  - without --importHelpers, inline helpers in each file instead of shared
                                  #Must be enabled when using Babel TypeScript plugins

--experimentalDecorators          #Allow @DECORATOR (ES stage 2 proposal)
--emitDecoratorMetadata           #Allow Reflect.metadata (ES stage 0 proposal)

--strict                          #Alias for --noImplicitAny --noImplicitThis --alwaysStrict --strictBindCallApply
                                  #--strictNullChecks --strictFunctionTypes --strictPropertyInitialization

--alwaysStrict                    #If 'use strict' missing:
                                  #  - implied during type checking
                                  #  - prepended in transpiling
--noImplicitUseStrict             #If false (def), ESM implies 'use strict':
                                  #  - in source: output (if non-ESM) will use it
                                  #  - in output: never present

--allowUnreachableCode            #Do not lint against statements that can't be reached, e.g.:
                                  #  - after a `return` statement
                                  #  - inside a if|switch|... whose condition is known compile-time to be false
--allowUnusedLabels               #Do not lint against unused JavaScript LABEL:
--noImplicitReturns               #Lint against omitting `return;` at end of function with no return statements
--noUnusedLocals                  #Lint against unused variables (except parameters)
--noUnusedParameters              #Lint against unused parameters
--noFallthroughCasesInSwitch      #Lint against switch case with no break, unless followed by another case right away.

--jsx STR
--jsxFactory STR
/* @jsx STR */                    #See React doc
