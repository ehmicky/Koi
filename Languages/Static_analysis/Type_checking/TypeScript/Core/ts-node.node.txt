
           
   TS-NODE  
           



VERSION ==>                       #8.3.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #Can be:
                                  #  - --conf-var-name (CLI)
                                  #  - CONF.varName (register())
                                  #  - ENVVAR TS_NODE_VAR_NAME (CLI, register(), -r)
                                  #Serialization for CLI and ENVVAR:
                                  #  - STR -> STR
                                  #  - BOOL -> '0|1'
                                  #  - ARR -> 'STR,...'
                                  #  - OBJ -> 'JSON'
                                  #  - FUNC -> not possible

TCONF                             #TypeScript configuration.
                                  #Forces:
                                  #  - no --noEmit
                                  #  - no --declaration[Map] --emitDeclarationOnly
                                  #  - --outDir '$$ts-node$$' (no --out[File]), but actually not written
                                  #  - --sourceMap --inlineSources
                                  #     - but actually uses inline source maps
                                  #     - uses node-source-map-support on type checking ERRORs
                                  #  - no incremental builds (--composite, --tsBuildInfoFile, --incremental)
                                  #  - no --files|include|exclude if --files false (def)
                                  #Default:
                                  #  - --target es5 (instead of es3)
                                  #  - --module commonjs
-P|--project                      #Like tsc (def: guessed)
--skip-project                    #BOOL (def: false). Do not use --project
-O|--compiler-options             #TCONF.compilerOptions
--pretty                          #Like tsc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REGISTER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-r ts-node/register               #Do tsc runtime (instead of compile-time)
                                  #Do it by patching require() (using require.extensions['EXT'])
                                  #For extensions '.ts' and (depending on TCONF.allowJs|jsx) '.js[x]|.tsx'
                                  #Transpilation and type checking are cached, using file path as key.
-r ts-node/register/type-check    #Same but with --type-check
-r ts-node/register/transpile-only#Same but with --transpile-only

--type-check                      #BOOL (def: true). Do type check.
-T|--transpile-only               #BOOL (def: false). Do not type check.
-D|--ignore-diagnostics           #'NUM'|NUM_ARR: ignore type checking errors with those codes
--log-error                       #BOOL (def: false). `console.error()` on type checking error (instead of throwing)

--prefer-ts-exts                  #BOOL (def: false). If importing with '.EXT', prefer '.ts' over '.js'
-I|--ignore                       #'REGEXP'_ARR (def: ['node_modules']). Ignore matching files
--skip-ignore                     #BOOL (def: false). Do not use --ignore

-C|--compiler                     #Underlying 'MODULE' (def: 'typescript')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ts-node                           #Like node but using -r ts-node/register
                                  #Works as REPL too (using 'repl' core module)
                                  #  - `.type TYPE` -> print a TYPE (using REGISTER.getTypeInfo())
-e|--eval
-p|--print
-r|--require                      #Same as node flags


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


register([CONF])->REGISTER        #Same as -r ts--node/register but programatically

REGISTER.compile
 ('TYPESCRIPT', 'FILENAME'[, NUM])#Manually transpile and type check a STR
 ->'JAVASCRIPT'                   #NUM is line offset

REGISTER.getTypeInfo              #Retrieve TYPE of a VAR inside 'TYPESCRIPT'
 ('TYPESCRIPT', 'FILENAME', NUM)  #NUM is byte offset
 ->OBJ                            #OBJ:
                                  #  - name 'TYPE'
                                  #  - comment STR (like autocomplete popup in VSCode)
                                  #Requires --type-check

REGISTER.ts.*                     #Forwards to TYPESCRIPT.*
REGISTER.cwd                      #process.cwd()
REGISTER.extensions               #'EXT'_ARR

CONF.transformers                 #Custom TYPESCRIPT transformers
CONF.readFile('PATH')[->STR]
CONF.fileExists('PATH')->BOOL     #Customize underlying FS.* calls
