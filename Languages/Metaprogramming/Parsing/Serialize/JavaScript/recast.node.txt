
          
   RECAST  
          



ALTERNATIVES ==>                  #  - escodegen: not maintained anymore
                                  #  - recast (preferred)

VERSION ==>                       #0.12.5
                                  #Reverse JavaScript parser. Also do parsing (forwarding to Esprima)


RECAST.parse('JS'[, OPTS])->NODE  #Similar to ESPRIMA.parse()
                                  #Automatically use OPTS:
                                  #  - jsx true, ecmaVersion 6, sourceType 'module'
                                  #  - loc true, locations true, comment true, range OPTS.range (def: false)
                                  #Can specify OPTS:
                                  #  - tabWidth NUM (def: same as source)
                                  #  - sourceFileName 'FILE': for source maps
                                  #  - tolerant BOOL (def: true): do not throw on non-fatal errors

RECAST.print(NODE[, OPTS])->OBJ   #Reverse parsing, with OBJ:
                                  #  - code 'JS'
                                  #  - map OBJ (source map):
                                  #     - version NUM
                                  #     - file 'FILE': from sourceMapName
                                  #     - sources 'FILE'_ARR: from sourceFileName
                                  #     - sourcesContent STR_ARR
                                  #     - sourceRoot STR: from sourceRoot
                                  #     - mappings STR
                                  #     - names STR_ARR
                                  #OPTS (source maps):
                                  #  - sourceMapName STR
                                  #  - sourceRoot STR
                                  #  - inputSourceMap OBJ:
                                  #     - previous source map to reuse (compose with new one)
                                  #     - must be previous print() result.map
                                  #OPTS (pretty printing):
                                  #  - tabWidth NUM (def: 4)
                                  #  - useTabs BOOL (def: false)
                                  #  - reuseWhitespaces BOOL (def: true): do not change whitespaces
                                  #  - lineTerminator STR (def: OS.EOL)
                                  #  - wrapColumn NUM (def: 74): line width
                                  #  - quote "auto", "single" or "double" (def)
                                  #  - trailingCommas BOOL or OBJ.objects|arrays|parameters BOOL (def: false)
                                  #  - objectCurlySpacing BOOL: space inside {}
                                  #  - arrayBracketSpacing BOOL: space inside []
                                  #  - arrowParensAlways BOOL: (VAL) => {} not VAL => {}
                                  #  - flowObjectCommas BOOL: use , (true, def) or ; in Flow comments
                                  #Only pretty prints what was changed, i.e. RECAST.print(RECAST.parse('JS'))
                                  #guaranteed to === 'JS', including comments and whitespaces
RECAST.prettyPrint(NODE[, OPTS])  #Same as print() but pretty prints everything.
 ->OBJ                            #Cannot use source maps
