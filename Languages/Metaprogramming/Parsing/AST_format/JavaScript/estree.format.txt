
          
   ESTREE  
          



ALTERNATIVES ==>                  #  - ESTree (def): most supported
                                  #  - Shift: less supported

VERSION ==>                       #Last commit 26/01/2018
                                  #JavaScript AST standard

TYPESCRIPT/FLOW ==>               #See TSESTree

NOTATION ==>                     -#Pull requests
                                 ##Outside of ESTree
                                 B#@babel/parser
                                 A#acorn
                                 E#Espree
                                 T#Typescript-estree
                                 S#esprima
                                 M#meriyah
                                  #Lowercase means "not present"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BASIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTIONAL VALUES ==>               #Are either defined or null

any                               #NODE:
                                  #  - type STR
                                  #  - [loc] (position in source code):
                            beatsM#     - [source VAL]
                                  #     - start|end:
                                  #        - line NUM (1-indexed)
                                  #        - column NUM (0-indexed)
                                t##  - start|end NUM (not line-wise)
                                 ##  - range [NUM, NUM2] (not line-wise)
                                  #It is root type, abstract:
                                  #  - all other types inherit from it
                                  #  - all redefine type STR, except if abstract types themselves

EXPR                              #EXPR
                                M##  - raw STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONCRET SYNTAX TREE ==>          -#Like AST but includes information that is:
                                 -#  - non-significant: whitespaces, comments, some parenthesis, semicolons
                                 -#  - normalized: escape sequences, quote symbols, number formatting
                                 -#On NODE:
                                 -#  - [sourceElements TOKEN|NON_TOKEN|CHILD_REFERENCE_ARR]

CHILD_REFERENCE                  -#Information to relate CST node to AST node:
                                 -#  - reference 'TYPE[#next]'
TOKEN                            -#Child of CHILD_REFERENCE, for CST node also present in AST:
                                 -#  - element STR: parser-specific CST node type
                                 -#  - [value STR]: raw source
NON_TOKEN                        -#CST node not present in AST:
                                 -#  - element|value: like TOKEN


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STATEMENTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FILE                            B##Type 'File':
                                B##  - program PROGRAM
                                B##  - [name STR]
PROGRAM                           #Type 'Program':
                                  #  - sourceType 'script|module'
                                  #  - body STATEMENT|MODULE_DECLARATION_ARR
STATEMENT                         #

EXPR_STATEMENT                    #Statement with single EXPR.
                                  #Child of STATEMENT, type 'ExpressionStatement':
                                  #  - expression EXPR
(EXPR)                         AM##Child of EXPRESSION_STATEMENT, type 'ParenthesizedExpression'
                                B##On EXPR:
                                B##  - extra.parenthesized BOOL
                                B##  - extra.parenStart NUM

#!/bin/bash                     B##On PROGRAM:
                                B##  - interpreter INTERPRETER_DIRECTIVE
                                B##Type 'InterpreterDirective'
                                B##  - value STR
'use strict'                      #Child of EXPR_STATEMENT:
                                  #  - directive STR
                                  #  - expression LITERAL
                                B##On PROGRAM|BLOCK_STATEMENT:
                                B##  - directives DIRECTIVE_ARR
                                B##Type 'Directive':
                                B##  - value DIRECTIVE_LITERAL (type 'DirectiveLiteral'):
                                B##     - value STR
                                B##     - extra.raw[Value] STR

;                                 #Child of STATEMENT, type 'EmptyStatement'
                                  #Empty statement, with only semicolon
{...}                             #Child of STATEMENT, type 'BlockStatement':
                                  #  - body STATEMENT_ARR

// COMMENT                    abm##On PROGRAM:
/* COMMENT */                 abm##  - comments COMMENT_ARR
                              abm##COMMENT:
                              abm##  - type 'Line|Block'
                              abm##  - value STR
                                B##On FILE:
                                B##  - comments COMMENT_ARR
                                B##On NODE:
                                B##  - [leadingComment|trailingComments|innerComments COMMENT_ARR]
                                B##COMMENT:
                                B##  - type 'CommentLine|Block'
                                B##  - value STR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DECLARATIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DECLARATION                       #Child of STATEMENT. Parent of VARIABLE_DECLARATION, FUNCTION_DECLARATION, CLASS_DECLARATION,
                                  #TS_TYPE_ALIAS_DECLARATION, TS_ENUM_DECLARATION, TS_INTERFACE_DECLARATION,
                                  #TS_MODULE_DECLARATION

QUAL VAR = VAL, ...               #Child of DECLARATION, type 'VariableDeclaration':
                                  #  - declarations VARIABLE_DECLARATOR_ARR (type 'VariableDeclarator'):
                                  #     - id PATTERN
                                  #     - [init EXPR]
                                  #  - kind 'var|let|const'

lvalues                           #PATTERN. Parent of IDENTIFIER, MEMBER_EXPR, OBJ_PATTERN, ARR_PATTERN, REST_ELEMENT,
                                  #ASSIGNMENT_PATTERN, TS_PARAMETER_PROPERTY

VAR                               #Child of EXPR+PATTERN, type 'Identifier':
                                  #  - name STR

OBJ.VAR                           #Child of EXPR+PATTERN, type 'MemberExpression':
OBJ[VAL]                          #  - object EXPR|SUPER (OBJ)
                                  #  - property EXPR (VAL) or IDENTIFIER (VAR)
                                 -#    or PRIVATE_NAME (#VAR)
                                  #  - computed true (VAL) or false (VAR)
                                 -#  - optional BOOL (OBJ?.VAR or OBJ?.[VAL])

{VAR, ...}                        #Child of PATTERN, type 'ObjectPattern' (deconstruction):
{...OBJ, ...}                     #  - properties ARR of either:
                                  #      ASSIGNMENT_PROPERTY (VAR), child of PROPERTY with differences:
                                  #        - value PATTERN
                                  #        - kind always 'init'
                                  #        - method always false
                                  #      REST_ELEMENT (...OBJ)

[VAR,...]                         #Child of PATTERN, type 'ArrayPattern' (deconstruction):
                                  #  - elements PATTERN_ARR (null for parse array element)

...VAR                            #Child of PATTERN, type 'RestElement' (when setting):
                                  #  - argument PATTERN
...VAR                            #Type 'SpreadElement' (when getting):
                                  #  - argument EXPR

VAR = VAL                         #Child of PATTERN, type 'AssignmentPattern' (default values)
                                  #  - left PATTERN
                                  #  - right EXPR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNC                              #FUNCTION:
                                  #  - [id IDENTIFIER] (null if anonymous)
                                  #  - params PATTERN_ARR
                                  #  - body FUNCTION_BODY (child of BLOCK_STATEMENT):
                                  #     - body STATEMENT|DIRECTIVE_ARR
                                  #  - generator BOOL
                                  #  - async BOOL
                                 AE#  - expression BOOL

[async] function [*]FUNC(...){}   #Child of FUNCTION+DECLARATION, type 'FunctionDeclaration'
[async] function [*][FUNC](...){} #Child of FUNCTION+EXPR, type 'FunctionExpression'
[async] () => {...}               #Child of FUNCTION+EXPR, type 'ArrowFunctionExpression':
                                  #  - body FUNCTION_BODY or (if () => VAL) EXPR
                                  #  - expression BOOL (if () => VAL)

return [VAL]                      #Child of STATEMENT, type 'ReturnStatement':
                                  #  - [argument EXPR]

yield [*] [VAL]                   #Child of EXPR, type 'YieldExpression':
                                  #  - [argument EXPR]
                                  #  - delegate BOOL (if *)

await VAL                         #Child of EXPRT, type 'AwaitExpression':
                                  #  - argument EXPR

FUNC(...)                         #Child of EXPR, type 'CallExpression':
                                  #  - callee EXPR|SUPER|IMPORT (FUNC)
                                  #  - arguments EXPR|SPREAD_ELEMENT_ARR
                                 -#  - optional BOOL (FUNC?.(...))
new FUNC(...)                     #Child of EXPR, type 'NewExpression':
                                  #  - callee EXPR (FUNC)
                                  #  - arguments EXPR|SPREAD_ELEMENT_ARR

@DECORATOR                        #Type 'Decorator':
                                  #  - expression EXPR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STRUCTURES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


if (...) {...} [else {...}]       #Child of STATEMENT, type 'IfStatement':
                                  #  - test EXPR
                                  #  - consequent STATEMENT
                                  #  - [alternate STATEMENT]

switch (...) {...}                #Child of STATEMENT, type 'SwitchStatement':
                                  #  - discriminant EXPR
                                  #  - cases SWITCH_CASE_ARR (type 'SwitchCase'):
                                  #     - [test EXPR] (case's VAL) (null if default case)
                                  #     - consequent STATEMENT_ARR (if two following cases, the first one has no consequent)

while (...) {...}                 #Child of STATEMENT, type 'WhileStatement':
                                  #  - test EXPR
                                  #  - body STATEMENT

do {...} while (...)              #Child of STATEMENT, type 'DoWhileStatement':
                                  #  - test EXPR
                                  #  - body STATEMENT

for (...;...;...) {...}           #Child of STATEMENT, type 'ForStatement':
                                  #  - [init VARIABLE_DECLARATION|EXPR]
                                  #  - [test EXPR]
                                  #  - [update EXPR]
                                  #  - body STATEMENT

for (VAR in VAL) {...}            #Child of STATEMENT, type 'ForInStatement':
                                  #  - left VARIABLE_DECLARATION|PATTERN
                                  #  - right EXPR
                                  #  - body STATEMENT

for [await] (VAR of VAL) {...}    #Child of STATEMENT, type 'ForOfStatement':
                                  #  - left VARIABLE_DECLARATION|PATTERN
                                  #  - right EXPR
                                  #  - body STATEMENT
                                  #  - await BOOL

break [LABEL]                     #Child of STATEMENT, type 'BreakStatement':
                                  #  - [label IDENTIFIER]
continue [LABEL]                  #Child of STATEMENT, type 'ContinueStatement':
                                  #  - [label IDENTIFIER]

with (...) {...}                  #Child of STATEMENT, type 'WithStatement':
                                  #  - object EXPR
                                  #  - body STATEMENT

LABEL: ...                        #Child of STATEMENT, type 'LabeledStatement':
                                  #  - label IDENTIFIER
                                  #  - body STATEMENT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXCEPTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


try { ... }                       #Child of STATEMENT, type 'TryStatement':
[catch (...) {...}]               #  - block BLOCK_STATEMENT
[finally {...}]                   #  - [handler CATCH_CLAUSE] (type 'CatchClause'):
                                  #     - param [PATTERN]
                                  #     - body BLOCK_STATEMENT
                                  #  - [finalizer BLOCK_STATEMENT]
throw VAL                         #Child of STATEMENT, type 'ThrowStatement':
                                  #  - argument EXPR

debugger                          #Child of STATEMENT, type 'DebuggerStatement'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         NATIVE TYPES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STR|BOOL|NUM|BIGINT|null|REGEXP   #Child of EXPR, type 'Literal':
                                  #  - value STR|BOOL|NUM|null|REGEXP
                                 -#    or BIGINT
                                  #  (REGEXP only)
                                  #  - regex:
                                  #     - pattern STR
                                  #     - flags STR
                                 -#  (BIGINT only)
                                 -#  - bigint STR (without 'n')
undefined                         #Considered a VAR

TAG`...`                          #Child of EXPR, type 'TaggedTemplateExpression':
                                  #  - tag EXPR
                                  #  - quasi TEMPLATE_LITERAL
`...`                             #Child of EXPR, type 'TemplateLiteral':
                                  #  - quasis TEMPLATE_ELEMENT_ARR (non-${} parts), type 'TemplateElement':
                                  #     - tail BOOL (if last one, including empty "" if ends with ${})
                                  #     - value:
                                  #        - [cooked STR] (null if contain escape sequences)
                                  #        - raw STR
                                  #  - expressions EXPR_ARR (${} parts)

{VAR[: VAL], ...}                 #Child of EXPR, type 'ObjectExpression':
{[VAL]: VAL}                      #  - properties ARR of either:
{...OBJ}                          #      PROPERTY (type 'Property')
{                                 #        - key EXPR (LITERAL if {[VAR]: VAL} or {NUM: VAL})
  [@DECORATOR]                    #        - value EXPR
  FUNC(...){...}                  #        - kind 'init|get|set' (get|set are for getters|setters)
}                                 #        - method BOOL (if FUNC)
                                  #        - shorthand BOOL (if { VAR })
                                  #        - computed BOOL
                                  #        - decorators DECORATOR_ARR
                                  #      SPREAD_ELEMENT (...OBJ)

[VAL...]                          #Child of EXPR, type 'ArrayExpression':
                                  #  - elements EXPR2|SPREAD_ELEMENT_ARR (null for sparse ARR elements)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           OPERATORS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-VAL
+VAL
!VAL
~VAL                              #Child of EXPR, type 'UnaryExpression':
typeof VAL                        #  - operator '-|+|!|~|typeof|void|delete'
void VAL                          #  - prefix BOOL (whether before VAL, i.e. always true)
delete VAL                        #  - argument EXPR

++VAR                             #Child of EXPR, type 'UpdateExpression':
VAR++                             #  - operator '--|++'
--VAR                             #  - prefix BOOL
VAR--                             #  - argument EXPR
                                 -#    or PATTERN

VAL == != === !== < <= > >= <<    #Child of EXPR, type 'BinaryExpression':
>> >>> + - * / % ** | ^ & in      #  - operator '==|!=|===|!==|<|<=|>|>=|<<|>>|>>>|+|-|*|/|%|**|||^|&|in|instanceof'
instanceof VAL2                   #  - left EXPR
                                  #  - right EXPR

VAR = += -= *= /= **= %= <<= >>=  #Child of EXPR, type 'AssignmentExpression':
>>>= |= ^= &= VAL                 #  - operator '=|+=|-=|*=|/=|**=|%=|<<=|>>=|>>>=||=|^=|&='
                                  #  - left PATTERN or (only on older JavaScript engines) EXPR
                                  #  - right EXPR

VAL || && VAL2                    #Child of EXPR, type 'LogicalExpression':
                                  #  - operator '|||&&'
                                  #  - left EXPR
                                  #  - right EXPR

VAL ? VAL2 : VAL3                 #Child of EXPR, type 'ConditionalExpression':
                                  #  - test EXPR
                                  #  - alternate EXPR
                                  #  - consequent EXPR

VAL,...                           #Child of EXPR, type 'SequenceExpression':
                                  #  - expressions EXPR_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CLASS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[@DECORATOR]                      #Type 'Class':
class [CLASS] [extends PARENT] {  #  - [id IDENTIFIER]
  [@DECORATOR]                    #  - [superClass EXPR]
  [static] FUNC(...) {...}        #  - body CLASS_BODY, type 'ClassBody':
}                                 #     - body METHOD_DEFINITION|FIELD_DEFINITION_ARR
                                  #  - decorators DECORATOR_ARR
                                  #Type 'MethodDefinition':
                                  #  - key EXPR|PRIVATE_NAME
                                  #  - value FUNCTION_EXPR
                                  #  - kind 'constructor|method|get|set'
                                  #  - static BOOL
                                  #  - computed BOOL
                                  #  - decorators DECORATOR_ARR
  [static] VAR [= VAL]           -#Type 'FieldDefinition':
                                 -#  - key EXPR|PRIVATE_NAME
                                 -#  - [value EXPR]
                                 -#  - static BOOL
                                 -#  - computed BOOL
  #VAR|#FUNC()                   -#Type 'PrivateName':
                                 -#  - name STR
class CLASS ... {}                #Child of CLASS+DECLARATION, type 'ClassDeclaration'
class [CLASS] ... {}              #Child of CLASS+EXPR, type 'ClassExpression'

new.target                        #Child of EXPR, type 'MetaProperty':
import.meta                       #  - meta IDENTIFIER
                                  #  - property IDENTIFIER

this                              #Child of EXPR, type 'ThisExpression'

super                             #Type 'Super'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import|export ...                 #MODULE_DECLARATION
{VAR [as VAR2]}                   #Inside import|export. MODULE_SPECIFIER:
                                  #  - local IDENTIFIER (VAR2)

export QUAL VAR = VAL             #Child of MODULE_DECLARATION, type 'ExportNamedDeclaration':
export function VAR() {}          #  (if export QUAL VAR or export FUNC)
export { VAR [as VAR2|default] }  #  - [declaration DECLARATION]
export {}                         #  (empty ARR unless export {...})
export ... from "MDL"             #  - specifiers EXPORT_SPECIFIER_ARR, child of MODULE_SPECIFIER, type 'ExportSpecifier':
                                  #     - local IDENTIFIER (VAR)
                                  #     - exported IDENTIFIER (VAR2|default)
                                  #  (if export ... from "MDL")
                                  #  - [source LITERAL] ("MDL")

export default VAL                #Child of MODULE_DECLARATION, type 'ExportDefaultDeclaration':
                                  #  - declaration (VAL) one of:
                                  #     - EXPR
                                  #     - [ANONYMOUS_]FUNCTION|CLASS_DECLARATION
                                  #        - "ANONYMOUS": same type, but id null
export * from "MDL"               #Child of MODULE_DECLARATION, type 'ExportAllDeclaration':
                                  #  - source LITERAL ("MDL")

import ... from "MDL"             #Child of MODULE_DECLARATION, type 'ImportDeclaration':
                                  #  - source LITERAL ("MDL")
                                  #  - specifiers MODULE_SPECIFIER_ARR among:
import { VAR [as VAR2|default] }  #      IMPORT_SPECIFIER, type 'ImportSpecifier':
                                  #        - imported IDENTIFIER (VAR)
                                  #        - local IDENTIFIER (VAR2, same as VAR by def)
import VAR                        #      IMPORT_DEFAULT_SPECIFIER, type 'ImportDefaultSpecifier':
                                  #        - local IDENTIFIER (VAR)
import * as VAR                   #      IMPORT_NAMESPACE_SPECIFIER, type 'ImportNamespaceSpecifier':
                                  #        - local IDENTIFIER (VAR)
import "MDL"                      #
import {}                         #Those have empty ARR as specifiers

import("MDL")                    -#Child of EXPR, type 'ImportExpression':
                                 -#  - source EXPR
