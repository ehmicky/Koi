
         
   ACORN  
         



ALTERNATIVES ==>                  #  - esprima:
                                  #     - from jQuery, historic main parser.
                                  #     - uses ESTree
                                  #     - least support for ES6 syntax
                                  #     - not maintained
                                  #  - acorn (preferred):
                                  #     - uses ESTree
                                  #     - most utilities functions, good plugin system
                                  #  - @babel/parser:
                                  #     - fork of acorn, used by Babel
                                  #     - uses slightly different ESTree
                                  #     - supports Flow, TypeScript, ES proposals
                                  #     - least utilities functions
                                  #     - most active
                                  #  - espree:
                                  #     - based on acorn (but produces Esprima format), used by ESLint
                                  #     - uses ESTree
                                  #     - most convenient
                                  #     - uses non-standard additions, where acorn has now implemented those features.
                                  #  - typescript-estree:
                                  #     - uses TSESTree, used by typescript-eslint (former tslint)
                                  #     - supports TypeScript
                                  #  - meriyah
                                  #     - based on cherow
                                  #  - buntis:
                                  #     - based on cherow
                                  #     - TypeScript focused
                                  #     - project too young at the moment
                                  #  - cherow: not maintained
                                  #  - esprit: not maintained

VERSION ==>                       #6.2.0
                                  #Browser, Node.js or CLI
                                  #JavaScript parser and tokenizer

AST FORMAT ==>                    #ESTree
                                  #Does not support yet: "Import" (import(...))
                                  #Only supported through plugins: decorators

SPEED ==>                         #Tokenizer: 4000 tokens per ms
                                  #Parser: 2600 nodes per ms
                                  #(Using jQuery source code)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACORN.parse('JS'[, OPTS])         #Parse JavaScript.
 ->PROGRAM_NODE                   #Errors raise SyntaxError, with ERROR:
                                  #  - pos NUM (offset)
                                  #  - loc.line|column NUM
                                  #OPTS:
                                  #  - ecmaVersion 3|5-10 or 2015-2019 (def: 2018)
                                  #  - sourceType 'script|module' (def: 'script')
                                  #  - allowReturnOutsideFunction BOOL (def: false): top-level return
                                  #  - allowAwaitOutsideFunction BOOL (def: false): top-level await
                                  #  - allowImportExportEverywhere BOOL (def: false): non-top-level import|export
                                  #  - allowReserved BOOL|'never' (def: false): allow VAR that is a reserved keywords (true|false) or a OBJ.VAR ('never')
                                  #  - allowHashBang BOOL (def: false)
                                  #  - preserveParens BOOL:
                                  #     - parse parenthesis instead of ignoring them
                                  #     - child of EXPR, type 'ParenthesizedExpression': expression EXPR2
                                  #  - onToken(TOKEN):
                                  #     - called by tokenizer
                                  #     - can also be an ARR to push arguments to it
                                  #  - onComment(BOOL, STR, START_OFFSET_NUM, END_OFFSET_NUM):
                                  #     - called on comments
                                  #     - BOOL is // vs /* */
                                  #     - can also be an ARR to push arguments to it
                                  #        - with a slighly different format mimicking Esprima, e.g. to use with Escodegen
                                  #  - onInsertedSemicolon(NUM, POSITION): called when found a line with missing semicolon
                                  #  - onTrailingComma(NUM, POSITION): called on trailing commas
                                  #  - program PROGRAM2_NODE: prepend PROGRAM2.body to PROGRAM.body
                                  #  - plugins.PLUGIN PLUGIN_OPTS:
                                  #     - true for no option
                                  #     - must be defined to use a PLUGIN
                                  #Positions:
                                  #  - line-wise (if OPTS.locations true, def false):
                                  #     - POSITION is OBJ.line|column
                                  #     - NODE|TOKEN.loc: start|end POSITION
                                  #     - NODE|TOKEN[.loc].sourceFile VAL: using OPTS.[direct]sourceFile VAL
                                  #     - ACORN.getLineInfo('JS', START_OFFSET)->POSITION
                                  #  - non-line-wise:
                                  #     - NODE|TOKEN.start|end START|END_OFFSET (always defined)
                                  #     - NODE|TOKEN.range [START_OFFSET, END_OFFSET] (if OPTS.ranges true, def: false)

ACORN.parseExpressionAt           #Same but for an expression, not a full file.
 ('JS', OFFSET_NUM[, OPTS])       #Ignores next expressions|statements
 ->EXPR_NODE                      #A bit faster


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TOKENIZER           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACORN.tokenizer('JS'[, OPTS])
 ->TOKENIZER                      #
TOKENIZER                         #TOKEN_ITERATOR. Stops at ACORN.tokTypes.eof
TOKENIZER.getToken()->TOKEN       #When reached ACORN.tokTypes.eof, keeps returning it.

TOKEN.value                       #STR
TOKEN.type                        #TOKEN_TYPE
ACORN.tokTypes.TYPE               #TOKEN_TYPE where TYPE can be:
                                  #  eof
                                  #  _null
                                  #  _true _false logicalOR logicalAND bitwiseOR question equality relational
                                  #  num plusMin modulo star slash starstar bitwiseXOR bitwiseAND bitShift
                                  #  string template backQuote dollarBraceL
                                  #  regexp
                                  #  name eq assign incDec _var _const _delete _export _import
                                  #  bracketL bracketR braceL braceR parenL parenR
                                  #  comma semi colon dot
                                  #  _if _else _do _while _break _continue _for _in ellipsis
                                  #  _switch _case _default
                                  #  _try _catch _finally _throw _debugger
                                  #  arrow _function _return _new
                                  #  _this _super _class _extends
                                  #  _instanceof _typeof _void
                                  #  _with
                                  #  prefix
                                  #"name" is VAR, and also some keywords including let, of, yield
TOKEN_TYPE.label                  #Name STR:
                                  #  eof
                                  #  null
                                  #  true false || && | ? ==/!= </>
                                  #  num +/- % * / ** ^ & <</>>
                                  #  string template ` ${
                                  #  regexp
                                  #  name = _= ++/-- var const delete export import
                                  #  [ ] { } ( )
                                  #  , ; : .
                                  #  if else do while break continue for in ...
                                  #  switch case default
                                  #  try catch finally throw debugger
                                  #  => function return new
                                  #  this super class extends
                                  #  instanceof typeof void
                                  #  with
                                  #  prefix


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            WALKER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WALK                              #Must require('acorn-walk')
                                  #Version 6.1.0
                                  #NODE types:
                                  #  - include abstract types: 'Expression', 'Statement', 'Pattern', 'Function'
                                  #  - add: 'ForInit' (first part of "for in|of")
                                  #  - do not include: 'ExportSpecifier', 'ClassBody', 'SwitchCase'
                                  #There is possibility to customize the walker:
                                  #  - i.e. whether children nodes should be walked through or not, or direction of walking
                                  #  - I don't see much reason except performance, so I do not documented here
                                  #  - for information it's done with:
                                  #     - WALK.simple|ancestors() third argument
                                  #     - WALK.make|recursive()
                                  #     - WALK.findNode*() second-to-last argument
                                  #There is also possibility to keep state during walking:
                                  #  - but can also just use a close for that, so not documented here
                                  #  - for information it's done with:
                                  #     - WALK.simple|ancestors() fourth argument
                                  #     - WALK.findNode*() last argument

WALK.simple(NODE, OBJ)            #Walk through AST tree and call OBJ.TYPE(CHILD_NODE) for each CHILD_NODE whose type is TYPE
                                  #Start with leaves, end with root
WALK.ancestors(NODE, OBJ)         #Same but instead call OBJ.TYPE(CHILD_NODE, ANCESTOR_NODE_ARR)
                                  #ANCESTOR_NODE_ARR starts with ancestor and ends with CHILD_NODE
WALK.full[Ancestors](NODE, FUNC)  #Same as two previous ezcept always FUNC(CHILD_NODE, ...)

WALK.findNodeAt                   #Returns OBJ, with OBJ.node, first NODE where:
(NODE[, START_OFFSET[, END_OFFSET #  - NODE.start === START_OFFSET (unless null|undefined)
[,'TYP'|FUNC('TYP',NODE)->BOOL]]])#  - NODE.end === END_OFFSET (unless null|undefined)
->OBJ                             #  - 'TYPE'|FUNC()->true (can set OFFSET null and only set that test)
                                  #Returns undefined if none found
WALK.findNodeAround(NODE, OFFSET,
'TYP'|FUNC('TYP',NODE)->BOOL)->OBJ#Same with NODE.start <= OFFSET <= NODE.end (OFFSET cannot be null|undefined)
WALK.findNodeAfter(NODE, OFFSET,
'TYP'|FUNC('TYP',NODE)->BOOL)->OBJ#Same with NODE.start >= OFFSET (OFFSET cannot be null|undefined)
WALK.findNodeBefore(NODE, OFFSET,
'TYP'|FUNC('TYP',NODE)->BOOL)->OBJ#Same with OFFSET <= NODE.end (OFFSET cannot be null|undefined)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


acorn [FILE]                      #CLI. Calls ACORN.parse() -> console.log()
                                  #Def FILE: stdin
                                  #Exit code 1 if error
--tokenize                        #Same with ACORN.tokenize()
--silent                          #Do not console.log(), only use exit code
--compact                         #Do not indent JSON output
--ecma3|5|6|7|8
--module
--allow-hash-bang
--locations                       #ACORN.parse|tokenize() OPTS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGINS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACORN-ES7(ACORN)                 ##Patches ACORN so it can process decorators, according to ESTree
                                 ##PLUGIN name: 'es7'
                                 ##New token types: at
                                 ##Version 1.0.0

ACORN-JSX/inject(ACORN)          ##Patches ACORN so it can process JSX (see JSX doc for AST format)
                                 ##PLUGIN name: 'jsx'
                                 ##New token types: jsxName, jsxText, jsxTagStart, jsxTagEnd
                                 ##Does not support: JSXSpreadChild
                                 ##Version 5.0.1
