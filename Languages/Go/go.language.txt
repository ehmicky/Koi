
      
   GO  
      



TODO:
  - go through to_learn.txt

VERSION ==>                       #1.14.4


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BUILD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go build FILE.go                  #Compile FILE.go to executable FILE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMMENTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


// COMMENT
/* COMMENT */                     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VALUES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


(VAL)                             #Parenthesis can be used to override operator precedence


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BOOL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/

bool                              #TYPE
                                  #Zero value is false

true|false                        #BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NUMBER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ZERO-VALUE ==>                    #0

[u]int8|16|32|64                  #TYPE with 8|16|32|64 bits
[u]int                            #TYPE with 32|64 bits depending on OS
byte                              #Alias for uint8, meant for binary data
rune                              #Alias for int32, meant for Unicode codepoints

[-]N...                           #[U]INT

float32|64                        #TYPE with 32|64 bits

[-]INT[.N...]                     #FLOAT

complex64|128                     #TYPE for complex numbers, with 64|128 bits

FLOAT [+|- FLOAT2i]               #COMPLEX

uintptr                           #TYPE. Size is same as uint


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


string                            #TYPE
                                  #Zero-value is ""

"..."                             #STR
                                  #Can contain \n


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MULTIPLE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VAL,...                           #Multiple values (MVAL)
                                  #Similar to array, except must be stored in one variable each


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSIGNMENT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


var VAR,... TYPE
var (
  VAR TYPE
  ...                             #Declare + assign zero-value
)                                 #Block-scoped (including if block, etc.). Can be used by child scopes but not parent

VAR = VAL
VAR,... = MVAL                    #Assign

var|const VAR [TYPE] = VAL        #Declare + assign
var|const VAR,... [TYPE] = MVAL   #If const, cannot assign anymore
var|const (                       #Infers TYPE from value:
  VAR [TYPE] = VAL                #  - for NUM:
  ...                             #     - complex128 if imaginary part
)                                 #     - float64 if decimal part
                                  #     - int otherwise
                                  #  - happens at reference-time, not declaration-time
                                  #     - i.e. when passed as FUNC parameter, use its argument TYPE
VAR := VAL                        #Shortcut syntax for var VAR = VAL
VAR,... := MVAL                   #Cannot be top-level scope


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TRANSTYPE           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TYPE(VAL)                         #Explicit transtype.
                                  #Transtype cannot be implicit.
                                  #The only ones allowed are the following.

UINT32 -> STR                     #Using Unicode codepoint
NUM -> other NUM                  #Only if can perfectly convert, i.e. not if:
                                  #  - negative NUM -> UINT
                                  #  - too high NUM -> smaller NUM
                                  #  - FLOAT with decimal -> [U]INT
                                  #  - COMPLEX with imaginary part -> [U]INT|FLOAT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


func FUNC([VAR] [TYPE],...)       #Declare a function
 [TYPE2|([VAR2] [TYPE2],...)]     #TYPE|TYPE2 defaults to the next one
 { ... }                          #TYPE2 is return type
                                  #  - TYPE,... is when returning MVAL
                                  #  - If named (VAR2):
                                  #     - declare the variable on top of function
                                  #     - return with no MVAL defaults to returning those

return [MVAL]                     #Required when there is a return TYPE2. Optional otherwise.
                                  #If any return value is named (VAR2), MVAL defaults to them ("naked return"):
                                  #  - if mixed with unnamed, those use their 0-value

FUNC([MVAL])                      #Call a function

defer FUNC([MVAL])                #Call a function, right after it returns.
                                  #MVAL is evaluated right away though.
                                  #Last defer is executed first.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STRUCTURES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


if [EXPR;] BOOL_EXPR { ... }
 [else if [EXPR;] BOOL_EXPR {...}]
 ...
 [else { ... }]                   #If EXPR, executed before BOOL_EXPR, but scoped within { ... }

switch [EXPR;] [EXPR2] {
  [case EXPR3:
    ...
  ]                               #Execute first case where EXPR2 == EXPR3
  [default:                       #EXPR2 defaults to true
    ...                           #Cases are indentation-based
  ]                               #No break needed, each case does not follow through next one
}                                 #If EXPR, executed before BOOL_EXPR, but scoped within { ... }

for [EXPR]; [BOOL_EXPR]; [EXPR2]  #For loop
 { ... }                          #BOOL_EXPR defaults to true

for [BOOL_EXPR] { ... }           #Same as for ; [BOOL_EXPR]; { ... }
                                  #I.e. while loop


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


package MODULE                    #Entry point.
                                  #Any top-level variable whose variable name starts with uppercase is exported
package main                      #CLI entry point (as opposed to programmatic)
                                  #Must have a main func

import "[NAMESPACE/]MODULE"       #Import MODULE as a top-level variable named MODULE
import (
  "..."
  ...
)                                 #Same as several import "..."
