
          
   GO_CLI  
          



VERSION ==>                       #See Go language


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR GOFLAGS                    #"-FLAG=VAL ..." applied to every go ..., providing the command has that flag

go version                        #Prints "go version goX.Y.Z GOOS/GOARCH"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ENV              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR GOENV                      #All Go-related ENVVARs (GO*|CGO*|GCC-related) can be also set in that file
                                  #using go env -w|-u
                                  #Def: ~/.config/go/env

go env                            #Prints all GO*|CGO*|GCC-related ENVVARs
                                  #After default value resolution
go env "ENVVAR",...               #Print value
go env -w ENVVAR=VAL,...          #Sets value
go env -u ENVVAR                  #Unsets value

-json                             #JSON output


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          IMPORT PATH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import "IMPORT_PATH"              #"IMPORT_PATH" locates the PACKAGE on the filesystem.
                                  #Targets a DIR with *.go
                                  #By convention, DIR name should be same as PACKAGE
                                  #Relative to:
                                  #  - GOROOT/src: for standard library
                                  #  (if module-aware, and URI)
                                  #  - GOPATH/pkg/mod
                                  #  (if non-module-aware)
                                  #  - GOPATH/src
                                  #  (if non-module-aware, and start with . or ..)
                                  #  - $PWD
ENVVAR GOROOT                     #Global go directory.
                                  #Contains:
                                  #  - binaries (go|gofmt)
                                  #     - go tool CMD ... forwards to binaries in ENVVAR GOTOOLDIR (readonly),
                                  #       e.g. GOROOT/pkg/tool/GOOS_GOARCH
                                  #  - standard library
                                  #  - documentation
                                  #Directory structure is non-module-aware one.
                                  #Default: /usr/local/go
                                  #Same directory structure as GOPATH
ENVVAR GOROOT_FINAL               #Allows separating Global go directory sources from built files
ENVVAR GOPATH                     #Same syntax as PATH (:-separated on Unix, ;-separated on Windows)
                                  #  - on write, only first element is used
                                  #  - usually, having several elements is not needed
                                  #Must be absolute
                                  #Default: ~/go/
                                  #Directory structure:
                                  #  - bin/BINARY: binaries, i.e. built main PACKAGEs
                                  #  (module-aware)
                                  #  - pkg/mod/IMPORT_PATH@vMODULE_VERSION/*.go: source code
                                  #  (non-module-aware, or standard library)
                                  #  - src/IMPORT_PATH/*.go: source code
                                  #  (non-module-aware)
                                  #  - pkg/GOOS_GOARCH/IMPORT_PATH/*.a: built non-main PACKAGEs
ENVVAR GOBIN                      #Userland binaries directory
                                  #Should add both GOBIN and GOROOT/bin to $PATH
                                  #Must be absolute
                                  #Def: GOPATH/bin
BINARY INSTALLATION ==>           #During go install:
                                  #  - if main PACKAGE
                                  #  - moved to GOBIN/BINARY
                                  #     - BINARY is main PACKAGE's DIR name
                                  #By convention, main package DIR should be:
                                  #  - (preferred) REPO_ROOT/cmd/BINARY/
                                  #  - REPO_ROOT

IMPORT_PATHS                      #Is space-separated list of:
                                  #  - "IMPORT_PATH[@MODULE_VERSION]"
                                  #  - "IMPORT_PATH@none": remove dependency
                                  #  - "all": all downloaded PACKAGEs
                                  #  - "std": all standard library PACKAGEs
                                  #  - "cmd": all go CLI PACKAGEs
                                  #  - DIR: packages in DIR *.go or go.mod
                                  #  - FILE.go: if several, must all be in same DIR
                                  #  - def: "."
                                  #Can contain "..." anywhere:
                                  #  - is like a globbing *
                                  #  - can expand to 0|1|n PACKAGEs
                                  #  - can match empty string


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MODULE PATH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODULE_PATH                       #Beginning of IMPORT_PATH.
                                  #Where MODULE is located, i.e. how go get should download it.
                                  #Can be:
                                  #  - "": standard libary
                                  #  (for github.com, bitbucket.org, launchpad.net)
                                  #  - "DOMAIN/USER/PROJECT" for github.com, bitbucket.org, launchpad.net
                                  #  (for others)
                                  #  - "DOMAIN/USER/PROJECT.git"
                                  #  - look for <meta name="go-import" content="MODULE_PATH git SRC_ROOT_DIR">
REPO_PATH                         #End of IMPORT_PATH.
                                  #PACKAGE path within MODULE.
                                  #If single PACKAGE: often "", i.e. top-level inside repository.

MODULE_PATHS                      #,-separated list of MODULE_PATH
                                  #Can include globbing
MODULE_PATH_LIST                  #,-separated list of MODULE_PATH[@vMODULE_VERSION]
                                  #Def to current DIR's MODULE

internal/...                      #Any PACKAGE within an "internal" DIR can only be imported by:
                                  #  - same MODULE
                                  #  - and only internal/../**.go, not internal internal/../../**.go
vendor/...                        #Same except:
                                  #  - only "..." must be specified, "MODULE_PATH[/...]/vendor/" can|must be omitted
                                  #  - meant for bundling dependencies
                                  #To avoid
vendor/requirements.txt           #Similar to go.mod but for vendor/...
go mod vendor                     #Creates|updates vendor/..., including requirements.txt
-v                                #Verbose
go ... -mod=mod                   #Ignore vendor/...
go ... -mod=vendor                #Use vendor/...
                                  #Not needed with Go >=1.14

REPOSITORY STRUCTURE ==>          #Due to how go CLI works, from repository root:
                                  #  - [REPO_PATH/]*.go: non-main PACKAGE
                                  #  - [cmd/BINARY/]*.go: main PACKAGE
                                  #  - go.mod|sum

GIT ==>                           #This doc assumes git, but other VCS (svn|mercurial|Bazaar|Fossil) are supported

go build -insecure                #Allow MODULE_PATH to use http: (as opposed to https:)
ENVVAR GOINSECURE                 #Like -insecure, but as MODULE_PATHS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[v]MODULE_VERSION                 #MODULE version.
                                  #If specified as argument:
                                  #  - MODULE_QUERY
                                  #  - git tag|LBRANCH|COMMIT
                                  #Otherwise, by priority order:
                                  #  (if module-aware)
                                  #  - latest git tag: vA.B.C[-D][+E]
                                  #  - latest commit: v0.0.0-YYYYMMDDHHMMSS-XXXXXXXXXXXX
                                  #     - last part is git commit hash
                                  #  (if non-module-aware)
                                  #  - "go1" git branch
                                  #  - default git branch
                                  #No prerelease is always preferred over prereleases
                                  #If v, prefixed with v
                                  #"+incompatible":
                                  #  - suffix when no MODULE has no go.mod and version is >=2
                                  #  - is just an indicator that MODULE upgrades might need additional review
MODULE_QUERY                      #Query against git tag vA.B.C[-D][+E]:
                                  #  - "[<|<=|>=|>]vA[.B][.C][-D][+E]"
                                  #  - "latest": vA.*.*
                                  #  - "upgrade": vA.*.*, never downgrades
                                  #  - "patch": vA.B.*, never downgrades

VERSIONING ==>                    #go get:
                                  #  - if in go.mod or as argument, use it as is (including minor|patch)
                                  #     - if -u[=minor|patch], use latest minor (def) or patch instead
                                  #     - if competing with other dependencies requiring same dependency,
                                  #       use the latest one, even if different major
                                  #  - otherwise, use latest major
                                  #Breaking change requires not only new major, but also new IMPORT_PATH
                                  #  - reason:
                                  #     - only for non-module-aware importers
                                  #     - if only module-aware importers, not a problem
                                  #  - by convention: append "/vMAJOR" to MODULE_PATH
                                  #     - i.e. add a "/vMAJOR" source directory, and keep previous version
                                  #Encourages avoiding any breaking changes
                                  #  - except for v0.*.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GO.MOD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODULE ==>                        #Group of PACKAGEs

ENVVAR GO111MODULE                #Decides whether in module-aware mode: "on|off"
                                  #If "auto" (def), on if [.../]go.mod exists

go.mod                            #File containing line-wise directives (below)
                                  #Location determines the MODULE's root directory:
                                  #  - any subdirectory's PACKAGE is included
                                  #  - subdirectory with another go.mod are excluded
                                  #Normalized and beautified by any go command that uses it.
                                  #Automatically updated by go get
                                  #  - including adding "require ..."
                                  #Can be manually edited, then go get will work accordingly.
go ... -mod=readonly              #Do not update go.mod. If update needed, fails.
                                  #Not with go get ...

//COMMENT                         #

module MODULE_PATH                #Enforces MODULE_PATH is referred to like this.
                                  #This is in case code is hosted in several places:
                                  #  - since MODULE_PATH is used as identifier, having possible duplicates is not good
                                  #This does not declare the MODULE_PATH, since that is defined based by where code is hosted.
package PACKAGE // import         #"import comment"
 "IMPORT_PATH"                    #Same but inside source files, using code comment, for non-module-aware

go VERSION                        #Declares Go version. Used to know which Go features are available at build-time (not runtime)

require MODULE_PATH vMODULE_VRSION
 [// indirect]                    #Declares dependency
require (                         #//indirect: dependency's dependency
  ...                             #  - e.g. when want to control its version
)                                 #Used in deep dependencies
exclude MODULE_PATH vMODULE_VRSION
exclude (
  ...                             #Forbid a specific vMODULE_VERSION
)                                 #Not used in deep dependencies
replace MODULE_PATH vMODULE_VRSION
 => vMODULE_VERSION2
replace (
  ...                             #Instead of using vMODULE_VERSION, use vMODULE_VERSION2
)                                 #Not used in deep dependencies

go mod init ["MODULE_PATH"]       #Creates ./go.mod
                                  #If another Go dependency manager used, migrate it
                                  #Tries to guess MODULE_PATH, e.g. from git info

go mod tidy                       #Removes unused dependencies from go.mod|sum
                                  #Not done automatically
-v                                #Verbose

go mod edit [GO_MOD_PATH]         #Modifies go.mod
                                  #Does not resolve MODULE|PACKAGEs after modification
-module=GO_MOD_PATH               #
-print                            #Print go.mod after modification
-json                             #JSON output
-fmt                              #Normalize|beautify.
                                  #Implied by all other flags
-go=VERSION                       #Add "go ..."
-require=MODULE_PATH@vMODULE_VERSN#Add "require ..."
                                  #Prefer go get IMPORT_PATH
-droprequire=MODULE_PATH@...      #Remove "require ..."
                                  #Prefer go get IMPORT_PATH@none
-[drop]exclude=...                #Same with "exclude ..."
-[drop]replace=...=...            #Same with "replace ..."

go mod graph                      #Prints all deep dependencies
                                  #Each line is "MODULE_PATH REQUIRED_MODULE_PATH2"

go mod why IMPORT_PATHS           #Prints parent dependencies or deep dependencies
-m                                #Arguments are MODULE_PATH instead
-vendor                           #Exclude tests

ENVVAR GOMOD                      #Absolute "PATH" to current go.mod.
                                  #"" if non-module-aware
                                  #"/dev/null" if none but module-aware
                                  #Read-only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LIST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go list IMPORT_PATHS              #Prints all PACKAGEs, one per line

-json                             #Prints as JSON OBJ:
                                  #  (required)
                                  #  Dir 'PATH': absolute path to package's DIR
                                  #  Root 'PATH': module's root DIR
                                  #  ImportPath 'IMPORT_PATH'
                                  #  Name 'PACKAGE'
                                  #  Target 'GOBIN/BINARY' or (standard library) GOROOT/pkg/GOOS_GOARCH/**/*.a
                                  #  Match STR_ARR: CLI arguments in IMPORT_PATHS that matched it
                                  #
                                  #  (optional)
                                  #  ImportComment 'IMPORT_PATH': from import comment
                                  #  Doc STR: documentation comment
                                  #  Shlib 'PATH': shared library when using -linkshared
                                  #  Goroot BOOL: is in GOROOT
                                  #  Standard BOOL: is in standard library
                                  #  Stale BOOL: go install would do something
                                  #  StaleReason STR: what go install would do
                                  #  ConflictDir 'PATH': shadows another PACKAGE in GOPATH
                                  #  BinaryOnly BOOL: binary-only PACKAGE (deprecated)
                                  #  ForTest STR: only for use in test
                                  #  DepOnly BOOL
                                  #  Cgo*: CGO settings
                                  #
                                  #  Imports 'IMPORT_PATH'_ARR: all import statements, after resolution (e.g. due to vendor/...)
                                  #  [X]TestImports 'IMPORT_PATH'_ARR: all import statements, after resolution in *_test.go inside|outside PACKAGE
                                  #  ImportMap MAP[STR]STR: key|value is import statement before|after resolution
                                  #  Deps 'IMPORT_PATH'_ARR: all dependencies, recursively
                                  #  Export 'PATH': binary file in GOCACHE containing information about PACKAGE's exports. Requires -export flag
                                  #
                                  #  Module *MODULE: package's module
                                  #  Module.Path 'MODULE_PATH'
                                  #  Module.Dir 'PATH'
                                  #  Module.Main BOOL
                                  #  Module.GoMod 'PATH': of go.mod
                                  #  Module.GoVersion 'VERSION': in go.mod
                                  #
                                  #  GoFiles 'PATH'_ARR: *.go, except ones below
                                  #  [X]TestGoFiles 'PATH'_ARR: *_test.go inside|outside PACKAGE
                                  #  CgoFiles 'PATH'_ARR: *.go importing "C"
                                  #  CompiledGoFiles 'PATH'_ARR: *.go sent to compiled. Requires -compiled flag
                                  #  IgnoredGoFiles 'PATH'_ARR: ignored *.go
                                  #  CFiles 'PATH'_ARR: *.c
                                  #  CXXFiles 'PATH'_ARR: *.cc|cxx|cpp
                                  #  MFiles 'PATH'_ARR: *.m
                                  #  HFiles 'PATH'_ARR: *.h|hh|hpp|hxx
                                  #  FFiles 'PATH'_ARR: *.f|F|.for|f90
                                  #  SFiles 'PATH'_ARR: *.s
                                  #  SwigFiles 'PATH'_ARR: *.swig
                                  #  SwigCXXFiles 'PATH'_ARR: *.swigcxx
                                  #  SysoFiles 'PATH'_ARR: *.syso
                                  #
                                  #  Incomplete BOOL: error while loading information
                                  #  Error *PACKAGE_ERROR: error in package
                                  #  Error.Err 'MESSAGE'
                                  #  Error.ImportStack 'IMPORT_PATH'_ARR: stack trace
                                  #  Error.Pos 'FILE:LINE:COL'
                                  #  DepsErrors *PACKAGE_ERROR_ARR: errors in dependencies


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              GET              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go get IMPORT_PATHS               #Automatically run by go build|test|list
                                  #  - including on unknown import "IMPORT_PATH"
                                  #If module-aware:
                                  #  - Fetch module over the network
                                  #  - Retrieve vMODULE_VERSION
                                  #  - Copy source locally to GOPATH/pkg/mod/IMPORT_PATH@vMODULE_VERSION
                                  #If non-module-aware:
                                  #  - Take local source from GOPATH/src/IMPORT_PATH
                                  #  - Build binaries to GOPATH/pkg/GOOS_GOARCH/IMPORT_PATH/*.a
                                  #Build main PACKAGE to GOBIN/BINARY
                                  #If module-aware:
                                  #  - Does all of this recursively for dependencies
-d                                #Does not build main PACKAGE
-u                                #Upgrade versions of packages already in go.mod
-t                                #Also get test files
-ANY_GO_BUILD_FLAG                #
-v                                #Verbose
-f                                #Verify that forks matches the source repository described in MODULE_PATH
                                  #Only if non-module-aware
-fix                              #Runs go fix on dependencies
                                  #Only if non-module-aware

go install IMPORT_PATHS           #Very similar to go get, but with fewer flags|capabilities
                                  #Prefer go get

go mod download MODULE_PATH_LIST  #Like go go get, but with MODULE_PATH, and does not build PACKAGEs
                                  #Prefer go get
-x                                #Verbose
-json                             #JSON output


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PROXY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR GOPROXY                    #Proxies MODULEs downloads ("module proxy").
                                  #Can be:
                                  #  - http[s] URL (GET only)
                                  #  - filesystem PATH
                                  #  - "direct": no proxy
                                  #  - "off": disallow any download
                                  #Can be ,-separated list
                                  #Default: "https://proxy.golang.org,direct"
                                  #GOPROXY/MODULE_PATH/:
                                  #  - @v:
                                  #     - list: line-separated list of all vMODULE_VERSION
                                  #     - vMODULE_VERSION.info: JSON with OBJ: Version "vMODULE_VERSION", Time "YYYY-MM-DDTHH:MM:SSZ"
                                  #     - vMODULE_VERSION.mod: go.mod content
                                  #     - vMODULE_VERSION.zip: MODULE's files. Root dir must be MODULE_PATH@vMODULE_VERSION
                                  #  - @latest: same as @v/LATEST_vMODULE_VERSION.info

proxy.golang.org                  #Goals:
                                  #  - better performance
                                  #  - using sum.golang.org
                                  #  - for Go team to monitor|debug
                                  #Run by Google
                                  #Cached for 1 minute, i.e. takes up to 1 minute for new versions to appear
                                  #Can opt-out with GOPROXY=direct
index.golang.org/index            #Show latest PACKAGEs added to proxy.golang.org, as JSON feed
                                  #Each OBJ: Version|Time (see above), Path: "MODULE_PATH"
?since=DATE                       #Def: none
?limit=NUM                        #Max|def: 2000

ENVVAR GONOPROXY                  #MODULE_PATHS that should not use GOPROXY
                                  #Can be "none"
ENVVAR GOPRIVATE                  #Combines GONOPROXY + GONOSUMDB


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           INTEGRITY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go.sum                            #File containing checksum of each package (both go.mod and rest of files), for each vMODULE_VERSION, one per line.
                                  #Sibling to go.mod, created|updated together.
                                  #Goal: integrity when installing again on same|other machine.

go mod verify                     #Checks that installed packages match their go.sum

READONLY INSTALL ==>              #GOROOT|GOPATH/**/*.go are written with read-only file permissions

ENVVAR GOSUMDB                    #URL[+PUBLICKEY] to a server that caches PACKAGEs go.sum hashes.
                                  #Only used for PACKAGEs not in local go.sum yet.
                                  #Can be space-separated list
                                  #Can be "off"
                                  #Def: "sum.golang.org"
sum.golang.org                    #Run by Google
ENVVAR GONOSUMDB                  #MODULE_PATHS that should not use GOSUMDB
                                  #Can be "none"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BUILD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go build FILE.go                  #Compile FILE.go to executable FILE
go build [DIR]                    #Compile DIR/*.go to executable DIRNAME
                                  #Must all be from same PACKAGE
                                  #Def DIR: .

ENVVAR GOCACHE                    #Cache directory for go build
                                  #Def: CACHE_DIR/go-build (CACHE_DIR is ~/.cache on Linux)
-a                                #Bypass GOCACHE
                                  #Useful when changing C library used through cgo, since that does not update cache
ENVVAR GODEBUG=gocacheverify=1    #Bypass GOCACHE and verify it
ENVVAR GODEBUG=gocachehash=1      #Verbose mode showing what is used in GOCACHE
ENVVAR GODEBUG=gocachetest=1      #Same but only for tests

ENVVAR GOTMPDIR                   #Temporary directory used by build, e.g. in GOTMPDIR/go-build
                                  #Def: os.TempDir(), i.e. /tmp on Unix

runtime.GOOS                      #OS name
                                  #Among "linux", "darwin", "windows", "freebsd|netbsd|openbsd|dragonfly", "solaris|illumos", "plan9",
                                  #"aix", "android", "nacl" (Chrome OS), "js" (with GOARCH "wasm")
                                  #Can be set manually with ENVVAR GOOS
runtime.GOARCH                    #CPU architecture
                                  #Among "386|amd64[p32]", "arm[64]", "ppc64[le]", "mips[64][le]", "s390x", "riscv64", "wasm"
                                  #Can be set manually with ENVVAR GOARCH
ENVVAR GOARM                      #"5|6|7". ARM version, with GOARCH=arm
ENVVAR GO386                      #"387|sse2". Floating point version, with GOARCH=386
ENVVAR GOMIPS[64]                 #"hardfloat|softfloat". Floating point version, with GOARCH=mips[64][le]
ENVVAR GOWASM                     #"FEAT,...". Experimental features, with GOARCH=wasm, among "satconv|signext"

ENVVAR GOHOSTOS|GOHOSTARCH        #Like ENVVAR GOOS|GOARCH except readonly

ENVVAR GOEXE                      #Built file file extension. "" on Unix, ".exe" on Windows
                                  #Read-only
ENVVAR GOGCCFLAGS                 #CLI flags passed to cc under the hood
                                  #Read-only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GCCGO             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GCO ==>                           #Default compiler.
GCC GO ==>                        #Alternative compiler. Prefer default one.
                                  #Not documented until needed
ENVVAR GCCGO                      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CGO              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CGO ==>                           #Used to use C from|to Go
                                  #Only with gc compiler
                                  #Not documented until needed
ENVVAR CGO_ENABLED                #
ENVVAR AR|CC|CCX|FC               #
ENVVAR CGO_CFLAGS|CPPFLAGS|
 CXXFLAGS|FFLAGS|
 LDFLAGS[_ALLOW|DISALLOW]         #
ENVVAR PKG_CONFIG                 #
ENVVAR GCCGOTOOLDIR               #
ENVVAR GO_EXTLINK_ENABLED         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CLEAN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go clean IMPORT_PATHS             #Remove temporary files
-i                                #Remove BINARY built with go build|test
-cache                            #Remove GOCACHE directory
-testcache                        #Same but only tests
-modcache                         #Remove package downloads cache (GOPATH/pkg/mod)
-ANY_GO_BUILD_FLAG                #

-r                                #On dependencies too

-x                                #Verbose
-n                                #Dry run


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              FMT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


gofmt [FILE|DIR...]               #Beautify *.go files
                                  #Error if invalid Go
                                  #Def: stdin
                                  #Prints to stdout
-w                                #Modify files instead of writing to stdout
-d                                #Show diff instead
-l                                #List files to diff instead of beautify
-e                                #Report all errors, instead of only first 10
-s                                #Also refactor|simplify code, removing:
                                  #  - inline inferred nested type, e.g. []TYPE{TYPE{}} -> []TYPE{{}}
                                  #  - some noop declaration, e.g. for VAR, _ = range SLICE {} -> for VAR = range SLICE {}
                                  #  - some default values, e.g. SLICE[:len(SLICE)] -> SLICE[:]
-r STR                            #Add a custom rewrite rule 'PATTERN -> REPLACEMENT'
                                  #PATTERN|REPLACEMENT are Go EXPR
                                  #VAR in PATTERN mean "any VAR", and can be re-used in REPLACEMENT
                                  #E.g. 'a[b:len(a)] -> a[b:]'
-cpuprofile FILE2                 #Create CPU profile FILE2???

go fmt IMPORT_PATHS               #Runs gofmt -wl
-n                                #Dry-run
-x                                #Verbose


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              FIX              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go tool fix [DIR|FILE...]         #Migrate source files from old Go version to latest Go version
                                  #Def PATH: stdin, and write to stdout
                                  #Prints to stderr on any migration
-r RULE,...                       #Def: all RULEs
-force RULE,...                   #Force those RULEs to be applied
-diff                             #Show diff instead

go fix IMPORT_PATHS               #Higher-level command above go tool fix

AVAILABLE RULES ==>               #
context                           #import "golang.org/x/net/context" -> import "context"
gotypes                           #import "golang.org/x/tools/go/{exact,types}" ->  import "go/{constant,types}"

netipv6zone                       #In import "net", fix IPAddr|UDPAddr|TCPAddr STRUCT old definition
printerconfig                     #In import "printer", fix Config STRUCT old definition

cftype                            #Fixes initializers and casts of C.*Ref and JNI types (Go <-> C|Java)
jni                               #Fixes initializers of JNI's jobject and subtypes (Go <-> C|Java)
egl                               #Fixes initializers of EGLDisplay (OpenGL)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              VET              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go vet IMPORT_PATHS               #Lints for programming errors that cannot be caught by compilers, because not 100% sure it is error
                                  #Exit code non-0 if error
                                  #Runs all RULE by default
-RULE=true                        #Only run that RULE
-RULE=false                       #Do not run that RULE
-c=NUM                            #Show source, with NUM lines around.
                                  #-1 (def) to disable.
-json                             #JSON output
-vettool=BIN_PATH                 #Use a different linter
-ANY_GO_BUILD_FLAG                #

AVAILABLE RULES ==>               #
unreachable                       #Unreachable code
assign                            #Useless assignments like VAR = VAR
bools                             #Common mistakes with BOOL
shift                             #Wrong << >>
loopclosure                       #Closure of goroutine|deferred FUNC inside a for loop, use VAR iterated by that for loop
nilfunc                           #FUNC == nil (might have meant FUNC() == nil)
unsafeptr                         #Invalid conversions with uintptr|unsafe.Pointer

composites                        #Positional arguments to an inline STRUCT from a different PACKAGE
composites.whitelist              #'STRUCT,...'
structtag                         #STRUCT tags conventions

stdmethods                        #When using standard library INTERFACEs, check types
unusedresult                      #Return value not used from a standard library FUNC with no side effects
unusedresult.funcs "FUNC,..."
unusedresult.stringmethods
 "METHOD,..."                     #Customize

errorsas                          #Wrong argument type to errors.As()
atomic                            #Common mistakes with sync/atomic
copylocks                         #Passing sync.* as value instead of using pointers
lostcancel                        #Ensure FUNC from context.With*()->FUNC is called
printf                            #Check printf-like FUNC arguments
                                  #By default checks all the ones from standard library
printf.funcs "STR,..."            #Additional FUNCs to check
unmarshal                         #Wrong arugment to json.Unmarshal()
httpresponse                      #defer resp.Body.Close() before checking err != nil

tests                             #Common mistakes in tests

buildtag                          #+build tags syntax errors
asmdecl                           #Mismatch between ASM and Go
cgocall                           #Passing a CHAN|MAP|FUNC|SLICE to C, with cgo
