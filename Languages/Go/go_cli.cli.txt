
          
   GO_CLI  
          



VERSION ==>                       #See Go language
RELATED DOCUMENTATION ==>         #See Go language


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR GOFLAGS                    #"-FLAG=VAL ..." applied to every go ..., providing the command has that flag


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ENV              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR GOENV                      #All Go-related ENVVARs (GO*|CGO*|GCC-related) can be also set in that file
                                  #using go env -w|-u
                                  #Def: ~/.config/go/env

go env                            #Prints all GO*|CGO*|GCC-related ENVVARs
                                  #After default value resolution
go env "ENVVAR",...               #Print value
go env -w ENVVAR=VAL,...          #Sets value
go env -u ENVVAR                  #Unsets value

-json                             #JSON output


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              FIX              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go tool fix [DIR|FILE...]         #Migrate source files from old Go version to latest Go version
                                  #Def PATH: stdin, and write to stdout
                                  #Prints to stderr on any migration
-r RULE,...                       #Def: all RULEs
-force RULE,...                   #Force those RULEs to be applied
-diff                             #Show diff instead

go fix IMPORT_PATHS               #Higher-level command above go tool fix

AVAILABLE RULES ==>               #
context                           #import "golang.org/x/net/context" -> import "context"
gotypes                           #import "golang.org/x/tools/go/{exact,types}" ->  import "go/{constant,types}"

netipv6zone                       #In import "net", fix IPAddr|UDPAddr|TCPAddr STRUCT old definition
printerconfig                     #In import "printer", fix Config STRUCT old definition

cftype                            #Fixes initializers and casts of C.*Ref and JNI types (Go <-> C|Java)
jni                               #Fixes initializers of JNI's jobject and subtypes (Go <-> C|Java)
egl                               #Fixes initializers of EGLDisplay (OpenGL)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           GENERATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go generate IMPORT_PATHS          #Execute any COMMAND from //go:generate comments
                                  #Does not remove the comment
                                  #Exit code is any COMMAND non-0 exit code, or 0
                                  #Goal is to modify source file
                                  #Implies -tags=generate
-run=REGEXP                       #Only run comments whose full content partially matches REGEXP
-ANY_GO_BUILD_FLAG                #

//go:generate COMMAND [ARGS...]   #COMMAND is not executed within a shell
                                  #The following environment variables are added:
                                  #  - $GOARCH, $GOOS
                                  #  - $GOPACKAGE: PACKAGE
                                  #  - $GOFILE: filename
                                  #  - $GOLINE: line number
                                  #  - $DOLLAR "$"
                                  #Before executing the COMMAND:
                                  #  - double quotes surrounding ARGs are removed
                                  #  - $ENVVAR are expanded
                                  #By convention, often at top of file
//go:generate -command ALIAS
 COMMAND [ARGS...]                #Means if another //go:generate uses ALIAS as COMMAND, it will be expanded to COMMAND [ARGS...]

// Code generated ... DO NOT EDIT.#By convention, this comment should be before any modifications done by go generate


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OTHERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go tool dist ...                  #Test, re-build and analyze the Go installation itself
