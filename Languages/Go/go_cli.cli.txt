
          
   GO_CLI  
          



VERSION ==>                       #See Go language


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          IMPORT PATH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import "IMPORT_PATH"              #"IMPORT_PATH" locates the PACKAGE on the filesystem.
                                  #Targets a DIR with *.go
                                  #By convention, DIR name should be same as PACKAGE
                                  #Relative to:
                                  #  - GOROOT/src: for standard library
                                  #  (if module-aware, and URI)
                                  #  - GOPATH/pkg/mod
                                  #  (if non-module-aware)
                                  #  - GOPATH/src
                                  #  (if non-module-aware, and start with . or ..)
                                  #  - $PWD
ENVVAR GOROOT                     #Global go directory.
                                  #Contains:
                                  #  - binaries (go|gofmt)
                                  #  - standard library
                                  #  - documentation
                                  #Directory structure is non-module-aware one.
                                  #Default: /usr/local/go
                                  #Same directory structure as GOPATH
ENVVAR GOPATH                     #Same syntax as PATH (:-separated on Unix, ;-separated on Windows)
                                  #  - on write, only first element is used
                                  #  - usually, having several elements is not needed
                                  #Must be absolute
                                  #Default: ~/go/
                                  #Directory structure:
                                  #  - bin/BINARY: binaries, i.e. built main PACKAGEs
                                  #  (module-aware)
                                  #  - pkg/mod/IMPORT_PATH@vMODULE_VERSION/*.go: source code
                                  #  (non-module-aware, or standard library)
                                  #  - src/IMPORT_PATH/*.go: source code
                                  #  (non-module-aware)
                                  #  - pkg/GOOS_GOARCH/IMPORT_PATH/*.a: built non-main PACKAGEs
ENVVAR GOBIN                      #Userland binaries directory
                                  #Should add both GOBIN and GOROOT/bin to $PATH
                                  #Must be absolute
                                  #Def: GOPATH/bin
BINARY INSTALLATION ==>           #During go install:
                                  #  - if main PACKAGE
                                  #  - moved to GOBIN/BINARY
                                  #     - BINARY is main PACKAGE's DIR name
                                  #By convention, main package DIR should be:
                                  #  - (preferred) REPO_ROOT/cmd/BINARY/
                                  #  - REPO_ROOT


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          MODULE PATH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODULE_PATH                       #Beginning of IMPORT_PATH.
                                  #Where MODULE is located.
                                  #If standard library: ""
REPO_PATH                         #End of IMPORT_PATH.
                                  #PACKAGE path within MODULE.
                                  #If single PACKAGE: often "", i.e. top-level inside repository.

[v]MODULE_VERSION                 #MODULE version.
                                  #If specified as argument:
                                  #  - "module query", i.e. query against git tag vA.B.C[-D][+E]:
                                  #     - "vA[.B][.C][-D][+E]"
                                  #     - "latest": vA.*.*
                                  #     - "upgrade": vA.*.*, never downgrades
                                  #     - "patch": vA.B.*, never downgrades
                                  #  - git tag|LBRANCH|COMMIT
                                  #Otherwise, by priority order:
                                  #  - latest git tag without prerelease: vA.B.C
                                  #  - latest git tag with prerelease: vA.B.C[-D][+E]
                                  #  - latest commit: v0.0.0-YYYYMMDDHHMMSS-XXXXXXXXXXXX
                                  #     - last part is git commit hash
                                  #If v, prefixed with v

VERSIONING ==>                    #go get:
                                  #  - if in go.mod or as argument, use it as is (including minor|patch)
                                  #     - if -u[=minor|patch], use latest minor (def) or patch instead
                                  #     - if competing with other dependencies requiring same dependency,
                                  #       use the latest one, even if different major
                                  #  - otherwise, use latest major
                                  #Breaking change requires new IMPORT_PATH
                                  #By convention: append "/vMAJOR" to MODULE_PATH
                                  #  - i.e. add a "/vMAJOR" source directory, and keep previous version
                                  #I.e. encourages avoiding any breaking changes
                                  #  - except for v0.*.*

REPOSITORY STRUCTURE ==>          #Due to how go CLI works, from repository root:
                                  #  - [REPO_PATH/]*.go: non-main PACKAGE
                                  #  - [cmd/BINARY/]*.go: main PACKAGE
                                  #  - go.mod|sum

GIT ==>                           #This doc assumes git, but other VCS (svn|mercurial|Bazaar|Fossil) are supported


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODULE ==>                        #Group of PACKAGEs

ENVVAR GO111MODULE                #Decides whether in module-aware mode: "on|off"
                                  #If "auto" (def), on if [.../]go.mod exists

go.mod                            #File containing line-wise directives (below)
                                  #Location determines the MODULE's root directory:
                                  #  - any subdirectory's PACKAGE is included
                                  #  - subdirectory with another go.mod are excluded
//COMMENT                         #
module MODULE_PATH                #Enforces MODULE_PATH is referred to like this.
                                  #This is in case code is hosted in several places.
                                  #This does not declare the MODULE_PATH, since that is defined based by where code is hosted.
go VERSION                        #Declares Go version
require MODULE_PATH vMODULE_VRSION
 [// indirect]                    #Declares dependency
require (                         #//indirect: dependency's dependency
  ...                             #  - e.g. when want to control its version
)

go mod init "MODULE_PATH"         #Creates ./go.mod

go.sum                            #File containing checksum of each package (both go.mod and rest of files), for each vMODULE_VERSION, one per line.
                                  #Sibling to go.mod, created|updated together.
                                  #Goal: integrity when installing again on same|other machine.

go get IMPORT_PATHS               #IMPORT_PATHS is:
                                  #  - "IMPORT_PATH[@MODULE_VERSION]"
                                  #  - "IMPORT_PATH@none": remove dependency
                                  #  - DIR: packages in DIR *.go or go.mod
                                  #  - def: "."
                                  #If module-aware:
                                  #  - Fetch module over the network
                                  #  - Retrieve vMODULE_VERSION
                                  #  - Copy source locally to GOPATH/pkg/mod/IMPORT_PATH@vMODULE_VERSION
                                  #If non-module-aware:
                                  #  - Take local source from GOPATH/src/IMPORT_PATH
                                  #  - Build binaries to GOPATH/pkg/GOOS_GOARCH/IMPORT_PATH/*.a
                                  #Build main PACKAGE to GOBIN/BINARY
                                  #Add `require MODULE_PATH vMODULE_VERSION ...` to go.mod
                                  #  - Modify go.sum too
                                  #If module-aware:
                                  #  - Does all of this recursively for dependencies
-d                                #Does not build main PACKAGE
-u                                #Upgrade versions of packages already in go.mod
-t                                #Also get test files
-insecure                         #Allow MODULE_PATH to use http: (as opposed to https:)

go install IMPORT_PATHS           #Very similar to go get, but with fewer flags|capabilities
-ANY_GO_BUILD_FLAG                #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BUILD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go build FILE.go                  #Compile FILE.go to executable FILE
go build [DIR]                    #Compile DIR/*.go to executable DIRNAME
                                  #Must all be from same PACKAGE
                                  #Def DIR: .
                                  #Does "go get"???

ENVVAR GOCACHE                    #Cache directory for go build
                                  #Def: CACHE_DIR/go-build (CACHE_DIR is ~/.cache on Linux)
-a                                #Bypass GOCACHE
                                  #Useful when changing C library used through cgo, since that does not update cache
ENVVAR GODEBUG=gocacheverify=1    #Bypass GOCACHE and verify it
ENVVAR GODEBUG=gocachehash=1      #Verbose mode showing what is used in GOCACHE
ENVVAR GODEBUG=gocachetest=1      #Same but only for tests

runtime.GOOS                      #OS name
                                  #Among "linux", "darwin", "windows", "freebsd|netbsd|openbsd|dragonfly", "solaris|illumos", "plan9",
                                  #"aix", "android", "nacl" (Chrome OS), "js" (with GOARCH "wasm")
                                  #Can be set manually with ENVVAR GOOS
runtime.GOARCH                    #CPU architecture
                                  #Among "386|amd64[p32]", "arm[64]", "ppc64[le]", "mips[64][le]", "s390x", "riscv64"
                                  #Can be set manually with ENVVAR GOARCH


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CLEAN             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go clean                          #Remove temporary files
-cache                            #Remove GOCACHE directory
-testcache                        #Same but only tests


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ENV              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go env                            #Prints all GO*|CGO* ENVVARs, and also GCC-related ENVVARs
                                  #After default value resolution
go env "ENVVAR",...               #Print value
go env -w ENVVAR=VAL,...          #Sets value
go env -u ENVVAR                  #Unsets value

-json                             #Prints as JSON

ENVVAR GOENV                      #Where go env -w|-u ... is stored (not stored in environment)
                                  #Def: ~/.config/go/env


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              FMT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


gofmt [FILE|DIR...]               #Beautify *.go files
                                  #Error if invalid Go
                                  #Def: stdin
                                  #Prints to stdout
-w                                #Modify files instead of writing to stdout
-d                                #Show diff instead of beautify
-l                                #List files to diff instead of beautify
-e                                #Report all errors, instead of only first 10
-s                                #Also refactor|simplify code, removing:
                                  #  - inline inferred nested type, e.g. []TYPE{TYPE{}} -> []TYPE{{}}
                                  #  - some noop declaration, e.g. for VAR, _ = range SLICE {} -> for VAR = range SLICE {}
                                  #  - some default values, e.g. SLICE[:len(SLICE)] -> SLICE[:]
-r STR                            #Add a custom rewrite rule 'PATTERN -> REPLACEMENT'
                                  #PATTERN|REPLACEMENT are Go EXPR
                                  #VAR in PATTERN mean "any VAR", and can be re-used in REPLACEMENT
                                  #E.g. 'a[b:len(a)] -> a[b:]'
-cpuprofile FILE2                 #Create CPU profile FILE2???

go fmt IMPORT_PATHS               #Runs gofmt -wl
-n                                #Dry-run
-x                                #Prints underlying gofmt command
-mod readonly|vendor              #See 'go help modules' for more???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CGO              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CGO ==>                           #Used to use C from|to Go
                                  #Only with gc compiler
                                  #Not documented until needed


