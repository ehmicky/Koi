
          
   GO_CLI  
          



VERSION ==>                       #See Go language


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          IMPORT PATH          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import "IMPORT_PATH"              #"IMPORT_PATH" locates the PACKAGE on the filesystem.
                                  #Targets a DIR with *.go
                                  #By convention, DIR name should be same as PACKAGE
                                  #Relative to:
                                  #  - GOROOT/src: for standard library
                                  #  (if start with . or .., unless module-aware mode)
                                  #  - $PWD
                                  #     - what about non-module-aware mode???
                                  #        - including absolute PATH???
                                  #        - not if go build|run DIR???
                                  #  (if URI and module-aware mode)
                                  #  - GOPATH/pkg/mod: for user libraries
                                  #  (if not module-aware mode)
                                  #  - GOPATH/src: for user libraries
GOROOT                            #Global go directory.
                                  #Contains:
                                  #  - bin/: binaries (go|gofmt)
                                  #  - src/: standard library
                                  #  - documentation
                                  #By priority:
                                  #  - ENVVAR GOROOT
                                  #  - /usr/local/go
                                  #Same directory structure as GOPATH
GOPATH                            #By priority:
                                  #  - ENVVAR GOPATH
                                  #     - must be absolute
                                  #     - same syntax as PATH (:-separated on Unix, ;-separated on Windows)
                                  #     - on write, only first element is used
                                  #     - usually, having several elements is not needed
                                  #  - ~/go/
                                  #Directory structure:
                                  #  - src/IMPORT_PATH/*.go: source code
                                  #  - pkg/mod/IMPORT_PATH@vVERSION/*.go: source code
                                  #  - bin/BINARY: binaries, i.e. compiled main PACKAGEs
                                  #  (only if not module-aware mode???)
                                  #  - pkg/GOOS_GOARCH/IMPORT_PATH/*.a: compiled non-main PACKAGEs
                                  #     - not used???
GOBIN                             #Userland binaries directory
                                  #Should add both GOBIN and GOROOT/bin to $PATH
                                  #By priority:
                                  #  - ENVVAR GOBIN (must be absolute)
                                  #  - GOPATH/bin
BINARY INSTALLATION ==>           #During go install, if main PACKAGE:
                                  #  - moved to GOBIN/BINARY
                                  #  - BINARY is main PACKAGE's DIR name
                                  #By convention:
                                  #  - (preferred) in REPO_ROOT/cmd/BINARY/
                                  #  - in REPO_ROOT

MODULE_PATH                       #Beginning of IMPORT_PATH, to locate MODULE.
                                  #If standard library: ""
REPO_PATH                         #End of IMPORT_PATH, to locate PACKAGE within MODULE.
                                  #If single PACKAGE: often "", i.e. top-level inside repository.

VERSIONING ==>                    #Breaking change requires new IMPORT_PATH
                                  #By convention: append "/vMAJOR" to MODULE_PATH
                                  #  - i.e. add a "/vMAJOR" source directory, and keep previous version

REPOSITORY STRUCTURE ==>          #Due to how go CLI works, from repository root:
                                  #  - [REPO_PATH/]*.go: non-main PACKAGE
                                  #  - [cmd/BINARY/]*.go: main PACKAGE
                                  #  - go.mod|sum


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MODULE ==>                        #Group of PACKAGEs

ENVVAR GO111MODULE                #Decides whether in module-aware mode: "on|off"
                                  #If "auto" (def), on if [.../]go.mod exists

go.mod                            #File containing line-wise directives (below)
                                  #Location determines the MODULE's root directory:
                                  #  - any subdirectory's PACKAGE is included
                                  #  - subdirectory with another go.mod are excluded
//COMMENT                         #
module MODULE_PATH                #Declares MODULE_PATH. How this is used???
go VERSION                        #Declares Go version
require MODULE_PATH vX.Y.Z
require (
  ...                             #Declares dependency
)                                 #Automatically added on go build

go mod init "MODULE_PATH"         #Creates ./go.mod

VERSION                           #Module version, by priority order:
                                  #  - git tag [v]X-Y-Z[-...]
                                  #  - 0.0.0-YYYYMMDDHHMMSS-XXXXXXXXXXXX
                                  #     - last part is git commit hash

go install "MODULE_PATH"          #Fetch module over the network
                                  #Retrieve VERSION
                                  #Copy it locally to:
                                  #  - GOPATH/pkg/mod/MODULE_PATH@vVERSION
                                  #Also copy dependencies, recursively
                                  #Compile main PACKAGE to GOPATH/bin/BINARY
-i                                #Compiles main PACKAGE of dependencies too

go get MODULE_PATH                #Fetch module over the network
                                  #Copy it locally to:
                                  #  - GOPATH/src/MODULE_PATH
                                  #  - GOPATH/pkg/mod/MODULE_PATH@vVERSION
                                  #Compile main PACKAGE to GOPATH/bin/BINARY???
                                  #Performed automatically during go build on any import statement???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BUILD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go build FILE.go                  #Compile FILE.go to executable FILE
go build [DIR]                    #Compile DIR/*.go to executable DIRNAME
                                  #Must all be from same PACKAGE
                                  #Def DIR: .

runtime.GOOS                      #OS name
                                  #Among "linux", "darwin", "windows", "freebsd|netbsd|openbsd|dragonfly", "solaris|illumos", "plan9",
                                  #"aix", "android", "nacl" (Chrome OS), "js" (with GOARCH "wasm")
                                  #Can be set manually with ENVVAR GOOS
runtime.GOARCH                    #CPU architecture
                                  #Among "386|amd64[p32]", "arm[64]", "ppc64[le]", "mips[64][le]", "s390x", "riscv64"
                                  #Can be set manually with ENVVAR GOARCH


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ENV              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


go env                            #Prints all GO*|CGO* ENVVARs, and also GCC-related ENVVARs
                                  #After default value resolution
go env "ENVVAR",...               #Print value
go env -w ENVVAR=VAL,...          #Sets value
go env -u ENVVAR                  #Unsets value

-json                             #Prints as JSON

ENVVAR GOENV                      #Where go env -w|-u ... is stored (not stored in environment)
                                  #Def: ~/.config/go/env


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              FMT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


gofmt [FILE|DIR...]               #Beautify *.go files
                                  #Error if invalid Go
                                  #Def: stdin
                                  #Prints to stdout
-w                                #Modify files instead of writing to stdout
-d	                              #Show diff instead of beautify
-l                                #List files to diff instead of beautify
-e                                #Report all errors, instead of only first 10
-s                                #Also refactor|simplify code, removing:
                                  #  - inline inferred nested type, e.g. []TYPE{TYPE{}} -> []TYPE{{}}
                                  #  - some noop declaration, e.g. for VAR, _ = range SLICE {} -> for VAR = range SLICE {}
                                  #  - some default values, e.g. SLICE[:len(SLICE)] -> SLICE[:]
-r STR                            #Add a custom rewrite rule 'PATTERN -> REPLACEMENT'
                                  #PATTERN|REPLACEMENT are Go EXPR
                                  #VAR in PATTERN mean "any VAR", and can be re-used in REPLACEMENT
                                  #E.g. 'a[b:len(a)] -> a[b:]'
-cpuprofile FILE2                 #Create CPU profile FILE2???

go fmt [IMPORT_PATH]              #Runs gofmt -wl
-n                                #Dry-run
-x                                #Prints underlying gofmt command
-mod readonly|vendor              #See 'go help modules' for more???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CGO              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CGO ==>                           #Used to use C from|to Go
                                  #Only with gc compiler
                                  #Not documented until needed


