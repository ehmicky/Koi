
               
   NODE_SEMVER  
               



VERSION ==>                       #6.0.0

OPTS                              #Optional last argument to all SEMVER.*()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SVERSION                          #'VERSION' following SemVer
VERSION                           #Like SVERSION but can also:
                                  #  - have trailing whitespaces
                                  #  - start with 'v' or '='
LVERSION                          #Like VERSION but can also start|ends with any non-confirming character

OPTS.loose                        #If true, looser parsing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RANGE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RANGE || RANGE2                   #or

RANGE RANGE2                      #and

VERSION                           #Like =VERSION

>|>=|<=|<|=VERSION                #Across major versions
                                  #Versions with a prerelease tags:
                                  #  - skipped by RANGE, even if satisfies it
                                  #  - unless either:
                                  #     - RANGE has exactly same A.B.C
                                  #     - OPTS.includePrerelease true (def: false)

WILDCARDS ==>                     #  - [x|X|*]                           -->  >=0.0.0
                                  #  - A[.x|X|*]                         -->  >=A.0.0     <A++.0.0
                                  #  - A.B[.x|X|*]                       -->  >=A.B.0     <A.B++.0
                                  #When mixed with caret, caret is ignored

DASHES ==>                        #  - A[.B][.C][-D] - A2[.B2][.C2][-D2] -->  >=A.B.C[-D] <=A2.B2.C2[-D2]
                                  #     - B|C default to 0
                                  #     - B2|C2 default to *

TILDE ==>                         #  - ~A[.B][.C][-D]                    -->  >=A.B.C[-D] <A.B++.0
                                  #     - B|C default to 0 (i.e. same as wildcards)

CARET ==>                         #  - ^A.B.C[-D]                        -->  >=A.B.C[-D] <A++.0.0
                                  #  - ^0.B.C[-D]                        -->  >=0.B.C[-D] <0.B++.0
                                  #  - ^0.0.C[-D]                        -->  0.0.C[-D]

GOOD PRACTICES ==>                #Use only tilde and carets ranges for dependencies.
                                  #Prefer carets.
                                  #When checking ranges, remember that they can be discontinuous.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PARSE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEMVER.valid(SVERSION)
 ->SVERSION|null                  #null if not valid
SEMVER.clean(VERSION)
 ->SVERSION|null                  #
SEMVER.coerce(LVERSION)
 ->SVERSION|null                  #

SEMVER.major|minor|patch(VERSION)
 ->NUM                            #
SEMVER.prerelease(VERSION)
 ->STR_ARR|null                   #Prerelease tags, split on '.'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DIFF              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEMVER.diff(VERSION, VERSION2)    #Among '[pre]major|minor|patch' and 'prerelease'
 ->STR                            #  - 'pre*': when different major|minor|patch, and one VERSION has a prerelease tag

SEMVER.inc(VERSION, STR[, STR2])  #Increment where STR can be:
 ->VERSION|null                   #  - 'major|minor|patch'
                                  #  - 'premajor|minor|patch': same but with prerelease tag '[STR2]-0'
                                  #  - 'prerelease': increment prerelease tag if any, same as pre-patch otherwise


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEMVER.validRange(RANGE)          #null if not valid
 ->RANGE|null                     #Also normalize range

SEMVER.intersects(RANGE, RANGE2)
 ->BOOL                           #

SEMVER.satisfies(VERSION, RANGE)
 ->BOOL                           #
SEMVER.min|maxSatisfying
 (VERSION_ARR, RANGE)->VERSION    #
SEMVER.minVersion(RANGE)->VERSION #
SEMVER.gtr|ltr(VERSION, RANGE)
 ->BOOL                           #VERSION >|< any version within RANGE
SEMVER.outside
 (VERSION, '>|<', RANGE)->BOOL    #Same


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMPARE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEMVER.gt|lt|gte|lte|eq|neq
 (VERSION, VERSION2)->BOOL        #Check precedence
SEMVER.comp(VERSION,
 '>|>=|<|<=|==|!=', VERSION2)
 ->BOOL                           #Same
SEMVER.[r]compare
 (VERSION, VERSION2)->-1|0|1      #If 'r', inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


semver VERSION...                 #Filter invalid ones, sort by precedence then print.
                                  #Exit code 1 if no valid ones.
--range|r RANGE                   #Filter by SEMVER.satisfies()
--loose|l                         #
--include-prerelease|p            #
--coerce|c                        #SEMVER.coerce()

semver --increment|i [STR] VERSION#Do SEMVER.inc() (def STR: 'patch')
--preid STR2                      #
