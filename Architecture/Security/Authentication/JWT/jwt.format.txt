
       
   JWT  
       



GOAL ==>                      #Send JSON information with crypto signature.

JWT                           #JWS or JWE

application/jwt               #MIME type

JWE                           #ENVLOP.E_PRIVATE_KEY.JWE_IV.E_MESSAGE.E_MESSAGE_TAG
                              #Meant to communicate any type of information.
                              #Before encryption + base64:
                              #  - ENVLOP ("JWE protected Header") OBJ:
                              #     - alg: "KEY_ALGO"
                              #     - enc: "MESSAGE_ALGO"
                              #  - PRIVATE_KEY
                              #  - JWE_IV
                              #  - MESSAGE
                              #After encryption + base64:
                              #  - ENVLOP
                              #  - E_PRIVATE_KEY: ALGO1(PRIVATE_KEY)
                              #  - JWE_IV
                              #  - E_MESSAGE: ALGO2(MESSAGE, PRIVATE_KEY, JWE_IV, ASCII(BASE64(UTF8(ENVELOP))))
                              #  - E_MESSAGE_TAG: generated from ALGO2()

JWS                           #ENVLOP.PAYLOAD.SIGN
                              #Each part is Base64
                              #Meant to communicate authentication information.
ENVLOP                        #JOSE Header. Metadata|headers about PAYLOAD.
                              #OBJ:
                              #  - typ: "JWT"
                              #  - alg: "JWS_ALGO"
                              #  (optional)
                              #  - cty: PAYLOAD_MIME
                              #     - "JWT", when nested JWT
                              #  - x5c: PUBLIC_KEY_CERT
                              #  - x5u: PUBLIC_KEY_CERT_URL
                              #  - x5t: PUBLIC_KEY_CERT_THUMBPRINT
                              #  - kid: PUBLIC_KEY_ID
                              #  - jwk: PUBLIC_KEY
                              #  - jku: PUBLIC_KEY_OBJ
PAYLOAD                       #"Claims set". Request payload.
                              #Should be checked.
                              #OBJ (all optional):
                              #  - iat NUM: issued time
                              #  - nbf NUM: only valid starting from that time
                              #  - exp NUM: expiration time
                              #  - iss ISSUER: giving entity
                              #  - aud AUDIENCE: receiving entity
                              #  - sub USER_ID
                              #  - jti: JWT ID
                              #  - any custom properties
SIGN                          #Signature of ENVLOP.PAYLOAD:
                              #  - SIGN = SHA256(ENVLOP.PAYLOAD, PRIVATEKEY)
                              #  - can check with CRYPTO.createVerify("sha256").update(ENVLOP.PAYLOAD).verify(PUBLICKEY, SIGN, "base64")
                              #  - for Google, PRIVATEKEY is CERT.kid

JWA                           #Encryption algorithms used in JWS|JWE
KEY_ALGO                      #One of:
                              #  - RSA1_5|RSA-OAEP[-256]: RSA variants
                              #  - A128|192|256[GCM]KW: AES [GCM] Key Wrap with 128|192|256-bit key
                              #     - with GCM, can use parameters ?iv|tag
                              #  - dir: shared symmetric key as the CEK
                              #  - ECDH-ES[+A128|192|256KW]: ECDH-ES with Concat KDF [+ A128|192|256KW]
                              #     - can use parameters ?epk|apu|apv
                              #  - PBES2-HS256|384|512+A128|192|256KW: PBES2 with HMAC SHA-256|384|512 and A128|192|256KW
                              #     - can use parameters ?p2s|p2c
MESSAGE_ALGO                  #One of:
                              #  - A128|192|256GCM: AES GCM with 128|192|256-bit key
                              #  - A128|192|256CBC-HS256|384|512: AES CBC with SHA128|192|256 and HMAC
JWS_ALGO                      #One of:
                              #  - HS256|384|512: HMAC-SHA, symmetric algo (recipient must have PRIVATE_KEY)
                              #  - RS256|384|512: RSASSA-PKCS-v1.5 SHA, asym. also (recipient must have PUBLIC_KEY)
                              #  - ES256|384|512: ECDSA with SHA
                              #  - PS256|384|512: RSASSA-PSS SHA and MGF1
                              #  - none
