
                
   BENCHMARK.JS  
                



ALTERNATIVES ==>                  #No reporting:
                                  #  - benchmark.js (prefered)
                                  #  - matcha: not maintained
                                  #  - wedgetail: not maintained
                                  #  - benchmarkJS: not maintained
                                  #Reporting:
                                  #  - matcha: not maintained
                                  #  - speedracergg: not maintqained
                                  #  - nanobench: not maintained

VERSION ==>                       #2.1.4
                                  #Browser/Node

new Benchmark
 (['BNAME'], FUNC()[, OPTS])
 ->BENCHMARK                      #Implements Node EVENTEMITTER for emit|on|off|listeners()

BENCHMARK|SUITE.clone([OPTS])
 ->BENCHMARK2|SUITE2              #
BENCHMARK.runInContext([OBJ])     #Clone with new `this`
 ->BENCHMARK2                     #Def OBJ is global

BENCHMARK|SUITE.options           #[S]OPTS

BENCHMARK|[S]OPTS.fn              #FUNC()

OPTS.id                           #'ID'
BENCHMARK|[S]OPTS.name            #'BNAME'

OPTS.async                        #BOOL
OPTS.defer                        #BOOL

OPTS.delay                        #NUM

OPTS.initCount                    #NUM

OPTS.minTime|maxTime              #NUM (in secs)
OPTS.minSamples                   #NUM

[S]OPTS.onStart()                 #
BENCHMARK|SUITE.running           #BOOL

[S]OPTS.onCycle()                 #
SUITE.on('cycle', FUNC(EVENT))

BENCHMARK|SUITE.abort()           #
[S]OPTS.onAbort()                 #
BENCHMARK|SUITE|EVENT.aborted     #BOOL

EVENT.type                        #STR
EVENT.cancelled                   #BOOL
EVENT.currentTarget|target        #

EVENT.result                      #

[S]OPTS.onError()                 #
BENCHMARK.error                   #ERROR

[S]OPTS.onReset()                 #
BENCHMARK|SUITE.reset()           #

[S]OPTS.onComplete()              #
SUITE.on('complete', FUNC(EVENT))

BENCHMARK|OPTS.setup()            #
BENCHMARK|OPTS.teardown()         #

BENCHMARK.run([OPTS])             #

BENCHMARK.toString()->STR         #

BENCHMARK.compiled()              #

BENCHMARK.count                   #NUM
BENCHMARK|DEFERRED.cycles         #NUM
BENCHMARK.hz                      #NUM

BENCHMARK.stats.mean              #NUM (in secs)
BENCHMARK.stats.deviation         #NUM (in secs). Standard deviation
BENCHMARK.stats.variance          #NUM (in secs).
BENCHMARK.stats.moe               #NUM (in secs). Margin of error
BENCHMARK.stats.rme               #0-1. Relative margin of error
BENCHMARK.stats.sem               #NUM (in secs). Standard error of mean
BENCHMARK.stats.sample            #ARR

BENCHMARK.times.cycle             #NUM (in secs). Last cycle duration
BENCHMARK.times.period            #NUM (in secs). One test duration
DEFERRED|BENCHMARK.times.elapsed  #NUM (in secs). All tests duration

DEFERRED|EVENT|BENCHMARK.times.
 timeStamp                        #DATE_NUM when tests started

BENCHMARK.compare(BENCHMARK2)
 ->-1|0|1                         #

Deferred(BENCHMARK)->DEFERRED     #
DEFERRED.benchmark                #BENCHMARK

new Suite(['NAME'][, SOPTS])
 ->SUITE                          #Implements Node EVENTEMITTER for emit|on|off|listeners()

SUITE.add
 (['NAME',] FUNC()[, SOPTS])      #
SUITE.length                      #

SUITE.run([SOPTS])                #
