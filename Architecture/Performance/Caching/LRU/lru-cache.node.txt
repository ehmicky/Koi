
             
   LRU-CACHE  
             


VERSION ==>                       #5.1.1

ALTERNATIVES ==>                  #  - node-lru-cache (preferred if needs features):
                                  #     - most high-profile
                                  #     - per-item space, TTL, bounced TTL, iteration, onRemove handler
                                  #     - slowest
                                  #     - Node only
                                  #  - quick-lru (preferred if needs simple):
                                  #     - browser/Node
                                  #  - flru:
                                  #     - fast
                                  #     - browser/Node
                                  #  - tiny-lru:
                                  #     - TTL
                                  #     - browser/Node

new LruCache([NUM|OPTS])          #LRU cache
                                  #OPTS:
                                  #  - max NUM (def: Infinity):
                                  #     - max space
                                  #     - if on limit, when adding a new item, least recent will be deleted
                                  #  - length(VAL, 'KEY')->NUM:
                                  #     - number of spaces taken by VAL
                                  #     - def: 1
                                  #  - maxAge TTL_NUM (def: null, in ms):
                                  #     - TTL per item
                                  #     - items are lazily deleted (i.e. only when retrieved)
                                  #  - updateAgeOnGet BOOL (def: false): update TTL on get()
                                  #  - stale BOOL (def: false):
                                  #     - if false (def): item over maxAge it deleted then returned as undefined
                                  #     - if true: item over maxAge is returned then deleted
                                  #  - dispose('KEY', VAL):
                                  #     - called when KEY is either:
                                  #        - replaced (not initially set) providing OPTS.noDisposeOnSet false (def)
                                  #        - deleted
                                  #     - called before replacement|deletion, i.e. can put in back on next tick
                                  #Recentness is updated by get|set|pop|del|reset|[r]forEach|prune|dump|load() but not by
                                  #peek|has|keys|values|length|itemCount()

LRUCACHE.get|peek('KEY')
 ->VAL|undefined                  #
LRUCACHE.set('KEY', VAL[, TTL])
 ->BOOL                           #Returns false if item is bigger than OPTS.max
LRUCACHE.pop()->VAL               #Returns most recent item, and delete it
LRUCACHE.del('KEY')               #
LRUCACHE.reset()                  #

LRUCACHE.has('KEY')->BOOL         #
LRUCACHE.keys()->'KEY'_ARR        #
LRUCACHE.values()->VAL_ARR        #
LRUCACHE.length                   #NUM (in space)
LRUCACHE.itemCount                #NUM (in items)
LRUCACHE.[r]forEach               #Most recently used items first
 (FUNC(VAL, 'KEY', LRUCACHE)      #Def CONTEXT is LRUCACHE
 [, CONTEXT])                     #'r' is in reverse order

LRUCACHE.prune()                  #Remove all stale items (instead of waiting for lazy deletion)

LRUCACHE.dump()->ARR              #Save state to ARR of OBJ: k 'KEY', v VAL, e TIMESTAMP_NUM
LRUCACHE.load(ARR)                #Restore state from ARR
