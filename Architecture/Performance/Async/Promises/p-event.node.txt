
           
   P-EVENT  
           



VERSION ==>                       #4.1.0

EMITTER                           #EVENTTARGET (DOM) or EVENTLISTENER (Node)

P-EVENT.multiple                  #Resolves PPROMISE after OPTS.count events among 'EVENT'[_ARR] have been sent.
 (EMITTER, 'EVENT'[_ARR][, OPTS]) #Resolves with PAYLOAD_ARR, where PAYLOAD is according to OPTS.multiArgs BOOL:
 ->PPROMISE                       #  - false (def): first argument only
                                  #  - true: all arguments
                                  #Rejects with PAYLOAD on first OPTS.rejectionEvents 'EVENT'_ERR (def: ['error'])
                                  #OPTS:
                                  #  - resolveImmediately BOOL (def: false)
                                  #  - filter(PAYLOAD)->BOOL: whether to ignore those events
                                  #  - timeout NUM: rejects after NUMms
PPROMISE                          #See p-cancelable doc
                                  #PPROMISE.cancel() removes listeners

P-EVENT(EMITTER, 'EVENT'[_ARR]    #Like multiple() except:
 [, OPTS|FUNC])->PPROMISE         #  - OPTS.count 1, and resolves with PAYLOAD_ARR[0]
                                  #  - OPTS.resolveImmediately false
                                  #  - FUNC is OPTS.filter

P-EVENT.iterator(EMITTER,         #Like multiple() but as PROMISE_ITERABLE for each event.
 'EVENT'[_ARR][, OPTS|FUNC])      #OPTS:
 ->PROMISE_ITERABLE               #  - multiArgs|filter: same as above
                                  #  - limit NUM (def: Infinity): stop after NUM events
                                  #  - resolutionEvents 'EVENT'_ARR (def: []): ends iteration on those events
                                  #  - rejectionEvents 'EVENT'_ARR (def: ['error']): returns rejected PROMISE on those events
