
         
   LOGIC  
         



Metalanguage
  - formal language describing another

Object language:
  - formal language being described by a metalanguage

Judgement:
  - statement in the metalanguage about a string of symbols in the object language
  - examples:
     - judging that a string of symbols is syntactically valid, i.e. is a formula
     - assertion
        - "x is blue" is a statement, but '"x is blue" is true' is a judgement

Asertion:
  - judgement asserting that a statement is true

Symbols:
  - also named signs
  - placeholder for semantics, without semantics of its own

Alphabet:
  - also named vocabulary
  - list of available unique symbols

String of symbols:
  - 0-n symbols, position-significant, possibly duplicate

Syntax:
  - symbols and rules to combine them, regardless of their semantics

Formal language:
  - set of symbols + formal grammar

Formal grammar:
  - set of formation rules

Formation rule:
  - rule asserting which string of symbols are synctactically valid

Production rule:
  - formation rule asserting that a string of symbols is equivalent to another
  - usually left side is shorter, i.e. meant to be substituted by right side
  - empty strings of symbols:
     - allowed, i.e. representing non-significant symbols
     - noted ϵ or λ
  - non-terminal symbol:
     - named also synctactic variable
     - symbol which can always be on the left side of at least one production rule, regardless of symbols before|after
     - opposite: terminal symbols

Context-free grammar:
  - formal grammar using only production rules where left side is single non-terminal symbol

Formula:
  - also named well-formed formula (WFF) or expression
  - string of symbols that are syntactically valid
  - opposite is nonsense

Semantics:
  - meaning assigned to non-logical symbols

Interpretation:
  - assigning semantics to non-logical symbols
  - can be partial:
     - e.g. assigning free variables
     - but must at least define a domain of discourse

Statement
  - often noted:
     - φ ψ ...
     - if sequence of statements: Γ Σ ...
  - also named closed formula, proposition or sentence
  - formula true|false under a given interpretation
  - requires no free variables
  - example: ∃ x,y. x > y

Open formula:
  - opposite of statement
  - formula neither true|false under a given interpretation
  - has at least one free variable
  - example: x > y

Satisfiability:
  - when formula true under at least one interpretation
  - opposite: unsastisfiability

Semantic validity:
  - also named tautology
  - when formula true under any intepretation
  - opposite: invalidity or contradiction

Logical symbols:
  - logical symbol:
     - also named logical constant or syncategorematic
     - semantics depend on formal language
     - same for any interpretation
     - examples:
        - true|false
        - logical operators, quantifiers
        - programming language keyword
        - punctuation
  - non-logical symbol:
     - also named categorematic or descriptive
     - semantics depend on domain of discourse
     - differ per interpretation
     - can be:
        - object
        - object property, e.g. relation|function|predicate
     - examples:
        - 3, e
        - relations|functions|predicates on domain of discourse
        - programming language value

Domain of discourse:
  - set of all possible semantics of any non-logical symbol for a given formal language
  - example: real numbers

Variability:
  - can be:
     - variable: many possible semantics
     - constant: only one semantic
  - variable|constant is logical or non-logical depending on the semantic it holds
     - examples:
        - logical constant: true
        - logical variable: x (boolean)
        - non-logical constant: 3
        - non-logical variable: x (number)
  - relations|functions|predicates are often constant, but can be variable too (e.g. in high-order functions)
  - bound variable with only one semantic left becomes constant
     - i.e. assigning specific value

Bound variable:
  - also named captured variables
  - variable interpreted with constraints
     - i.e. reduced number of possible semantics
  - free variable:
     - opposite
     - variable interpreted but without constraints
     - i.e. semantic can be any
        - if non-logical: from domain of discourse
  - variable-binding operator:
     - binds a variable in a formula
     - e.g. ∑ or quantifiers

Inference:
  - producing statements from other statements while preserving semantics (e.g. truth)

Deduction:
  - inference where premises are true

Induction:
  - inference where premises truth is not certain

Inference rule:
  - also named rule, rule of inference or transformation rule
  - rule to infer a statement from other statements using synctactic consequence

Admissibility:
  - when adding a specific inference rule to a formal system does not modify it
     - i.e  does not modify the semantics of any of its theorems

Derivability:
  - when an inference rule is admissible, and can be derived from a formal system axioms

Premise:
  - statement used to infer other statements

Axiom:
  - tautological premise

Theorem:
  - also named derivation
  - statement infered from a premise

Argument:
  - several premises and infered theorems

Conclusion:
  - last theorem of an argument

Deductive|inductive system:
  - set of deductive|inductive inference rules

Formal system:
  - notation:
     - subscript letter next to any logical symbols
        - e.g. ⊢fs (subscript)
  - formal language + deductive|inductive system

Proof system:
  - also called [proof] calculus
  - formal system + axioms
     - but deductive system is already axioms???

Logical form:
  - removing ambiguity of natural language by formalizing it
  - involves:
     - declaring it using inference rules of a formal system
        - using unambiguous words, not logical symbols
     - using non-logical symbols for semantic contents
  - argument form: logical form on an argument

Consequence:
  - logical or material consequence

Antecedent:
  - also named protasis
  - first half of consequence

Consequent:
  - also named succedent or apodosis
  - second half of consequence

Unconditional assertion:
  - like any consequence, but with empty antecedent
     - means antecedent is assumed to be true
     - example: ⊢ y
     - i.e. like ⊤ ⊢ y
  - opposite:
     - conditional assertion
     - when there is an antecedent
     - example: x ⊢ y
  - inverse:
     - when no consequent
     - means antecedent is assumed to be false
     - example: x ⊢
     - i.e. like x ⊢ ⊥
  - neither consequent|antecedent:
     - means contradiction
     - example: ⊢
     - i.e. like ⊤ ⊢ ⊥

Sequent:
  - notation for consequence where comma means:
     - ∧ in antecedent
     - ∨ in consequent
  - example: v, w, x ⊢ y, z
  - intuitionistic:
     - also named simple conditonal assertion
     - when not using comma in consequent
     - dual-intuitionistic: when not using comma in antecedent either

Logical consequence:
  - also named entailment or logical implication
  - inference rule where, in a specific formal system, if any statement x is true, then any statement y is true
  - as opposed to material conditional which is, for a given statement x true, another statement y is true
  - either synctactic consequence or semantic consequence

Synctatic consequence:
  - also named derivability|provability
  - notation:
     - x ⊢ y
        - named turnstile, tee sign, right tack, assertion sign|symbol
        - sometimes written x |- y
     - x ∴ y (therefore sign)
     - x => y (to avoid)
     - horizontal line, when x and y are statements
  - pronounced x entails|proves|yields|satisfies y, or y is a theorem of x
  - logical consequence based only on synctatic rules without interpretation
  - examples: using logical connectors

Semantic consequence:
  - notation:
     - x ⊨ y (double turnstile sign)
  - pronounced x models y
  - logical consequence when, for any interpretation where statement x is true, statement y is true as well
     - as opposed to synctactic consequence, relies on statements truth among interpretations

Material consequence:
  - also named [material] conditional, material implication or hypothetical proposition
  - notation:
     - x -> y
     - x => y (to avoid)
     - x ⊃ y
     - Cxy
  - pronounced: materially implies, or if x then y
  - means when x is true, y is true
  - is for a given interpretation, as opposed to semantic consequence (which is for any interpreations)

Modus ponens:
  - also named MP
  - inference rule: (⊢x, x->y) ⊢ (⊢y)

Soundness of a formal system:
  - when every syntactically valid formula is semantically valid
  - i.e. if x ⊢ y then x ⊨ y

Completeness of a formal system:
  - when every semantically valid formula is syntactically valid
  - i.e. if x ⊨ y then x ⊢ y

Quantifier:
  - operator asserting truth of a formula for a collection of variables
  - variable-binding operator since it asserts possible semantics of variables
  - universal quantifier:
     - noted ∀ VAR[,...]. FORMULA
     - means FORMULA is true for all combinations of VAR,...
  - existential quantifier:
     - noted ∃ VAR[,...]. FORMULA
     - means FORMULA is true for at least one combination of VAR,...

Logical operators:
  - also named sentential|logical operators|connective
  - operator whose domain|codomain are logical symbols

Boolean domain:
  - notation:
     - B
     - {⊤,⊥}
        - ⊤ sign is named tee, verum or down tack
        - ⊥ sign is named falsum or up tack
     - {0,1}
     - {true,false}
  - set with two elements representing true and false

Boolean function:
  - also named switching function
  - when domain and codomain are boolean

Negation
  - also named "not"
  - notation:
     - !x
     - ~x
  - f(x) = y, where y is true|false if x is false|true

Conjunction:
  - also named "and"
  - notation:
     - x ∧ y
     - x & y
     - x && y
  - f(x,y) = z, where z is true if both x and y are true, false otherwise

Disjunction:
  - also named "or"
  - notation:
     - x ∨ y
     - x | y
     - x || y
  - f(x,y) = z, where z is false is both x and y are false, true otherwise
