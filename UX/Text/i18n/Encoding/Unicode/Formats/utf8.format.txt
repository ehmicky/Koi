
        
   UTF8  
        

UTF-8                   #UTF-8 permet d'afficher tout caractère Unicode, tout en
                        #restant compatible avec ASCII.
                        #Unix (sauf Mac OS X) est UTF-8

CONVERSION HEXA->UNICOD #En effet, UTF-8 permet d'utiliser des suites d'octets.
                        #Si un octet est compris entre 00 et 7F, il est compris
                        #comme un ASCII normal. S'il est compris entre C0 et FF,
                        #il s'agit d'une clef indiquant que lui et les 1, 2 ou
                        #3 octets le suivant formeront un groupe d'octets pour
                        #un seul caractère.
                        #Une suite octet commençant par :
                        #  - 00 à 7F sera donc un seul octet ASCII (pas de
                        #    conversion)
                        #  - 80 à BF est un octet suivant une clef dans un
                        #    groupe d'octets
                        #  - C2 à DF sera une suite de deux octets
                        #  - E0 à EF sera une suite de trois octets
                        #  - F0 à F4 sera une suite de quatre octets
                        #Les octets suivants la clef dans le groupe d'octet
                        #seront toujours dans le range 80-BF
                        #
                        #Ainsi des octets peuvent être invalides pour UTF-8 :
                        #  - Un octet C0 ou C1 et l'octet le suivant sera
                        #    parfois compris (en suivant de l'implémentation
                        #    d'UTF-8) comme un groupe de deux octets ayant donc
                        #    pour valeur un caractère ASCII. Cependant, cela
                        #    est invalide.
                        #  - Une clef ainsi que les octets de range 80-BF la
                        #    suivant (ou non) si leur nombre est inférieur à
                        #    celui requis par la clef
                        #  - Un octet de range 80-BF non compris dans un groupe
                        #    d'octets commençant par une clef
                        #  - Un octet de range F5-FF.
                        #Un octet invalide sera non traité, remplacé par � ? ¿
                        #ou un rectangle affichant son codepoint Unicode, ou
                        #affiché comme s'il faisait partie d'un autre charset
                        #
                        #Cette suite est ensuite converti en un code point
                        #Unicode (voir doc)

ENDIANNESS ==>          #Les groupes d'octets ne sont pas affectés par
                        #l'endianness car traités comme des words isolés (donc
                        #lus et écrit toujours de gauche à droite)
BOM ==>                 #Il est donc inutile d'ajouter un BOM (Byte Order Mark,
                        #suite d'octets, qui en fonction de sa lecture en
                        #UTF-16 sert à détecter l'endianness), c'est même non
                        #recommandé par Unicode
                        #Le BOM est en fait un caractère Unicode dont l'encodage
                        #par UTF-16 et UTF-8 diffère donc. Il est cependant
                        #inutile en UTF-8 (0xef 0xbb 0xbf, désignant U+FEFF).
                        #Cependant, de nombreux logiciels Windows (dont Notepad)
                        #en début d'un document UTF-8, ce qui peut provoquer
                        #des problèmes notamment dans l'univers Unix (non
                        #interprétation du shebang par exemple)
                        #Il pourra par ailleurs induire une lecture en Latin1,
                        #inscrivant alors ï»¿ en début du document.

CESU-8 ==>              #CESU-8 est un encodage mixte entre UTF-8 et UTF-16,
                        #peu utilisée
MODIFIED UTF-8  ==>     #Il existe une variante de CESU-8 nommée "Modified
                        #UTF-8" qui permet d'utiliser le groupe d'octets C0 80
                        #pour indiquer un null. Ainsi il est possible d'utiliser
                        #le null ASCII 00 pour terminer une C-STRING tout en
                        #mettant des null C0 80 dans la C-STRING. Java utilise
                        #parfois UTF-16, parfois Modified UTF-8

CONVERSIONS ==>         #Voici les conversions :
                        #  - le minimum et le maximum indiqué avant la
                        #    conversion est fait lettre par lettre et non octet
                        #    par octet
                        #  - le minimum et le maximum indiqué après la
                        #    conversion est celui de l'ensemble des octets
                        #    ensemble.
                        #Voici donc :

                        C2 à DF : CLEF POUR DEUX OCTETS

Min (pour chaque lettre)        C0  80      (C0 et C1 sont illégaux pour le
Max (pour chaque lettre)        DF  BF      premier octet)
Départ                         xx  xx
                 /-------------/-|  | \-------\
                 |            /  |  v         |
                 |   C D  <--/   |  8 9 A B   |
                 v               v            |
               0123  0 4      048C  0 1 2 3   |
               4567  1 5      159D  4 5 6 7   |
               89AB  2 6      26AE  8 9 A B   |
               CDEF  3 7      37BF  C D E F   |
                      |              /        |
                      \---------\   / /-------/
                                 \  |/
                                 |  ||
                                 v  vv
Conversion                      0x  xx
Min (pour l'ensemble)           00  80
Max (pour l'ensemble)           07  FF

EXPLICATION ==>         #Le code UTF commence donc à C2 80 et finit à DF BF, en
                        #sachant que le deuxième octet ne peut pas sortir du
                        #range 80-BF.
                        #ainsi C2 80 correspond à 00 80
                        #      C2 A3 à 00 A3
                        #      C3 80 à 00 C0
                        #      C4 80 à 01 00
                        #      D0 80 à 04 00
                        #      etc.

                        E0 à EF : CLEF POUR TROIS OCTETS

Min (pour chaque lettre)    E0  80  80   (si le premier octet est E0, le 2ème
Max (pour chaque lettre)    EF  BF  BF   octet a un min de A0)
Départ                     xx  xx  xx
                             | / |  | \
            /---------------/-/--|  |  \------\
            |              / /   |  v         |
            |   8 9 A B <-/-/    |  8 9 A B   |
            v             |      v            |
          0123  0 4 8 C   |   048C  0 1 2 3   |
          4567  1 5 9 D   |   159D  4 5 6 7   |
          89AB  2 6 A E   |   26AE  8 9 A B   |
          CDEF  3 7 B F    \  37BF  C D E F   |
                     |      \        /        |
                      \------\--\   / /-------/
                              \  \  |/
                               \ |  ||
                                vv  vv
Conversion                      xx  xx
Min (pour l'ensemble)           08  00
Max (pour l'ensemble)           FF  FF

                        F0 à F4 : CLEF POUR QUATRE OCTETS

Min (pour chaque lettre)       F0  80  80  80
Max (pour chaque lettre)       F4  BF  BF  BF
Départ                        xx  xx  xx  xx
                       ________/ _//   ||  | \
                      |        _/ / /--|+--|--\------\
           ___________|_______/  / /   |    \_ \__    \
          |           v         /  |   v      \_  \   |
          |  0  1  2  3  4     /   |   8 9 A B  \-|---|--> 8 9 A B
          v                   /    v              |   v
          8  00 04 08 0C 10   |  0123  0 4 8 C    |  048C  0 1 2 3
          9  01 05 09 0D      |  4567  1 5 9 D    |  159D  4 5 6 7
          A  02 06 0A 0E      |  89AB  2 6 A E    |  26AE  8 9 A B
          B  03 07 0B 0F      |  CDEF  3 7 B F    |  37BF  C D E F
                    |         |         |         |           |
                    \_______  |________ |   ______|___________|
                            \_______   ||  | _____|
                                   ||  ||  ||
                                   vv  vv  vv
Conversion                         xx  xx  xx
Min (pour l'ensemble)              01  00  00
Max (pour l'ensemble)              10  FF  FF

CONVERSION UNICOD->HEXA #De même, un code point entre 00 et 7F n'aura pas
                        #besoin de conversion.
                        #Voici les conversions :
                        #  - chaque paire de nombres à gauche indique un octet
                        #    du range Unicode. Le premier nombre indique la
                        #    valeur minimale, le deuxième le maximum. Cependant,
                        #    il s'agit du minimum et du maximum de l'ensemble
                        #    d'octets total, et non de l'octet lui-même ou des
                        #    lettres le composant. Ainsi un octet indiquant
                        #    08-FF pourrait très bien être un 03, si un autre
                        #    octet le précède.
                        #  - RIEN indique qu'il n'y a pas d'octet au départ ici,
                        #    mais qu'un octet supplémentaire est ajouté par
                        #    UTF-8
                        #  - A droite de chaque octet est écrit la conversion
                        #    Le résultat pour le "1er chiffre :" ou le "2ème
                        #    chiffre :" est indiqué ainsi.
                        #    Le chiffre utilisé pour connaître ce résultat est
                        #    indiqué entre parenthèses s'il ne s'agit pas du
                        #    même chiffre (par défaut)
                        #  - 0123->C signifie "si le chiffre utilisé pour
                        #    connaître le résultat est 0, 1, 2 ou 3, alors le
                        #    résultat sera C"

                        C2 à DF : CLEF POUR DEUX OCTETS

00-07       1er chiffre (en fonction du deuxième chiffre) :
            0123->C
            4567->D
            2ème chiffre :
            04->0
            15->4
            26->8
            37->C
80-FF       1er chiffre :
            0-3->8-B, et on ajoute rien à l'octet précédent
            4-7->8-B, et on ajoute un à l'octet précédent
            8-B->8-B, et on ajoute deux à l'octet précédent
            C-F->8-B, et on ajoute trois à l'octet précédent
            2ème chiffre :
            Le même

                        E0 à EF : CLEF POUR TROIS OCTETS

RIEN        1er chiffre :
            E
            2ème chiffre (en fonction du 1er chiffre de l'octet suivant) :
            Ce chiffre
08-FF       1er chiffre (en fonction du deuxième chiffre) :
            0123->8
            4567->9
            89AB->A
            CDEF->B
            2ème chiffre :
            048C->0
            159D->4
            26AE->8
            37BF->C
00-FF       1er chiffre :
            0-3->8-B, et on ajoute rien à l'octet précédent
            4-7->8-B, et on ajoute un à l'octet précédent
            8-B->8-B, et on ajoute deux à l'octet précédent
            C-F->8-B, et on ajoute trois à l'octet précédent
            2ème chiffre :
            Le même

                        F0 à F4 : CLEF POUR QUATRE OCTETS

VIDE        1er chiffre :
            F
            Deuxième chiffre (en fonction des deux chiffres de l'octet
            suivant):
            00 01 02 03->0
            04 05 06 07->1
            08 09 0A 0B->2
            0C 0D 0E 0F->3
            10->4
01-10       1er chiffre (en fonction du deuxième chiffre) :
            048C->8
            159D->9
            26AE->A
            37BF->B
            2ème chiffre (en fonction du premier chiffre de l'octet suivant) :
            Le même
00-FF       1er chiffre (en fonction du deuxieme chiffre) :
            0123->8
            4567->9
            89AB->A
            CDEF->B
            2ème chiffre :
            048C->0
            159D->4
            26AE->8
            37BF->C
00-FF       1er chiffre :
            0-3->8-B, et on ajoute rien à l'octet précédent
            4-7->8-B, et on ajoute un à l'octet précédent
            8-B->8-B, et on ajoute deux à l'octet précédent
            C-F->8-B, et on ajoute trois à l'octet précédent
            2ème chiffre :
            Le même
