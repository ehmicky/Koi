
                         
   ROADMAP-TEST-EXAMPLES  
                         



Own package

Programming language agnostic:
  - execution: shabang
  - IPC: standard streams

Has own binary

Examples must be:
  - published
  - runnable:
     - i.e. `require()` might be different from what users would do outside of example
     - but users should be able to run them directly
     - i.e. tests will be able to run them too
  - without prior knowledge:
     - shebang
     - no way to pass arguments to interpreter
     - command should allow passing 0 arguments and no stdin:
        - arguments and stdin are ok providing they are optional

PWD:
  - unchanged and there are no options to change it
  - user should instead change PWD beforehand.

options.files GLOB[_ARR]
  - example files to run/test
     - directory are recursed over
  - def: "./{example,examples}/**", "!*.{md,txt,...}"
     - try to find library with common file extensions and exclude/include accordingly

options.stream:
  - which stream to snapshot
     - also which one to filter out and check for "ready"
  - "both" (def), "stdout", "stderr" or NUM

options.filter REGEXP_ARR
  - filter out part of the output from snapshot
  - line-wise
     - newline is either \n or \r\n
  - goal: unpredictable output like PID, current time or file paths

Output order:
  - should not fail if snapshot differs only by line order
  - reason: it might be unpredictable

"Ready":
  - reads output and when a line is only printing "ready", kill the process
  - reason: long-running examples like servers
  - normalize "ready" to lowercase and remove anything but letters

options.timeout NUM (def: 5 mins)

options.maxConcurrency NUM

Specific error message when:
  - no executable permission
  - no shabang
  - shabang command not available
     - responsability of caller to select files according to current OS, e.g. *.cmd only on Windows, or runtine version, e.g. Node.js

Use in my own tests:
  - use binary
  - should be run separately with gulp after gulp unit
     - reason: gulp unit gives more precise errors
