
                         
   ROADMAP-TEST-EXAMPLES  
                         



Own package

Programming language agnostic:
  - execution: user specifies the interpreter (if any)
  - IPC: standard streams
  - should use JavaScript in examples and Medium articles, but warn that any language is possible
  - installation:
     - should link to how to install Node
     - should use a OS packaging library (see to_learn)

Has own binary

Should rely on ava:
  - fire through binary not programmatic
  - should disable Babel and Power assert
  - should forward its status code and stdout|stderr

Encourages examples to be:
  - runnable:
     - from any directory
  - quick to run:
     - published with package
     - available online playgrounds
  - interactive:
     - should allow editing files and/or recompiling
     - should work well with online playgrounds
  - without prior knowledge:
     - avoid passing arguments to interpreter
     - command should allow passing 0 arguments and no stdin:
        - arguments and stdin are ok providing they are optional
     - print results
     - avoid compile step if possible
         - if necessary, make it as simple as possible
  - easy to understand:
     - no polluting with test setups and assertions
  - updated:
     - in sync with code
     - in sync with rest of documentation
  - tested

opts.cwd 'DIR':
  - def: process.cwd()
  - use to resolve opts.examples|doc|snapshotDir|watch

examples "[PROGRAM[ ARGS... ]=]GLOB"[_ARR]
  - positional argument, required, no default values
     - can be done several times with same PROGRAM|ARGS
     - on CLI: variadic argument
  - example files to run/test
     - directory are recursed over
  - if no PROGRAM, fired directly (e.g. binary or script with shabang)
  - should discourage (in documentation) using ARGS as it requires prior knowlege

Always snapshot exit code:
  - if null, should normalize to 1
     - this can happen when process is killed with a signal

options.stream:
  - which stream to snapshot
     - also which one to filter out and check for "ready"
  - "both" (def), "stdout", "stderr" or NUM

opts.snapshotDir "DIR":
  - passed to ava
  - def: "PWD/examples_snapshots"??? or "PWD/LIBRARY_NAME"???

opts.update BOOL:
  - update snapshots (passed to ava)
  - def: false

options.filter REGEXP[_STR]_ARR
  - filter out part of the output from snapshot
  - goal: unpredictable output like PID, current time or file paths
  - line-wise:
     - newline is either \n or \r\n
        - do it by replacing all \r\n to \n
        - then using REGEXP on whole output with 'm' flag and removing 's' flag
  - don't document that REGEXP_STR is possible
     - it's only used for CLI input
  - flags:
     - if REGEXP_STR: add 'i', 'g', 'm', 'u' flags
     - if REGEXP: add 'g', 'm' flags, remove 's' flag, keep other flags as is
        - do it by cloning REGEXP

Output order:
  - should not fail if snapshot differs only by line order
  - reason: it might be unpredictable

"Ready":
  - reads output and when a line is only printing either "ready" or "done", kill the process
  - reason: long-running examples like servers
  - normalize "ready|done" to lowercase and remove anything but letters

options.timeout NUM (def: 5 mins)

options.maxConcurrency NUM

Specific error message when:
  - no executable permission
  - command not available
     - responsability of caller to select files according to current OS, e.g. *.cmd only on Windows, or runtine version, e.g. Node.js

Sync check:
  - validate that examples and documentation are in sync
  - in example file, line with comment "example of ID"
     - case-insensitive
     - whitespace-insensitive
     - must start with that
     - discard non alphanumeric chars
        - i.e. works with any language comments
  - in documentation Markdown files (e.g. README):
     - HTML comment "example of ID" before code block
        - does not have to be right before (e.g. there can be an eslint-disable comment in-between)
     - uses options.doc GLOB_ARR:
        - directory are recursed over
        - def: *.md + {doc,docs,documentation,example,examples}/**/*.md
     - only Markdown files
        - other formats (e.g. HTML, RST, AsciiDoc, RTF, TeX) not implemented yet, but can do it in future
           - i.e. should make it easy to add new formats

opts.reporter STR:
  - can be:
     - "mini": def Ava reporter
     - "spec": ava --verbose
     - "tap"
  - same default logic as ava (i.e. "spec" if CI or not tty)

opts.colors: same as ava

opts.watch:
  - "GLOB"_ARR
     - passed to ava opts.sources and opts.watch
     - can be BOOL (def: false) where true which defaults to common top-level source/build directory names
     - unless false, opts.examples|doc are always added
  - sync checks must be part of each unit test so they are re-fired on watch
  - stdin must work (e.g. "u" to update snapshots)

Use in my own tests:
  - use binary
  - should be used as "gulp example[w]"
     - fired after gulp unit
        - reason: gulp unit gives more precise errors
     - should be well documented
     - CONTRIBUTING.md should mention examples are tested

Do not mention shabangs in documentation nor Medium article:
  - reasons:
     - do not work on Windows
     - some languages do not support them (e.g. Windows Batch files)
     - do not allow multiple possible interpreters per file
