
                         
   ROADMAP-TEST-EXAMPLES  
                         



Own package

Programming language agnostic:
  - execution: shabang
  - IPC: standard streams
  - should use JavaScript in examples and Medium articles, but warn that any language is possible
  - installation:
     - should link to how to install Node
     - should use a OS packaging library (see to_learn)

Has own binary

Examples must be:
  - published
  - runnable:
     - i.e. `require()` might be different from what users would do outside of example
     - but users should be able to run them directly
     - i.e. tests will be able to run them too
  - without prior knowledge:
     - shebang
     - no way to pass arguments to interpreter
     - command should allow passing 0 arguments and no stdin:
        - arguments and stdin are ok providing they are optional

PWD:
  - unchanged and there are no options to change it
  - user should instead change PWD beforehand.

options.examples GLOB[_ARR]
  - example files to run/test
     - directory are recursed over
  - def: "./{example,examples}/**", "!*.{md,txt,...}"
     - try to find library with common file extensions and exclude/include accordingly

Always snapshot exit code

options.stream:
  - which stream to snapshot
     - also which one to filter out and check for "ready"
  - "both" (def), "stdout", "stderr" or NUM

options.filter REGEXP[_STR]_ARR
  - filter out part of the output from snapshot
  - goal: unpredictable output like PID, current time or file paths
  - line-wise:
     - newline is either \n or \r\n
        - do it by replacing all \r\n to \n
        - then using REGEXP on whole output with 'm' flag and removing 's' flag
  - don't document that REGEXP_STR is possible
     - it's only used for CLI input
  - flags:
     - if REGEXP_STR: add 'i', 'g', 'm', 'u' flags
     - if REGEXP: add 'g', 'm' flags, remove 's' flag, keep other flags as is
        - do it by cloning REGEXP

Output order:
  - should not fail if snapshot differs only by line order
  - reason: it might be unpredictable

"Ready":
  - reads output and when a line is only printing either "ready" or "done", kill the process
  - reason: long-running examples like servers
  - normalize "ready|done" to lowercase and remove anything but letters

options.timeout NUM (def: 5 mins)

options.maxConcurrency NUM

Specific error message when:
  - no executable permission
  - no shabang
  - shabang command not available
     - responsability of caller to select files according to current OS, e.g. *.cmd only on Windows, or runtine version, e.g. Node.js

Sync check:
  - validate that examples and documentation are in sync
  - in example file, line with comment "example of ID"
     - case-insensitive
     - whitespace-insensitive
     - must start with that
     - discard non alphanumeric chars
        - i.e. works with any language comments
  - in documentation Markdown files (e.g. README):
     - HTML comment "example of ID" before code block
        - does not have to be right before (e.g. there can be an eslint-disable comment in-between)
     - uses options.doc GLOB_ARR:
        - directory are recursed over
        - def: *.md + {doc,docs,documentation}/**/*.md
     - only Markdown files
        - other formats (e.g. HTML, RST, AsciiDoc, RTF, TeX) not implemented yet, but can do it in future
           - i.e. should make it easy to add new formats

Use in my own tests:
  - use binary
  - should be run separately with gulp after gulp unit
     - reason: gulp unit gives more precise errors
