
                 
   ROADMAP DEMOO  
                 



git-clone-files (separate project):
  - GIT-CLONE-FILES(REPO_URL, GLOB[_ARR][, OPTS])->PROMISE
     - also on CLI
  - does:
     - git clone --depth 1 REPO_URL
        - to location OPTS.dest 'DIR' (def: process.cwd())
     - only files keeps GLOB[_ARR]
     - find a single root, then removes it and its parent, while keeping children
        - i.e. flattens the tree structure
  - as opposed to similar packages:
     - git host independent (not only GitHub)
     - works on Windows, i.e. no Bash

trylib (separate project):
  - how to change $PATH since cannot change parent env???
     - whichever solution to this: might use it to directly cd into examples dir
     - installing globally might help??? can do npx -g???
  - called "trylib"??? trypack??? trythis??? tpx??? tpm??? trymodule???
  - usage: trylib PKG...
     - PKG is the same syntax as npm install PKG
     - can specify several PKG
  - steps:
     - if not already existing (i.e. on first run):
        - create a temporary directory at `${os.temp()}/trylib/`
        - create a `package.json`:
           - no `dependencies`
     - run `npm install --no-save --no-package-lock --no-update-notifier PKG...` inside that directory
        - also do it on any peerDependencies
     - add /TEMP/trylib/node_modules/.bin/ to $PATH
     (next two in parallel)
     - if opts.repl BOOL true:
        - start a Node REPL with `const VAR = require(MAIN);...`
           - using `package.json` `main` field
           - VAR is camelCase of MAIN
           - throw error if no `main` field or path does not resolve
           - one require() for each PKG
        - def: true if `package.json` `main` exists, but not `bin`
     - if there are examples:
        - "there are examples" is either:
           1) `example|examples` directory exists, move it
           2) `package.json` `directories.example` defined to a non-empty string
              - git-clone-files examples subdir
              - use `package.json` `repository` field, and only make it work with `git` for now
        - to /TEMP/trylib/PKG/
           - PKG is slugified
           - if already exists, overwrite it
        - print that examples are available, and their location
        - for each PKG
        - only support self-contained examples (not if reference outside of their directory)
           - also if they have other dependencies (except peerDependencies), must manually install them
  - cache npm install and git clone ???
  - use in all my examples

Goal:
  - enforce code examples that are:
     - easy to understand:
        - avoid passing arguments to interpreter
        - command should allow passing 0 arguments and no stdin:
           - arguments and stdin are ok providing they are optional
        - print results
        - no polluting with test setups and assertions
     - interactive:
        - separate full file (not just README sample), runnable and editable
           - should work well with online playgrounds
     - correct:
        - tested and in sync with code
           - do it with snapshot testing of output
  - focus on full examples, not just README samples
     - README samples are only tested by including them into full examples

For Node.js only

Has own binary

Enforce no other deps than production deps???
  - what about peerDeps???

Should rely on ava:
  - fire through binary not programmatic
  - should disable Babel and Power assert
  - should forward its status code and stdout|stderr

opts.cwd 'DIR':
  - def: process.cwd()
  - use to resolve opts.examples|doc|snapshotDir|watch

opts.examples "GLOB"[_ARR]
  - example files to run/test
     - directory are recursed over
  - def:
     - `package.json` `directories.example` if defined
     - otherwise ['example', 'examples']
     - otherwise error
  - only matches either:
     - *.js|mjs, fired with `node`
     - *.sh, fired with `bash`
  - no arguments passed to interpreter or to command

Always snapshot exit code:
  - if null, should normalize to 1
     - this can happen when process is killed with a signal

options.stream:
  - which stream to snapshot
     - also which one to filter out and check for "ready"
  - "both" (def), "stdout", "stderr" or NUM

opts.snapshotDir "DIR":
  - passed to ava
  - def: "PWD/examples_snapshots"??? or "PWD/LIBRARY_NAME"???

opts.update BOOL:
  - update snapshots (passed to ava)
  - def: false

options.filter REGEXP[_STR]_ARR
  - filter out part of the output from snapshot
  - goal: unpredictable output like PID, current time or file paths
  - line-wise:
     - newline is either \n or \r\n
        - do it by replacing all \r\n to \n
        - then using REGEXP on whole output with 'm' flag and removing 's' flag
  - don't document that REGEXP_STR is possible
     - it's only used for CLI input
  - flags:
     - if REGEXP_STR: add 'i', 'g', 'm', 'u' flags
     - if REGEXP: add 'g', 'm' flags, remove 's' flag, keep other flags as is
        - do it by cloning REGEXP
  - always filter out stack traces (not error messages)

Output order:
  - should not fail if snapshot differs only by line order
  - reason: it might be unpredictable

"Ready":
  - reads output and when a line is only printing either "ready" or "done", kill the process
  - reason: long-running examples like servers
  - normalize "ready|done" to lowercase and remove anything but letters

options.timeout NUM (def: 5 mins)

options.maxConcurrency NUM

Sync check:
  - validate that examples and documentation are in sync
  - in example file, line with comment "example of ID"
     - case-insensitive
     - whitespace-insensitive
     - must start with that
     - discard non alphanumeric chars
        - i.e. works with any language comments
  - in documentation Markdown files (e.g. README):
     - HTML comment "example of ID" before code block
        - does not have to be right before (e.g. there can be an eslint-disable comment in-between)
     - uses options.doc GLOB_ARR:
        - directory are recursed over
        - def: *.md + {doc,docs,documentation,example,examples}/**/*.md
     - only Markdown files
        - other formats (e.g. HTML, RST, AsciiDoc, RTF, TeX) not implemented yet, but can do it in future
           - i.e. should make it easy to add new formats

Module mocking:
  - *.js:
     - mock require('LIBRARY') and node -r LIBRARY/*
     - probably do it by requiring some code first with -r flag
     - use a require() mocking library
     - should point to package root
  - *.sh:
     - parse `package.json` `bin` field
        - if does not exist, noop
     - use those to define `alias LIBRARY='...'`
        - make sure it works on Windows

opts.reporter STR:
  - can be:
     - "mini": def Ava reporter
     - "spec": ava --verbose
     - "tap"
  - same default logic as ava (i.e. "spec" if CI or not tty)

opts.colors: same as ava

opts.watch:
  - "GLOB"_ARR
     - passed to ava opts.sources and opts.watch
     - can be BOOL (def: false) where true which defaults to common top-level source/build directory names
     - unless false, opts.examples|doc are always added
  - sync checks must be part of each unit test so they are re-fired on watch
  - stdin must work (e.g. "u" to update snapshots)

Use in my own tests:
  - use binary
  - do not publish examples anymore:
     - change examples/README.md and each example top comment
        - see unix-permissions and examples/contain.js|sh for how it should look (I started it)
     - in package.json remove "examples" and "*~" (if no publish)
  - remove examples/utils.js|sh
  - should be used as "gulp example[w]"
     - fired after gulp unit
        - reason: gulp unit gives more precise errors
     - should be well documented
     - CONTRIBUTING.md should mention examples are tested

Do not mention shabangs in documentation nor Medium article:
  - reasons:
     - do not work on Windows
     - some languages do not support them (e.g. Windows Batch files)
     - do not allow multiple possible interpreters per file

Catchphrase: "Write code examples even a cow would understand"

Logo:
  - cow font, no icon
  - use no-cow font then blend with free for commercial usage cow patterns (cause i cant find any such cow font).

Medium article:
  - "How to write code examples for your grandma"
     - i.e. also talk about how to start with synopsis then quick options then full API the  full example. Also use online playground.
  - feature picture: some geeky grandma
     - maybe use the grandma computer meme and write some pun about cookies
        - "let me teach you about cookies"
  - can start with "Poor documentation is the number one problem with open-source according to the survey ..." (https://opensourcesurvey.org/2017/)
  - can include sentences: "Developers speak code", "Holy cow"
  - use same points as demoo goals, plus the extra following ones:
     - "how to run in terminal" instructions
     - available online playgrounds
     - avoid compile step if possible
        - if necessary, make it as simple as possible
