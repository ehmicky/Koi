
                            
   ROADMAP-UNIX-PERMISSIONS  
                            



Windows behavior for everything below???
  - including root / Windows admin (see is-elevated and is-root utilities)
  - including FD_NUM
  - including uid|gid

getUserClass(FILE)->PROMISE_CAT
  - separate into own utility???
  - FILE is STR|BUFFER|URL|FD_NUM|STAT
  - if file does not exist -> 'user'
  - otherwise:
     - if process.geteuid() === STAT.uid -> 'user'
     - if process.getgroups() or process.getegid() === STAT.gid -> 'group'
     - otherwise -> 'others'

Permissions:
  - if root: bypass all checks
  - if file exists:
     - can read: +r, parentDir+ancestors +x
     - can write: +w, parentDir+ancestors +x
     - can execute: +x, parentDir+ancestors +x
     - can delete:
        - parentDir +w, parentDir+ancestors +x
        - if parentDir or ancestor has +t: must be file's owner or directory's owner
  - if file does not exist (excluding "can create"):
     - can read: umask allows read
     - can write: umask allows write
     - can execute: umask allow execute
     - can delete:
        - if parentDir exists: parentDir +w, parentDir+ancestors +x
        - otherwise:
           - firstParentDir +w, firstParentDir+ancestors +x
           - if firstParentDir is not directParentDir, umask must allow write|execute
  - whether file exists or not:
     - can create:
        - firstParentDir +w, firstParentDir+ancestors +x
        - if firstParentDir is not directParentDir, umask must allow write|execute

fs.access() works for checking +r +w +x and "file exists" on file|directory???

Todo:
  - `object` special flags should be in OBJ.special.setuid|setgid|sticky instead of OBJ.read|write|execute.*
  - `select|deselect` for special flags:
     - `object`: { read|write|execute|setuid|setgid|sticky BOOL }
     - `octal|number`: extra digit for all special flags
     - `stat`: `rwxszt`
     - `symbolic`: `+rwxszt`
  - `symbolic` can use `ugo` as a permission character:
     - e.g. `u+g` means "add all permissions from `group`"
        - excluding special permissions
     - only a single character, e.g. `u+gg`, `u+go` and `u+gw` are invalid
     - if several comma-separated group, does each in order (including `o+u,o+g` or `o+u,o-r`)
  - `chmod` has particular behavior for `setuid` and `setgid` on directories:
     - `octal` can only set them, but not unset them
     - `symbolic` with `=` does not modify them
  - any `chmod` unsets `setgid` if current `gid` does not match file's owning group
  - `+X` is noop if "u", "g" and "o" do not have "x" and is not a directory

1.0.0

file-permissions repo
