
                            
   ROADMAP-UNIX-PERMISSIONS  
                            



Permissions:
  - Windows behavior???
  - if root (or Windows admin???) (see is-elevated and is-root utilities), bypass all checks
  - if file exists:
     - can read: +r, parentDir+ancestors +x
     - can write: +w, parentDir+ancestors +x
     - can execute: +x, parentDir+ancestors +x
     - can delete:
        - parentDir +w, parentDir+ancestors +x
        - if parentDir or ancestor has +t: must be file's owner or directory's owner
  - if file does not exist (excluding "can create"):
     - can read: umask allows read
     - can write: umask allows write
     - can execute: umask allow execute
     - can delete:
        - if parentDir exists:
           - parentDir +w, parentDir+ancestors +x
        - otherwise:
           - firstParentDir +w, firstParentDir+ancestors +x
           - if firstParentDir is not directParentDir, umask must allow write|execute
  - whether file exists or not:
     - can create:
        - firstParentDir +w, firstParentDir+ancestors +x
        - if firstParentDir is not directParentDir, umask must allow write|execute

getOwnClass():
  - if file exists:
     - if process.geteuid() === STAT.uid -> 'user'
     - if process.getgroups() or process.getegid() === STAT.gid -> 'group'
     - otherwise -> 'other'
  - if file does not exist: always owned by 'user'

fs.access() works for checking +r +w +x and "file exists" on file|directory

Todo:
  - `object` special flags should be in OBJ.special.setuid|setgid|sticky instead of OBJ.read|write|execute.*
  - `select|deselect` for special flags:
     - `object`: { read|write|execute|setuid|setgid|sticky BOOL }
     - `octal|number`: extra digit for all special flags
     - `stat`: `rwxszt`
     - `symbolic`: `+rwxszt`

Missing behavior:
  - `symbolic` can use `ugo` as a permission character:
     - e.g. `u+g` means "add all permissions from `group`"
     - only a single character, e.g. `u+gg`, `u+go` and `u+gw` are invalid
  - `chmod` has particular behavior for `setuid` and `setgid` on directories:
     - `octal` can only set them, but not unset them
     - `symbolic` with `=` does not modify them
  - any `chmod` unsets `setgid` if current `gid` does not match file's owning group
  - `+X` is noop if "u", "g" and "o" do not have "x" and is not a directory

node.add "user|group|others"[_ARR]:
  - set():
     - take from first argument
     - if several CAT, takes max
  - contains(), equal(), positive(): keep as is
  - not(), min|max(): undefined
  - serialize[Category]():
     - object: as is
     - symbolic:
        - how to prevent serializing to things like a+gu which is not valid with chmod??? does not allow it with symbolic parsing except for X???
        - only serialize to X with execute permission
     - others: same as undefined
  - parse[Category]():
     - object: as is
     - symbolic:
        - permission "u|g|o" -> add: "user|group|others" for each permission (including special permissions??? check chmod behavior, including dir vs non-dir)
        - "X" -> add: "user group others", permission: "execute"
        - a+u,a+r, a+u,a-r or a+u,a+g: check chmod behavior, and accordingly allow mixing them in same part (unlike chmod) and normalize so that there is only one node per category + permission
     - object and symbolic:
        - duplicates are removed
        - empty array -> false
     - others: not used

1.0.0

file-permissions repo
