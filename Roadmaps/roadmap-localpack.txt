
                     
   ROADMAP-LOCALPACK  
                     



Check npm link works
  - npm link %CD% or npm link "$PWD"
  - use it everywhere
  - remove `localpack` from `.gitignore`
  - fix gulp FILES.json

which-package-manager:
  - abstract npm/yarn/pnpm detection
  - unless already exists

Package to retrieve list of published files
  - do it by doing npm pack --dry-run, yarn pack, etc.

Package to help building list of published files:
  - print list of included|excluded files
  - options:
     - print only directory if all its files are included, or print each file
     - print only included files, excluded ones or both (in which case show - or + sign first, and red|green colors)
     - print as tree vs print flat
  - watch mode???

Package to automate testing published files:
  - get list of included files
     - if have source maps, add source file paths too
        - i.e. users can either test source file or built file
        - i.e. test coverage can either use source maps or not
  - get list of covered files by parsing LCOV
     - use sensible default locations based on main test coverage tools
     - allow other formats than LCOV???
  - for any covered file, check if among included files
     - opts.ignore GLOB_ARR to not produce errors if those files are test covered.
  - possible tagline: Ensure "npm/yarn publish" does not break your package
  - should not use/require itself (instead of inside gulp folder) because it creates hard to debug bugs (add comment)

Package with recommendation on integration testing???
  - published files testing
  - npm link
  - eslint
     To prevent requiring `devDependencies` in code published to npm, please use the `import/no-extraneous-dependencies` ESLint rule.

     ```
     rules:
       import/no-extraneous-dependencies:
         - 2
         - devDependencies: [test/**]
     ```

     If you're using `eslint-plugin-import`, you can avoid linting errors by specifying in `.eslintrc.yml`:

     ```
     settings:
       import/core-modules: [your-package]
     ```

     Same goes with `eslint-plugin-node`:

     ```
     rules:
       node/no-extraneous-require:
         - 2
         - allowModules: [your-package]
     ```
