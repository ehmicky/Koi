
                             
   ROADMAP-GULP-SHARED-TASKS  
                             



Why isn't prettier prettifying files in `gulp/docker.js` in `prism-api` in my IDE

cross-platform-node-guide:
  - new logo
     - reorganize `design` repository (including add logos to README)
     - use everywhere (including cv-website and productHunt)

awesome-cross-platform-nodejs:
  - promote on Tuesday

Medium posts:
  - execa v2 release
  - "Cross-platform Node.js" series
     - once every Wednesday, based on a chapter of cross-platform-node-guide
     - promote on cross-platform-node-guide
     - maybe promote on awesome-cross-platform-nodejs

Add ES modules
  - do:
     - modify .eslintrc.js
     - remove 'use strict' (autofixable)
     - require() -> import
     - module.exports -> export const ...
     - default export -> if main export, keep as module.exports. Otherwise, named export
     - make all import point to files instead of directories
     - remove all index.js
        - not trivial ones should be moved to main.js
        - change `package.json` `main` accordingly
     - add file extensions to all import
  - merge .eslintrc.modules back to .eslintrc once all repos are using ES imports
  - add VSCode snippets for it

Go through "versioning" documentation
  - add better changelog logic
     - should include contributors names and thank them

gulp-execa:
  - remove error message logic
  - remove split.js logic once my PR on execa gets merged
  - make it more like a thin wrapper around `execa`
  - allow `task()` task name to customized with `opts.name`:
     - e.g. `gulp docker` that does two `task()` `docker build` and `docker push` should not have same name

Babel:
  - requiring top:
     - test code getting binary path: then create (and use) project that:
        - unless already exists -> check it does not
        - do:
            - pkg-dir[.sync]()
            - require("ROOT/package.json")
            - get PACKAGE.bin[.NAME] (def NAME is PACKAGE.name)
            - path.posix.relative(ROOT, PATH)
            - return
        - FUNC[.sync(["NAME"])] is main exports
  - pkg-dir opts.cache BOOL:
     - moize() with cache key process.cwd()
     - def false until next major version

Create repo to do try/catch wrapper (see autoserver code)
  - use keep-func-props
  - keep context
  - make it work with ES decorators proposals too
  - check catch-decorator
  - use in my repos
     - including replacing `silentAsync()` function in gulp-shared-tasks

keep-func-props:
  - once `opts.length()` is merged add own `opts.length(funcLength, argsLength)->length`:
     - when defined do:
         mimicfn(newfunc, func, { length: len => getLength(len, args.length) })
     - use it bind() utility in gulp-shared-tasks:
        - const bind = keepFuncProps(bindFunc, { length: (funcLength, argsLength) => funcLength - argsLength })
  - promote:
     - wait for:
        - all my issues/PRs being resolved in mimic-fn
        - using universal JavaScript
     - logo: (keep)=>(func)=>{props}
        - punctuation is in grey, rest in black
     - article:
        - "Are you properly wrapping functions in JavaScript?"
        - pitfalls when wrapping functions:
           - must keep `this` (no arrow functions)
           - must pass all variadic arguments, even if not used yet
           - performance tricks
           - must keep function name
           - must keep function length, most of the times
           - must keep static properties
        - start with simple&wrong example, then work up to final version

Separate bind() utility from gulp-shared-tasks

Separate asyncDonePromise() utility from gulp-shared-tasks

Separate gulp-cutting-edge
  - gulp wrapping repo:
     - FUNC(FUNC2[, STR])->FUNC2
     - wrap with try {} catch {} so that if throws (sync or async), throw a PluginError() instead
        - plugin name is STR (def: FUNC2.name)
     - keep context
  - `cutting-edge`:
     - validate latest node/npm/yarn
     - opts to throw or not
     - opts to ignore if HTTP request fails (e.g. Node website down) (def: ignore it)
     - opts to only include node or only npm/yarn, etc.
     - document that this should not be production dependency for libraries
     - avoid having to update this module by:
        - using HTTP request instead of node-releases
        - making test not check the actual version string
     - promote on https://github.com/MarkTiedemann/node-latest/issues/2

Separate gulp-watch code into own repository
  - use jest-validate
  - document that gulp.series() should be used instead of `&&` or `;`
  - re-use Gulp logo but dark and eye symbol instead of "Gulp" word

Separate gulp-execa code into own repository
  - if execa PRs get rejected, create a cross-exec repo:
     - for anything in gulp-execa not gulp-specific, i.e.:
        - single string input
        - better error message
     - i.e. wrapper around "execa"
     - promote in Portable Node.js guide
  - use jest-validate
  - "Cross-platform shell commands in Gulp.js"
     - Focus on that the cross-platform since it's the only one being cross-platform
     - Also commands are run in parallel unlike most projects
  - warn in README that gulpExeca.stream() should be avoided when command can take several files as input (through globbing, variadic args or dir recursion)
  - document:
      - can only command and args
         - should do several calls instead of ; or &&
         - or gulp.series|parallel()
         - should use opts.std*|input instead of shell pipes and redirections
      - everything escaped, i.e. should not quote nor escape
         - this allows preventing subcommands injections like $(...) as argument
         - no globbing. Alternatives (in preference):
            - callee not caller interpret globbing
            - callee allow directory recursion
            - callee allow multiple files, i.e. caller can perform globbing with tools like minimatch
            - gulpExeca.stream()
         - variable expansion
            - should instead use template string
               - including process.env
     - should pass envvars with opts.env
     - should use Node.js commands instead of Unix coreutils or Bash commands
     - should use path.normalize()
     - link to Portable Node guide
  - re-use Gulp logo but dark and shell symbol instead of "Gulp" word
  - promote with issue on `execa` repo to add a link

Separate non-Gulp specific coverage utilities:
  - npm install the GitHub URL of codecov-bash instead of fetching it and feading it as a stream
  - see codecov check repository

Add tests
  - test on several Gulp versions?
