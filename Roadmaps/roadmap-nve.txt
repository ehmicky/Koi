
               
   ROADMAP-NVE  
               



Once https://github.com/sindresorhus/execa/pull/373 merged, remove `fixOriginalMessage()`

Once https://github.com/sindresorhus/npm-run-path/pull/8 and https://github.com/sindresorhus/npm-run-path/pull/9 PRs merged:
  - add `execPath` option to execa
  - use `execPath` option instead of the whole `fixPath` logic

npm-run-path code:
  - add tests

In README write that no install step -> always up to date major release

default export -> named export `runVersion()`

Return OBJ.version (normalized version)

Update benchmarks
  - use nvm exec instead of nvm run

Go through whole nve code again

Fix documentation and examples
  - include the fact that since this is now a full-fledge alternative to nvm, no need to point to it anymore

Make major release

--shell option (uses OPTS.shell true)

spyd --run.node.versions should use nve somehow (instead of get-node), so that child processes use the right Node.js version

Allow command to be undefined programmatically:
  - command execution is then skipped but not version normalization nor download
  - in CLI, also prints normalized version on console

Multiple versions:
  - CLI: space-separated VERSION
  - programmatic: runVersions('VERSION'_ARR, ...)->ITERABLE_EXECA_CHILD_PROCESS
  - versions order: same as input for both execution and output
  - make version normalization and download happen in parallel, before any child process starts
  - OPTS.parallel BOOL (def: false):
     - in CLI:
        - serial: use execa OPTS.stdio 'inherit' and OPTS.buffer false
        - parallel:
           - buffer each process until all the previous ones have completed
           - do it by getting current buffer, then piping, then canceling buffering, then printing retrieved current buffer
  - OPTS.wait BOOL (def: false):
     - whether to stop execution on error
        - not only exitCode !== 0 but also termination signals
     - if false:
        - send SIGTERM to all others on error
        - in CLI: print the `all` of the child process that failed
     - if true:
        - exitCode is the highest exitCode (undefined defaults to 1)
  - in CLI: if more than one version, each version output is:
     - prepended with a line showing the "Node.js VERSION"
        - VERSION is same as input, not normalized
        - in green unless OPTS.colors false (def: if stdout supports colors)
     - appended with an empty line
  - make sure stdin can still be used from CLI

Use the .zip file for Windows

Submit nve to https://github.com/sindresorhus/awesome-nodejs
