
               
   ROADMAP-NVE  
               



execa patches error.message (if underlying error), but should also do it on error.stack???

spyd:
  - use execa
  - use preferLocal true
  - runners retrieving command should not be taken into `duration` account:
     - e.g. when --run.node.versions does getNode()
  - allow runners to return command, args, spawnOptions
     - has lower priority than core spyd, except for `preferLocal`
  - make nve return modified command, args, spawnOptions
  - replace getNode() by:
     - `nve()` with command undefined returning command, args, spawnOptions
        - no need for progress: false since this is default
     - return it

Promote human-signals in same tweet on Tuesday

Once https://github.com/sindresorhus/execa/pull/375 merged:
  - add `error.signalDescription` using `human-signals`
     - add to `error.message` too

Once https://github.com/sindresorhus/npm-run-path/pull/8 and https://github.com/sindresorhus/npm-run-path/pull/9 PRs merged:
  - add `execPath` option to execa
  - use `execPath` option instead of the whole `fixPath` logic

On new nyc major release, check all the tests TODO related to issues with nyc

Multiple versions:
  - CLI: space-separated VERSION
  - programmatic: runVersions('VERSION'_ARR, ...)->ITERABLE_EXECA_CHILD_PROCESS
  - versions order: same as input for both execution and output
  - make version normalization and download happen in parallel, before any child process starts
  - OPTS.parallel BOOL (def: false):
     - in CLI:
        - serial: use execa OPTS.stdio 'inherit' and OPTS.buffer false
        - parallel:
           - stream/buffer each process in turn
           - create a package pipeSeries(STREAM_ARR, STREAM):
              - like Stream.pipeline() but stream each output in order
              - stream first STREAM
              - then when done, write buffer of second STREAM and stream that one, and so on
  - OPTS.wait BOOL (def: false):
     - whether to stop execution on error
        - not only exitCode !== 0 but also termination signals
     - if false:
        - send SIGTERM to all others on error
        - in CLI: print the `all` of the child process that failed
     - if true:
        - exitCode is the highest exitCode (undefined defaults to 1)
  - in CLI: if more than one version, each version output is:
     - prepended with a line showing the "Node.js VERSION"
        - VERSION is same as input, not normalized
        - in green unless OPTS.colors false (def: if stdout supports colors)
     - appended with an empty line
     - appended with error message if any:
        - "Node.js VERSION ..." (using Execa error message, without the actual command)
        - "Node.js VERSION aborted" (if killed because OPTS.parallel true and another command failed)
     - nothing printed if killed because OPTS.parellel false and another command failed
  - make sure stdin can still be used from CLI

Use the .zip file for Windows

Submit nve to https://github.com/sindresorhus/awesome-nodejs

Add a link to "Related" in Execa
