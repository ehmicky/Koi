
               
   ROADMAP-NVE  
               



Verify checksums with GPG signature

Add support for BSD, Android, armv6l

Try removing core-js from all my projects

Add `nodeenv` to preferred-node-version

Promote preferred-node-version

Consider using `process.env.SHELL` or similar in `node-version-alias`

Upgrade jscpd:
  - https://github.com/kucherenko/jscpd/issues/231
  - https://github.com/kucherenko/jscpd/issues/207

Execa:
  - check why 2 CI tests are failing on Windows
  - Check question about stdin: https://github.com/sindresorhus/execa/issues/418

moize-fs:
  - instead of getCacheDir():
     - positional argument -> in options object
     - OPTS.dir STR:
        - either absolute path
        - or "NAMESPACE[/PATH]" or "NAMESPACE[\PATH]", using path.resolve(getcachedir("NAMESPACE"), "PATH")
        - required
     - OPTS.filename(...args)->STR:
        - required
        - cannot contain / or \
        - document that hash can be used, and show example with well-known library
  - timestamp file:
     - filename is FILE.expire_at.DATENUM.txt
     - empty content
     - use single `readdir` on OPTS.dir instead of reading timestamp files
  - automatic cleanup:
     - at the beginning of writing a new cache file, but before serializing the value
     - use the list of filenames from previous `readdir` call on OPTS.dir
     - remove any of the following:
        - FILE:
           - without FILE.expire_at.\d+.txt
        - FILE.expire_at.\d+.txt:
           - without FILE
           - with another one with a higher DATENUM
        - FILE + FILE.expire_at.\d+.txt:
           - with DATENUM < Date.now()
     - filter out duplicates filepaths from list to remove
     - call all fs.unlink() in parallel
        - silently ignore failures (might be due to parallel calls)
  - OPTS.maxSize NUM:
     - min 1
     - def Infinity
        - Infinity should prevent even checking for any cleanup
     - during automatic cleanup
     - if more than NUM files (timestamps excluded), remove the ones with the oldest timestamps
     - pass to process moize OPTS.maxSize NUM too
  - OPTS.maxSizeGroup(filename)->STR:
     - noop if OPTS.maxSize is Infinity
     - make OPTS.maxSize keep the same number of items between groups:
        - if division not perfectly roundable, keep the most recent items
     - OPTS.maxSizeGroupsCount NUM:
        - noop if OPTS.maxSizeGroup undefined
        - def: same as OPTS.maxSize
        - max: OPTS.maxSize
        - min: 1
        - number of groups OPTS.maxSize should keep
  - see TODO comments in code after cache invalidation
  - stream atomic write: find library
     - if none, create own
  - better offline check
     - maybe generalize and separate from moize-fs, e.g. a function wrapper that accepts a custom callback on offline failure
  - own repositories:
     - moize-fs: without offline
     - moize-offline: moize-fs + offline
  - use in repositories:
     - CACHE_DIR/bin/MIRROR/ARCH/VERSION/node.exe
     - CACHE_DIR/versions/MIRROR/ARCH/versions.json
     - CACHE_DIR/releases/releases.json (does not include `latest`, this is retrieved and merged separately)
  - add OPTS.maxBuffer NUM, which stops streams if current length > maxBuffer, if OPTS.streams 'content'
  - key-value store abstraction (for future):
     - done as a separate library on top of it
     - core only provides with OPTS callbacks to modify fs.* calls

Use `env-paths` cache instead of `node-cachedir` and `global-cache-dir`

OPTS.mirror:
  - can be shortcut "release" (def), "nightly", "v8-canary", "test", "rc" (for https://nodejs.org/download/*)
     - i.e. "rc" is only "rc" (should document)
  - allow versions to include prerelease tags
     - make sure it works with nightly, etc.
  - when version contains prerelease tag like "-nightly" and OPTS.mirror not defined, default to "nightly", etc.
  - cache per OPTS.mirror:
     - for:
        - all-node-versions
        - get-node
     - use all letters from URL to form dir name
        - common mirrors have a hardcoded list of friendlier names
  - need to check Node.js version limits in get-node??? E.g. for xz introduction

Arch:
  - pass OPTS.arch to all-node-versions:
     - filter out releases without requested arch
     - cache index.json per OPTS.arch
  - preferred-node-version also returns arch
     - def: current process.arch
     - when loading nvs, parse suffix '/x64', '/x86', '/32' or '/64' after version

OPTS.fetch BOOL -> OPTS.cache !BOOL
nve VERSION COMMAND -> nve exec VERSION COMMAND
nve VERSION -> nve version VERSION
nve VERSIONS --FLAGS [COMMAND [ARGS]] instead of nve --FLAGS VERSIONS [COMMAND [ARGS]]

Pruning cache:
  - in get-node (and above libraries)
  - OPTS.maxCache NUM
     - def: 10
     - min: 1
     - max number of cached versions at once
     - 1: no caching
     - high number like 1000: no pruning
  - using moize-fs OPTS:
     - maxSize NUM: user-provided OPTS.maxSize
     - maxSizeGroup: remove only patch and minor version from filename
     - maxSizeGroupsCount: Math.ceil(Math.sqrt(OPTS.maxSize))

`nve exec` signals propagation:
  - propagate signals as soon as childProcess started
     - undo as soon as childProcess exited
  - on single|serial|parallel commands
  - using process.on|off("signal", () => childProcess.kill(signal))
  - parent process forwards signals but does not send them to itself

Dry mode:
  - already working:
     - OPTS.cache defaults to false
     - print resolved version, one per line
  - when `local|global`:
     - should use preferred-node-version
     - print 'X.Y.Z (using "RAW_VERSION" from FILE_PATH)' instead
        - RAW_VERSION: before alias substitution
        - FILE_PATH: if in current directory or below, relative and prefixed with "./" or ".\". Otherwise absolute
  - document more in README
     - including that `nve version latest|lts|MAJOR` can be used to check latest versions
     - including works with multiple versions

`node-releases`:
  - start by doing it inside all-node-versions
  - fetches github.com/nodes/releases JSON file
  - return as OBJ_ARR:
     - major "X" or "0.Y"
     - latest "X.Y.Z"
        - done by calling allNodeVersions()
           - OPTS.cache|mirror forwarded to allNodeVersions()
        - can be `undefined` when using custom OPTS.mirror
     - isCurrent BOOL: whether process.version is using it
     - lts "NAME"
     - maintained BOOL
     - future BOOL
     - startDate DATE
     - ltsDate DATE
     - maintenanceDate DATE
     - endDate DATE
  - OBJ_ARR sorted from oldest to most recent
  - OPTS.versions "VERSION_RANGE"_ARR
     - only return majors containing those
     - def: all
  - cache it using exact logic as all-node-versions, including OPTS.cache (def: undefined), offline, file caching, process caching
  - make allNodeVersions() only return array of versions, no more `lts`

`node-releases-cli`:
  - columns:
     - name "v0.10", "v6", etc.
     - latest "X.Y.Z"
     - local "X.Y.Z" for process.version on the relevant major
     - LTS name (without "LTS" except as column name)
     - Start date
        - only if not started yet
        - use local date format
     - End date
        - including if already ended
        - not if not started yet
        - use local date format
  - oldest on top, newest on bottom
  - default OPTS.cache false
  - OPTS.versions:
     - def: maintained releases + next release + process.version release
     - is positional argument
     - document that can be "*" for all
  - --columns=NAME,... (def: all)
  - --format=table|csv|tsv|json
  - --[no-]color
  - `nve releases`:
     - `node-releases-cli` should export YARGS command: use it

`node-changelog`:
  - FUNC(VERSION)->URL
     - URL to changelog
     - if VERSION not found, throw
  - URL:
     - use https://nodejs.org/en/blog/release/ if possible
     - with fallback to https://github.com/nodejs/node/releases
     - with fallback to https://github.com/nodejs/node/blob/master/CHANGELOG.md
  - `node-changelog-cli`:
     - node-changelog [VERSION]
     - def VERSION is process.version
     - open browser
     - --print CLI flag: print URL instead
  - `nve changelog [VERSION]`:
     - forward to `node-changelog-cli`, using its YARGS exported command
     - unlike `node-changelog-cli`, do not document --print CLI flag

Interactive mode:
  - rename OPTS.progress to OPTS.interactive
  - default: is-interactive module

Print changelog:
  - in get-node
     - after Node.js binary downloaded and temp file moved to final file
     - performance optimization: read the cache file in parallel with retrieving the (potentially cached) Node.js binary, but still perform the rest of the logic afterwards
        - not if won't be used (e.g. OPTS.interactive false)
  - keep `seen` state ARR in CACHE_DIR/nve/changelog.json
     - filepath regardless of mirror|arch
     - content is OBJ { seen ARR }
     - when written, ensure potential future sibling variables of `seen` are kept
     - same versions sorting as all-node-versions
  - noop if either:
     - there is a version in SEEN >= downloaded version within same major
     - downloaded version is not exactly "X.Y.Z" (e.g. custom mirror)
     - OPTS.interactive false
  - do it regardless of whether Node.js binary download is using cache or doing actual request
  - if SEEN does not exist, initialize it with the latest versions of all majors
     - regardless of downloaded version
     - do not print anything
     - the call to allNodeVersions() should be done after Node.js binary download complete, to ensure it is cached
        - pass OPTS.cache|mirror as it to allNodeVersions()
  - if SEEN exists:
     - add downloaded version to SEEN
        - if downloaded version major already has another version in SEEN, replace it
     - print "LOGO Node.js X.Y.Z (CHANGELOG_URL)"
        - try keep same left text as binary download progress bar
        - on stderr
        - CHANGELOG_URL: use `node-changelog`
           - if error, silently do not show it

.nve.yml:
  - in current dir, any parent dirs or in home dir
  - contains OBJ with common nve options
  - used by all nve libraries
  - will contain OBJ.version for nve-shell
  - memoized per process
  - have own library to load it or to merge to library options
  - add to preferred-node-version, using field CONF.version field
     - NUM|STR
     - optional
  - documentation should mostly reference OBJ.version in .nve.yml as the best way to set global version

Improve resilience:
  - use cached Node when offline
  - find other ways

Put groupBy function from all-node-versions into own library

Linting:
  - enforce only arrow functions are used, not `function`
     - see https://github.com/eslint/eslint/issues/13141

Learn CLI/Terminal from to_learn
