
               
   ROADMAP-NVE  
               



Verify checksums with GPG signature

Add support for BSD, Android, armv6l

Try removing core-js from all my projects

Promote preferred-node-version

Consider using `process.env.SHELL` or similar in `node-version-alias`

All-node-versions memoization (process, offline, file):
  - use moize
     - pass down all moize options
     - do not run memoized func until async confirmed not cached
  - remove anything all-node-versions specific, passed as arguments instead
     - `lastUpdated` should be a filestamp file instead
  - own repositories:
     - moize-fs: without offline
     - moize-offline: moize-fs + offline
  - use in repositories:
     - CACHE_DIR/bin/MIRROR/ARCH/VERSION/node.exe
     - CACHE_DIR/versions/MIRROR/ARCH/versions.json
     - CACHE_DIR/releases/releases.json (does not include `latest`, this is retrieved and merged separately)
  - feature for future: use an abstract KV store

OPTS.mirror:
  - can be shortcut "release" (def), "nightly", "v8-canary", "test", "rc" (for https://nodejs.org/download/*)
     - i.e. "rc" is only "rc" (should document)
  - allow versions to include prerelease tags
     - make sure it works with nightly, etc.
  - when version contains prerelease tag like "-nightly" and OPTS.mirror not defined, default to "nightly", etc.
  - cache per OPTS.mirror:
     - for:
        - all-node-versions
        - get-node
     - use all letters from URL to form dir name
        - common mirrors have a hardcoded list of friendlier names
  - need to check Node.js version limits in get-node??? E.g. for xz introduction

Arch:
  - pass OPTS.arch to all-node-versions:
     - filter out releases without requested arch
     - cache index.json per OPTS.arch
  - preferred-node-version also returns arch
     - def: current process.arch
     - when loading nvs, parse suffix '/x64', '/x86', '/32' or '/64' after version

Dry mode:
  - already working:
     - OPTS.fetch defaults to true
     - print resolved version, one per line
  - when `local|global`:
     - should use preferred-node-version
     - print 'X.Y.Z (using "RAW_VERSION" from FILE_PATH)' instead
        - RAW_VERSION: before alias substitution
        - FILE_PATH: if in current directory or below, relative and prefixed with "./" or ".\". Otherwise absolute
  - document more in README
     - including that `nve latest|lts|MAJOR` can be used to check latest versions
     - including works with multiple versions

nve VERSIONS --FLAGS [COMMAND [ARGS]] instead of nve --FLAGS VERSIONS [COMMAND [ARGS]]

`node-releases`:
  - start by doing it inside all-node-versions
  - fetches github.com/nodes/releases JSON file
  - return as OBJ_ARR:
     - major "X" or "0.Y"
     - latest "X.Y.Z"
        - done by calling allNodeVersions()
           - OPTS.fetch|mirror forwarded to allNodeVersions()
        - can be `undefined` when using custom OPTS.mirror
     - isCurrent BOOL: whether process.version is using it
     - lts "NAME"
     - maintained BOOL
     - future BOOL
     - startDate DATE
     - ltsDate DATE
     - maintenanceDate DATE
     - endDate DATE
  - OBJ_ARR sorted from oldest to most recent
  - OPTS.versions "VERSION_RANGE"_ARR
     - only return majors containing those
     - def: all
  - cache it using exact logic as all-node-versions, including OPTS.fetch (def: undefined), offline, file caching, process caching
  - make allNodeVersions() only return array of versions, no more `lts`

`node-releases-cli`:
  - columns:
     - name "v0.10", "v6", etc.
     - latest "X.Y.Z"
     - local "X.Y.Z" for process.version on the relevant major
     - LTS name (without "LTS" except as column name)
     - Start date
        - only if not started yet
        - use local date format
     - End date
        - including if already ended
        - not if not started yet
        - use local date format
  - oldest on top, newest on bottom
  - default OPTS.fetch true
  - OPTS.versions:
     - def: maintained releases + next release + process.version release
     - is positional argument
     - document that can be "*" for all
  - --columns=NAME,... (def: all)
  - --format=table|csv|tsv|json
  - --[no-]color
  - `nve releases`:
     - `node-releases-cli` should export YARGS command: use it

`node-changelog`:
  - FUNC(VERSION)->URL
     - URL to changelog
     - if VERSION not found, throw
  - `node-changelog-cli`:
     - node-changelog [VERSION]
     - def VERSION is process.version
     - open browser
     - --print CLI flag: print URL instead
  - `nve changelog [VERSION]`:
     - forward to `node-changelog-cli`, using its YARGS exported command
     - unlike `node-changelog-cli`, do not document --print CLI flag

Interactive mode:
  - rename OPTS.progress to OPTS.interactive
  - default: is-interactive module

Print changelog:
  - in get-node
     - after Node.js binary downloaded and temp file moved to final file
     - performance optimization: read the cache file in parallel with retrieving the (potentially cached) Node.js binary, but still perform the rest of the logic afterwards
        - not if won't be used (e.g. OPTS.interactive false)
  - keep `seen` state ARR in CACHE_DIR/nve/changelog.json
     - filepath regardless of mirror|arch
     - content is OBJ { seen ARR }
     - when written, ensure potential future sibling variables of `seen` are kept
     - same versions sorting as all-node-versions
  - noop if either:
     - there is a version in SEEN >= downloaded version within same major
     - downloaded version is not exactly "X.Y.Z" (e.g. custom mirror)
     - OPTS.interactive false
  - do it regardless of whether Node.js binary download is using cache or doing actual request
  - if SEEN does not exist, initialize it with the latest versions of all majors
     - regardless of downloaded version
     - do not print anything
     - the call to allNodeVersions() should be done after Node.js binary download complete, to ensure it is cached
        - pass OPTS.fetch|mirror as it to allNodeVersions()
  - if SEEN exists:
     - add downloaded version to SEEN
        - if downloaded version major already has another version in SEEN, replace it
     - print "LOGO Node.js X.Y.Z (CHANGELOG_URL)"
        - try keep same left text as binary download progress bar
        - on stderr
        - CHANGELOG_URL: use `node-changelog`
           - if error, silently do not show it

Pruning cache:
  - in get-node (and above libraries)
  - OPTS.cache NUM
     - def: 8
     - min: 1
     - max number of cached versions at once
     - 1: no caching
     - high number like 1000: no pruning
 - prune at end of each get-node call:
     - keep track of atime in .cache/nve/all/lastRun.json OBJ.runs OBJ_ARR: timestamp "ATIME", version, arch, major
         - written at end of each get-node call
     - use LRU, but first half must be in different major+CPU combinations
        - "half": Math.floor(), with max number of combinations

.nve.yml:
  - in current dir, any parent dirs or in home dir
  - contains OBJ with common nve options
  - used by all nve libraries
  - will contain OBJ.version for nve-shell
  - memoized per process
  - have own library to load it or to merge to library options
  - add to preferred-node-version, using field CONF.version field
     - NUM|STR
     - optional

uploadCoverage fails randomly
  - example: https://github.com/ehmicky/nvexeca/runs/560883959?check_suite_focus=true
  - bug: https://github.com/codecov/codecov-action/issues/68. Once fixed:
     - fix `shouldCover()` in `dev-tasks`, release to all repos and make sure all uploadCoverage are now passing
     - remove all CODECOV_TOKEN from workflow.yml, and make sure all uploadCoverage are still passing
     - remove all CODECOV_TOKEN from repo settings (GitHub secret)

Check execa question about stdin: https://github.com/sindresorhus/execa/issues/418

Put groupBy function from all-node-versions into own library

Linting:
  - enforce only arrow functions are used, not `function`
     - see https://github.com/eslint/eslint/issues/13141

Learn CLI/Terminal from to_learn
