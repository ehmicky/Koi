
               
   ROADMAP-NVE  
               



Verify checksums with GPG signature

Add support for BSD, Android, armv6l

nve src/parse.js might be wrong:
 - when doing --OPT VALUE --OTHEROPT instead of --OPT=VALUE --OTHEROPT, it seems like VALUE would be --OTHEROPT would be skipped?
 - does it work with aliases, e.g. --OPT . .???

Try removing core-js from all my projects

All-node-versions memoization (process, offline, file):
  - use moize
     - pass down all moize options
     - do not run memoized func until async confirmed not cached
  - remove anything all-node-versions specific, passed as arguments instead
     - `lastUpdated` should be a filestamp file instead
  - own repositories:
     - moize-fs: without offline
     - moize-offline: moize-fs + offline
  - feature for future: use an abstract KV store

OPTS.mirror:
  - can be shortcut "release" (def), "nightly", "v8-canary", "test", "rc" (for https://nodejs.org/download/*)
     - i.e. "rc" is only "rc" (should document)
  - allow versions to include prerelease tags
     - make sure it works with nightly, etc.
  - when version contains prerelease tag like "-nightly" and OPTS.mirror not defined, default to "nightly", etc.
  - cache per OPTS.mirror:
     - for:
        - all-node-versions
        - get-node
     - use all letters from URL to form dir name
        - common mirrors have a hardcoded list of friendlier names
  - need to check Node.js version limits in get-node??? E.g. for xz introduction

Arch:
  - pass OPTS.arch to all-node-versions:
     - filter out releases without requested arch
     - cache index.json per OPTS.arch
  - preferred-node-version also returns arch
     - def: current process.arch
     - when loading nvs, parse suffix '/x64', '/x86', '/32' or '/64' after version

preferred-node-version-cli:
  - prints "X.Y.Z" ("now" version)
  - if --verbose, print "LOGO Node.js X.Y.Z\nUsing "RAW_VERSION" from FILE_PATH:
     - RAW_VERSION: before alias substitution
     - FILE_PATH: if in current directory or below, relative and prefixed with "./" or ".\". Otherwise absolute
  - `nve now`:
     - `preferred-node-version-cli` should export YARGS command: use it
     - uses --verbose by default

`node-releases`:
  - start by doing it inside all-node-versions
  - fetches github.com/nodes/releases JSON file
  - return as sorted OBJ_ARR:
     - major "X" or "0.Y"
     - latest "X.Y.Z"
        - done by calling allNodeVersions()
        - can be `undefined` when using custom OPTS.mirror
     - lts "NAME"
     - isCurrent BOOL: whether process.version is using it
     - maintained BOOL
     - future BOOL
     - startDate DATE
     - ltsDate DATE
     - maintenanceDate DATE
     - endDate DATE
  - cache it using exact logic as all-node-versions, including OPTS.fetch (def: undefined), offline, file caching, process caching
  - make allNodeVersions() only return array of versions, no more `lts`

`node-releases-cli`:
  - prints each line:
     - latest "X.Y.Z"
     - now using "X.Y.Z" if matches process.version
     - LTS name
     - EOF date
        - use local date format
  - row types with different colors:
     - matching process.version (green)
     - maintained
     - others (dimmed)
        - not printed unless -a|-all
  - default OPTS.fetch true
  - `nve ls`:
     - `node-releases-cli` should export YARGS command: use it
     - remove "nve VERSION" (dry run)

Pruning cache:
  - in get-node (and above libraries)
  - OPTS.cache NUM
     - def: 8
     - min: 1
     - max number of cached versions at once
     - 1: no caching
     - high number like 1000: no pruning
 - prune at end of each get-node call:
     - keep track of atime in .cache/nve/all/lastRun.json OBJ.runs OBJ_ARR: timestamp "ATIME", version, arch, major
         - written at end of each get-node call
     - use LRU, but first half must be in different major+CPU combinations
        - "half": Math.floor(), with max number of combinations

.nve.yml:
  - in current dir, any parent dirs or in home dir
  - contains OBJ with common nve options
  - used by all nve libraries
  - will contain OBJ.version for nve-shell
  - memoized per process
  - have own library to load it or to merge to library options
  - add to preferred-node-version, using field CONF.version field
     - NUM|STR
     - optional

uploadCoverage fails randomly
  - example: https://github.com/ehmicky/nvexeca/runs/560883959?check_suite_focus=true
  - bug: https://github.com/codecov/codecov-action/issues/68. Once fixed:
     - fix `shouldCover()` in `dev-tasks`, release to all repos and make sure all uploadCoverage are now passing
     - remove all CODECOV_TOKEN from workflow.yml, and make sure all uploadCoverage are still passing
     - remove all CODECOV_TOKEN from repo settings (GitHub secret)

Check execa question about stdin: https://github.com/sindresorhus/execa/issues/418

Put groupBy function from all-node-versions into own library

Linting:
  - enforce only arrow functions are used, not `function`
     - see https://github.com/eslint/eslint/issues/13141

Learn CLI/Terminal from to_learn
