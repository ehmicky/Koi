
                   
   ROADMAP-WINDOWS  
                   



To do:
  - put this document to either:
     - node.js for what's relevant there
     - a language-agnostic cross-os doc file
  - create a repo with all these explanations for how to write cross-OS node
     - check my Node.js doc file (look for "windows", "linux", "Mac" and "OS" in the file)
     - also check everything under `Iteroperability/OS` in my doc
        - including my cross-os doc file
     - also check existing GitHub projects for this
  - portable-path (see its roadmap)
     - think that Windows path should also be allowed as input??? But not cross-OS then???
  - validate-path:
     - add `opts.portable: BOOL` (def: true): use `portable.path`
     - add tests, README, etc.

Path:
  - on Windows:
     - delimiter is \ not /
        - although / is sometimes allowed
     - absolute path start either with:
        - '\' (current disk)
        - 'C:\'
           - can use even with relative paths, e.g. `C:path` is relative but `C:\path` is not
        - '\\HOST\' or '//HOST\' ("UNC path")

Users:
  - no UID|GID on Windows
  - ENVVAR USER on Unix, `USERDOMAIN\USERNAME` on Windows

ENVVARs:
  - in shell:
     - referencing:
        - $ENVVAR in Unix, %ENVVAR% in Windows
        - if missing, '' in Unix, '%ENVVAR%' as is in Windows
     - passing:
        - ENVVAR=VAL in Unix
        - Set ENVVAR=VAL or setx ENVVAR VAL [/M] in Windows (/M if requires admin)
     - listing: `env` in Unix, `set` in Windows
  - case-insensitive on Windows, case-sensitive on Unix

Commands spawning:
  - shabang does not work on Windows, i.e. must always use an iterpreter (e.g. `node FILE`)
     - exceptions: `*.exe|com|cmd|bat`
  - file extension can be omitted if inside PATHEXT on Windows
  - ENVVAR PATH:
     - delimiter is ; on Windows not : (PATH.delimiter)
     - different directories

Shell escaping:
  - Windows:
     - ^-escaping or "" for ^ & < > |
     - optional ^-escaping or "" for ' ` , ; = ( ) !
     - optional ^-escaping or "" for \-escaping for \ [ ] " . * ?
     - optional "-escaping for "

File permissions:
  - Windows does not use Unix permissions but instead a combination of:
     - file attributes:
        - readonly: no write|delete permission (regular file only)
        - hidden:
           - not listed by parent directory
           - there are options to turn it off both in CLI and GUI, unless `system` attribute is also set
        - system: used by OS
        - directory: is directory
        - reparse point: is symlink
        - others are not related to file permissions
     - file permissions / ACLs / NTFS permissions
     - share permissions
  - executability on Windows:
     - means can be passed to an interpreter (since there is no shabang)
     - besides other permissions, also require extension to be among ENVVAR PATHEXT, a ;-separated list of file extensions
        - def: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC

Symlinks:
  - Windows can use `junctions`, i.e. like hard link but actually mirrors
  - Windows cannot create hard links on folders
  - Windows has a 'create symlink' permission, which by default is only given to admins
  - FAT32 does not allow symlinks

Networking:
  - ENVVAR COMPUTERNAME on Windows, HOSTNAME on Unix, or CLI command `hostname` (any OS)
  - sockets/named pipes on Windows must be prefixed with `\\.\pipe\`
  - Cannot `listen()` to a file descriptor on Windows

Prompt:
  - ENVVAR PROMPT on Windows, PS1 on Unix

Shell:
  - ENVVAR ComSpec on Windows, SHELL on Unix
  - Windows has no ; but it has &&

Available utilities:
  - no coreutils nor Bash
  - emulations:
     - msys/MinGW (part of Git Bash)
     - Cygwin: more extensive, similar to Wine but inverse
     - WSL (Windows Subsystem for Linux): alternative to Cygwin more focused on Linux
     - since they emulate Unix, should be closed to it than to Windows
  - `notepad.exe` usually available instead of `vi` on Windows

Signals:
  - Windows does not have signals:
     - `taskkill` command can be used to terminate processes
     - Node.js abstract this though to allow few OS-agnostic signals
        - Windows does not allow terminating a process group though on Node.js
  - signals integers are different between Linux and Mac, and some signals are different

Newline:
  - OS-agnostic: '\n' is LF, '\r' is CR
  - OS-specific: (CR+LF on Windows, LF others): terminal|file I/O

Directory locations:
  - typical temporary directory: `/tmp` on Linux, `/var/folders/RANDOM/T` on Mac, `C:\Users\USER\AppData\Local\Temp` (or ENVVAR T[E]MP) on Windows
  - typical home directory: `/home/USER` on Linux, `/Users/USER` on Max, `C:\Users\USER` (or ENVVAR HOMEDRIVE|HOMEPATH) on Windows
  - ENVVAR PWD in Unix, ENVVAR CD on Windows

Configuration:
  - Unix: usually files in some predefined directory like `/etc/*`
  - Windows: usually inside the Windows registry, a central key-value store
     - key is case-insensitive

Unicode:
  - cmd.exe uses CP866 charset instead of Unicode

nvm|npm:
  - must use nvm-windows on Windows
  - on Windows, must update npm with npm-windows-upgrade instead of npm install -g npm
