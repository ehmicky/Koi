
                   
   ROADMAP-WINDOWS  
                   



To do:
  - libraries:
     - fkill
        - fkill-cli
     - tasklist
     - ps-list
        - process-exists
     - registry:
        - node-winreg
        - rage-edit
        - windows-registry-node
     - winattr
        - hidefile
     - shelljs
     - node-windows
     - https://github.com/PhilipSkinner/windows
  - file permissions, etc.
  - portable-path
  - put this document to either:
     - node.js for what's relevant there
     - a language-agnostic cross-os doc file
     - create a repo with all these explanations for how to write cross-OS node
        - also check everything under `Iteroperability/OS` in my doc

Path:
  - summary:
     - usually use Unix path
     - except when dealing with input|output outside Node (in shell): use PATH.* then
  - differences:
     - delimiter is \ not / (PATH.sep)
     - absolute path start either with:
        - '\' (current disk)
        - 'C:\'
           - can use even with relative paths, e.g. `C:path` is relative but `C:\path` is not
           - can use `PATH.toNamespacedPath(PATH)` on Windows
        - '\\HOST\' or '//HOST\' ("UNC path")
  - input in Node:
     - Unix path allowed on all OS, but Windows path also allowed in Windows (including mixed)
     - e.g. require(), PATH.*, FS.*, process.chdir()
  - output in Node:
     - OS-specific
        - but it's ok since input in Node in Windows allows mixing Unix/Windows
     - e.g. PATH.*, __dirname, process.argv|execPath|cwd(), OS.userInfo().homedir
     - exceptions:
        - PATH.posix|win32.*
        - output based on input, e.g. createReadStream().path, fs.mkdtemp()
  - input|output outside Node (in shell): OS-specific

Users:
  - no UID|GID on Windows:
     - process.get|set[e]uid|gid|getgroups|setgroups|initgroups() are not defined
     - os.userInfo().uid|gid is -1
     - STAT.uid|gid is always 0
  - ENVVAR USER on Unix, `USERDOMAIN\USERNAME` on Windows

ENVVARs:
  - in shell:
     - referencing:
        - $ENVVAR in Unix, %ENVVAR% in Windows
        - if missing, '' in Unix, '%ENVVAR%' as is in Windows
     - passing:
        - ENVVAR=VAL in Unix
        - Set ENVVAR=VAL or setx ENVVAR VAL [/M] in Windows (/M if requires admin)
     - listing: `env` in Unix, `set` in Windows
  - case-insensitive on Windows, case-sensitive on Unix

Commands spawning:
  - shabang does not work on Windows
     - must always use an iterpreter (e.g. `node FILE`):
        - i.e. `spawn()` `opts.shell` cannot be `false`
        - exceptions: `*.exe|com|cmd|bat`
  - file extension can be omitted if inside PATHEXT on Windows
  - PATH:
     - delimiter is ; on Windows not : (PATH.delimiter)
     - different directories
  - `spawn()` `opts.shell: true`:
     - `/bin/sh` on Unix, `process.env.ComSpec` (`cmd.exe`) on Windows
  - `spawn()` `opts.detached`:
     - on Mac|Windows, child process cannot outlive parent without `opts.detached: true`
     - on Windows, `opts.detached: true` opens a new window unless `opts.windowsHide: true`
  - `spawn()` escape arguments unless `opts.windowsVerbatimArguments: true`
     - done automatically when `opts.shell` is `cmd.exe`
  - `spawn()` `opts.argv0` does not modify `process.title` on Windows

Clustering:
  - `CLUSTER.schedulingPolicy` `SCHED_RR` is not supported on Windows, and default is `SCHED_NONE`

Shell escaping:
  - Windows:
     - ^-escaping or "" for ^ & < > |
     - optional ^-escaping or "" for ' ` , ; = ( ) !
     - optional ^-escaping or "" for \-escaping for \ [ ] " . * ?
     - optional "-escaping for "

File permissions:
  - Windows does not use Unix permissions:
     - executability:
        - means can be passed to an interpreter (since there is no shabang)
        - only if extension is among ENVVAR PATHEXT, a ;-separated list of file extensions
           - def: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
     - `process.umask()` always return `0`
  - check for Windows:
     - file permissions???
     - windows ACLs???
     - file attributes???
     - behavior of:
        - `fs.access()`???
        - `fs.chmod()`??? (only `w` and no user class???)
        - `fs.chown()`???
        - `opts.mode` for `fs.mkdir|open()` (like `fs.chmod()` ???)
           - `O_NOATIME` on Linux only
        - `fs.open()` flags??? (see node.js doc too)
        - https://docs.microsoft.com/en-us/windows/desktop/fileio/file-security-and-access-rights
     - FAT32 has no extended attributes nor ACLs
  - `fs.lchmod()` only on Mac

File watching:
  - `fs.watch()` `opts.recursive()` not supported on Linux

Symlinks:
  - Windows can use `junctions`, i.e. like hard link but actually mirrors
     - `fs.link()` can use `junction`
  - Windows cannot create hard links on folders
  - Windows has a 'create symlink' permission, which by default is only given to admins
  - FAT32 does not allow symlinks

Networking:
  - ENVVAR COMPUTERNAME on Windows, HOSTNAME on Unix, or CLI command `hostname` (any OS)
  - sockets/named pipes on Windows must be prefixed with `\\.\pipe\`
  - Cannot `listen()` to a file descriptor on Windows

Native extensions:
  - Windows must npm install -g windows-build-tools as admin

Prompt:
  - ENVVAR PROMPT on Windows, PS1 on Unix

Shell:
  - ENVVAR ComSpec on Windows, SHELL on Unix
  - Windows has no ; but it has &&
  - OS.userInfo().shell is null

Available utilities:
  - no coreutils nor Bash
  - emulations:
     - msys/MinGW (part of Git Bash)
     - Cygwin: more extensive, similar to Wine but inverse
     - WSL (Windows Subsystem for Linux): alternative to Cygwin more focused on Linux
     - since they emulate Unix, should be closed to it than to Windows
  - `notepad.exe` usually available instead of `vi` on Windows

Errors:
  - most error types are OS-agnostic and start with `E*`
     - Windows has some specific ones starting with `W*`
  - different NERROR.errno (should use OS.constants.errno to translate)

Signals:
  - Windows does not have signals:
     - `taskkill` command can be used to terminate processes
     - Node.js abstract this though to allow few OS-agnostic signals
        - Windows does not allow terminating a process group though on Node.js
  - available:
     - OS-agnostic:
        - 0 (test process existence)
        - SIGINT (CTRL-C)
        - SIGTERM, SIGKILL
     - OS-agnostic but listen only, not process.kill() on Windows:
        - SIGBREAK (CTRL-BREAK on Windows, similar to CTRL-C)
        - SIGHUP (closing cmd.exe window)
        - SIGWINCH, SIGILL, SIGABRT, SIGFPE, SIGSEGV
     - only on Linux: SIGPOLL, SIGPWR, SIGUNUSED
     - only on Mac: SIGINFO
     - missing on Windows:
        - SIGSTOP|SIGTSTP|SIGCONT|SIGCHLD (background, CTRL-Z)
        - SIGQUIT (coredump, CTRL-\),
        - SIGUSR1 (start debugger), SIGTRAP (debugger)
        - SIGIOT, SIGBUS, SIGUSR2, SIGPIPE, SIGALRM, SIGSTKFLT, SIGTTIN, SIGTTOU,
          SIGURG, SIGXCPU, SIGXFSZ, SIGVTALARM, SIGPROF, SIGIO, SIGSYS
  - signals integers are different (should use OS.constants.signals to translate)

File stat:
  - STAT.atime not updated by fs.utimes() on Windows
  - STAT.birthtime[Ms] is only supported on Windows
  - STAT.blksize|blocks is undefined on Windows

Newline:
  - OS-independent: '\n' is LF, '\r' is CR
  - OS-dependent:
     - (CR+LF on Windows, LF others): terminal|file I/O
     - OS.EOL

Directory locations:
  - os.tmpdir(): `/tmp` on Linux, `/var/folders/RANDOM/T` on Mac, `C:\Users\USER\AppData\Local\Temp` (or ENVVAR T[E]MP) on Windows
  - os.homedir(): `/home/USER` on Linux, `/Users/USER` on Max, `C:\Users\USER` (or ENVVAR HOMEDRIVE|HOMEPATH) on Windows
  - ENVVAR PWD in Unix, ENVVAR CD on Windows

Identification:
  - process.platform: main way to test
  - os.platform|type|release(): more precise

Load:
  - os.loadavg() returns [0, 0, 0] on Windows
  - Windows does not have `nice`
     - `os.cpus().nice` is always `0`
  - `os.setPriority(PRIORITY_HIGHEST)` requires admin on Windows

Unicode:
  - cmd.exe uses CP866 charset instead of Unicode

Time precision:
  - process.hrtime() is 100ns-precise instead of 1ns-precise on Windows

nvm|npm:
  - must use nvm-windows on Windows
  - on Windows, must update npm with npm-windows-upgrade instead of npm install -g npm
