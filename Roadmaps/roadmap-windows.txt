
                   
   ROADMAP-WINDOWS  
                   



To do:
  - create a repo with all these explanations for how to write cross-OS node
     - check my Node.js doc file (look for "windows", "linux", "Mac" and "OS" in the file)
     - check nvm doc for their specifics on "windows"
     - check everything under `Iteroperability/OS` in my doc
     - check `cross-os` doc file
     - also check existing GitHub projects for this
  - portable-path (see its roadmap)
  - validate-path:
     - add `opts.portable: BOOL` (def: true): use `portable.path`
     - add tests, README, etc.

portable-node-guide

Errors:
  - Node errors `error.code` NERROR_NAME: most start with E* and are cross-OS. Some start with W* and are Windows-specific.
     - https://nodejs.org/api/errors.html#errors_error_code
     - https://nodejs.org/api/os.html#os_posix_error_constants
     - https://nodejs.org/api/os.html#os_windows_specific_error_constants
  - `error.errno` is OS-specific
     - https://nodejs.org/api/errors.html#errors_error_errno
  - conversions:
     - os.constants.errno[error.code] error.errno
        - https://nodejs.org/api/os.html#os_error_constants
     - util.getSystemErrorName(error.errno)->error.code
        - https://nodejs.org/api/util.html#util_util_getsystemerrorname_err

Native code:
  - on Windows, must first npm install -g windows-build-tools as admin
     - https://nodejs.org/api/addons.html

Node versions:
  - nvm-windows
  - nvs
  - npm-windows-upgrade

Continuous integration:
  - Travis
  - AppVeyor

Resources:
  - https://github.com/bcoe/awesome-cross-platform-nodejs
  - https://github.com/Microsoft/nodejs-guidelines
  - https://shapeshed.com/writing-cross-platform-node/

Locations:
  - temp dir:
     - cross-browser os.tmpdir() https://nodejs.org/api/os.html#os_os_tmpdir
     - example:
        - Linux: `/tmp`
        - Mac: `/var/folders/RANDOM/T`
        - Windows: `C:\Users\USER\AppData\Local\Temp`
  - home dir:
     - cross-browser os.homedir() https://nodejs.org/api/os.html#os_os_homedir
     - example:
        - Linux: `/home/USER`
        - Mac: `/Users/USER`
        - Windows: `C:\Users\USER`

Machine:
  - os.loadavg() returns [0,0,0] on Windows
     - https://nodejs.org/api/os.html#os_os_loadavg
  - os.cpus()[*].times.nice is always 0 on Windows
     - https://nodejs.org/api/os.html#os_os_cpus
  - cross-browser:
     - os.uptime() https://nodejs.org/api/os.html#os_os_uptime
     - os.freemem() https://nodejs.org/api/os.html#os_os_freemem
     - os.totalmem() https://nodejs.org/api/os.html#os_os_totalmem

Identification:
  - os.platform()->STR:
     - "linux", "darwin", "win32", "android" or "sunos", "aix", "freebsd", "openbsd"
     - https://nodejs.org/api/os.html#os_os_platform
  - os.type()->STR:
     - similar to platform() but slightly more precise.
     - e.g. "Linux", "Darwin", "Windows_NT", "CYGWIN_NT*", ""SunOS", "AIX", "FreeBSD", "OpenBSD"
     - https://nodejs.org/api/os.html#os_os_type
  - os.release()->STR
     - OS version number, e.g. "3.11.0-14-generic" (Linux), "18.0.0" (Mac), "10.0.17763" (Windows)
     - https://nodejs.org/api/os.html#os_os_release
  - os.arch()->STR
     - "arm[64]", "ia32", "x32|x64", "mips[el]", "ppc[64]", "s390[x]"
     - https://nodejs.org/api/os.html#os_os_arch
  - os.endianness()->STR
     - "BE" or "LE"
     - https://nodejs.org/api/os.html#os_os_endianness

Available utilities:
  - different core utils:
     - core OS syscalls are different
     - core utils are different, e.g. Windows has no coreutils nor Bash
     - usual application are different, e.g. `notepad.exe` instead of `vi` on Windows
  - Windows emulations on Unix:
     - Wine
        - https://www.winehq.org/
     - https://developer.microsoft.com/en-us/windows/downloads/virtual-machines
  - Unix emulations on Windows:
     - msys/MinGW (shipped with Git for Windows)
        - http://www.mingw.org/wiki/msys
        - https://gitforwindows.org/
     - Cygwin: more extensive, similar to Wine but inverse
        - https://www.cygwin.com/
     - WSL (Windows Subsystem for Linux): alternative to Cygwin more focused on Linux
        - https://docs.microsoft.com/en-us/windows/wsl/install-win10

Newline:
  - CR+LF on Windows, LR on Unix:
     - on terminal|file I/O
     - some applications (e.g. text editors) abstract this though
     - can use os.EOL
        - https://nodejs.org/api/os.html#os_os_eol
  - '\n' is always LF and '\r' always CR (OS-agnostic)

Configuration:
  - Unix: usually files in some predefined directory like `/etc/*`
  - Windows: usually inside the Windows registry, a central key-value store
     - https://docs.microsoft.com/en-us/windows/desktop/sysinfo/registry

Paths:
  - delimiter is / on Unix, \ on Windows
     - although / is most of the time (but not always) allowed on Windows
  - absolute path on Windows:
     - '\' (current drive)
     - 'LETTER:\'
        - can use even with relative paths, e.g. `C:path` is relative but `C:\path` is not
     - '\\HOST\' or '//HOST\' ("UNC path")
     - https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file

Symlinks:
  - Windows:
     - can use `junctions`, i.e. like hard link but actually mirrors
        - https://docs.microsoft.com/en-us/windows/desktop/fileio/hard-links-and-junctions
     - cannot create hard links on folders
     - has a 'create symlink' permission, which by default is only given to admins
        - https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links
  - FAT32 does not allow symlinks

Permissions:
 - main mechanism is different:
    - Unix uses POSIX permissions (chmod(), umask(), stat().mode, etc.)
       - https://linux.die.net/man/1/chmod
    - Windows uses a combination of:
       - file attributes:
          - readonly: no write|delete permission (regular file only)
          - hidden:
             - not listed by parent directory
             - there are options to turn it off both in CLI and GUI, unless `system` attribute is also set
          - system: used by OS
          - directory: is directory
          - reparse point: is symlink
          - others are not related to file permissions
          - https://docs.microsoft.com/en-us/windows/desktop/fileio/file-attribute-constants
       - file permissions / ACLs / NTFS permissions
          - https://docs.microsoft.com/en-us/windows/desktop/secauthz/access-control-lists
       - share permissions
 - executability on Windows:
    - means can be passed to an interpreter (since there is no shabang)
    - besides other permissions, also require extension to be among ENVVAR PATHEXT,
      a ;-separated list of file extensions
       - def: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
    - http://environmentvariables.org/PathExt
 - user identification: UID|GID on Unix, SID on Windows
    - os.userInfo().uid|gid is 0 on Windows
       - https://nodejs.org/api/os.html#os_os_userinfo_options
    - cross-browser os.userInfo().user
       - https://nodejs.org/api/os.html#os_os_userinfo_options

Commands execution:
  - shebang does not work on Windows, i.e. must always use an iterpreter (e.g. `node FILE`)
     - exceptions: `*.exe|com|cmd|bat`
     - https://en.wikipedia.org/wiki/Shebang_(Unix)
  - File extension can be omitted if inside PATHEXT on Windows
  - ENVVAR PATH:
     - delimiter is : on Unix and ; on Windows not :
     - different directories
     - https://en.wikipedia.org/wiki/PATH_(variable)

Shell:
  - Bash (usually) on Unix, `cmd.exe` on Windows:
     - os.userInfo().shell is null on Windows
        - https://nodejs.org/api/os.html#os_os_userinfo_options
  - cmd.exe is very different from Bash:
     - no ; but it has &&
     - flags use /OPT instead of "OPT"
     - escaping:
        - ^-escaping or "" for ^ & < > |
        - optional ^-escaping or "" for ' ` , ; = ( ) !
        - optional ^-escaping or "" for \-escaping for \ [ ] " . * ?
        - optional "-escaping for "
        - https://ss64.com/nt/syntax-esc.html
     - uses CP866 charset instead of Unicode
        - https://en.wikipedia.org/wiki/Code_page_866

Environment variables:
  - https://ss64.com/nt/syntax-variables.html
  - https://docs.microsoft.com/en-us/windows/desktop/procthread/environment-variables
  - https://en.wikipedia.org/wiki/Environment_variable
  - referencing:
     - $ENVVAR in Unix, %ENVVAR% in Windows
     - if missing, '' in Unix, '%ENVVAR%' as is in Windows
  - passing:
     - ENVVAR=VAL in Unix
     - Set ENVVAR=VAL or setx ENVVAR VAL [/M] in Windows (/M if requires admin)
  - listing: `env` in Unix, `set` in Windows
  - case-insensitive on Windows, case-sensitive on Unix
  - different names:
     - ComSpec on Windows, SHELL on Unix
     - PROMPT on Windows, PS1 on Unix
     - PWD in Unix, CD on Windows
     - HOME in Unix, HOMEDRIVE|HOMEPATH on Windows
     - TMPDIR in Unix, T[E]MP on Windows
     - USER on Unix, `USERDOMAIN\USERNAME` on Windows
     - COMPUTERNAME on Windows, HOSTNAME on Unix
        - can also use CLI command `hostname` (cross-OS)

Inter-process:
  - Windows does not have signals:
     - `taskkill` command can be used to terminate processes
        - https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/taskkill
  - signals integers are different between Linux and Mac, and some signals are different

Networking:
  - cannot use `{ fd: UINT }` on Windows with TCPSERVER.listen()
     - https://nodejs.org/api/net.html#net_server_listen_handle_backlog_callback
  - cross-browser os.networkInterfaces() https://nodejs.org/api/os.html#os_os_networkinterfaces
  - hostname:
     - cross-browser os.hostname() https://nodejs.org/api/os.html#os_os_networkinterfaces
  - sockets/named pipes on Windows must be prefixed with `\\.\pipe\`

Do a crawling for dead links
