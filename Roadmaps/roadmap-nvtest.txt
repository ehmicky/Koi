
                  
   ROADMAP-NVTEST  
                  



nvtest ...
  - run shell command "..." on multiple node.js versions
  - shell-agnostic
  - OS-agnostic
  - can also be run as NVTEST('SHELL_COMMAND', OPTS)
     - OPTS.output STREAM (def: process.stdout)

Uses npx -p node@VERSION SHELL_COMMAND
  - i.e. `node` in SHELL_COMMAND will use the right version
     - can run files with SHELL_COMMAND "node FILE"
     - can run JavaScript with SHELL_COMMAND "node -e STR"
     - since anything that uses node will use right version,
       works with npm tasks, Gulp, test runners, etc.
  - alternative implementations:
     - execute with libnpx instead of npx binary
     - use only `libnpx` parts we need, then use `execa`
     - use `node-bin-gen` + `execa`, do not use `libnpx`
        - this option might allow better caching
  - i.e. written in Node.js, not in Shell

Should use nyc nvtest ... not nvtest nyc ... i.e. merge test coverage for all Node.js versions.

Specifying versions:
  - abstract to its own package so it can be used by babel setup
     - then abstract babel setup to its own repo

Versions order:
  - in serial run: max to min
  - in output: min to max

-s|--serial|OPTS.serial BOOL
  - if false (def), parallel
  - if true, serial:
     - stop execution on first command with exit code !== 0

-r|--reporter|OPTS.reporter STR
  - among:
     - 'stream': print as is (including in parallel runs), but prepend each line with padded Node.version
     - 'full':
        - buffer so that versions output are not mixed
        - prepend each version output with a pretty line showing the Node.js version
     - 'pretty' (default):
        - like 'min' but Node.js versions that have exit code !== 0 print their output like 'full'
     - 'min':
        - one line per Node.version
        - show pending|check|cross symbol first, then padded Node.js version, then right-padded duration (when completed)
        - get inspiration from how testen looks
        - show an ora spinner on bottom

Make Travis only create single job for latest Node.js version
  - rename gulpfile.babel.js to gulpfile.js


OTHER PACKAGES ==>

nvget:
  - retrieve supported Node.js version of a local or remote package
  - option to guess by running npm install then nvtest (with npm test)
     - can customize command

nvlist:
  - retrieve supported Node.js version of all local packages, based in nvget
  - option to include devDeps
  - reporting: pretty, JSON, JSON stream, Unix stream

nvlint:
  - check nvlist against get-versions

nvstats:
   - data about running nvlist on all npm package
   - corrolated with other npm package information, like last update and popularity
  - "State of Node.js versions usage" website and blogs
      - can be sponsored
