
        
   SPYD  
        



On 13th September, submit nve to https://github.com/sindresorhus/awesome-nodejs if it has enough stars

Timeout if any process takes more than OPTS.duration without doing single loop

BENCHMARK.timestamp "TIMESTAMP"
  - DATE.toISOString() (UTC)

Git:
  - gp forbids push during weekdays
  - gc dates Monday-Sunday gradually to previous Sunday during daytime (e.g. 8am-22pm)

Process IPC:
  - use JSON stream:
     - e.g. { event: 'load', taskFile, skip BOOL }
  - pass paths files to write|read
  - pass as ENVVAR
  - by preference:
     - named pipe or anonymous pipe
     - regular temporary file
  - two files unless can use bidirectional pipe
  - check node "ipc" and see if it could work for this
  - reasons: not interfering with standard streams since they might be used by benchmarked command

OPTS.data 'DIR':
  - def: "PACKAGE_ROOT/spyd/"
     - PACKAGE_ROOT:
        - uses package.json (pkg-dir library)
        - if not found, use process.cwd()
  - save file to DATA_DIR/data.json
  - is OBJ:
     - benchmarks BENCHMARK_ARR

OPTS.save BOOL (def: false):
  - save current results to data file
  - pass to reporters but do not persist:
     - BENCHMARK.histogram|percentiles
        - default to [] when passed to reporters
        - when [] reporters should show "Not enough data" (but not throw)
     - BENCHMARK.iterations[*].previous BENCHMARK_ARR
     - BENCHMARK.iterations[*].stats.diff
     - BENCHMARK.iterations[*].slow

OPTS.store "MODULE"_ARR
  - module to store benchmarks
  - has members:
     - test(OPTS.data)->BOOL:
         - whether to use that store adapter
         - there can be several stores used at once
     - add(BENCHMARK)->PROMISE
     - remove(QUERY)->PROMISE_BENCHMARK
     - list()->PROMISE_BENCHMARK_ARR
     - get(QUERY)->PROMISE_BENCHMARK
  - QUERY is OBJ:
     - count NUM (>=1): NUMth previous one
     - timestamp "TIMESTAMP":
         - last <= one
         - full timestamp  (UTC)
  - builtin:
     - "file": main one
     - "http":
        - test(): OPTS.data must be HTTP[S] URL
        - add(): POST / BENCHMARK
        - list(): GET / -> BENCHMARK_ARR
        - get(): GET /?count|timestamp -> BENCHMARK_ARR with one element
        - remove(): DELETE /?count|timestamp -> BENCHMARK_ARR with one element
     - one for commercial SaaS

BENCHMARK.iterations[*].stats.diff NUM:
  - percentage of change of median since latest benchmark
     - for each iteration, use most recent benchmark that has this iteration (taskId + variationId + runnerId)
     - undefined if no previous benchmark
  - printedStats.diff '+|-NUM%'
     - padded (between +|- and NUM) so that all iterations[*].diff have same length
  - OPTS.diff:
     - false: stats.diff undefined
     - true (def): compare to last one
     - NUM: NUMth previous one
     - "TIMESTAMP":
        - not a precise timestamp but an upper limit. I.e. last benchmark with <=TIMESTAMP
        - can omit timezone: default to local timezone
        - can omit hours/minutes/seconds: default to 23:59:59
  - shown by reporters, e.g. green|red down|up arrow with time difference
  - allow comparing benchmarks with different BENCHMARK.system but warn on reporting using:
     - BENCHMARK.previousSystem OBJ:
        - reported as "Previous system:" after "System:"
        - only keep fields that are different
        - undefined if no differences
     - BENCHMARK.system.id 'HASH'
        - used by time series reporter to distinguish different systems

OPTS.show:
  - same argument as OPTS.diff (BOOL|NUM|"TIMESTAMP")
     - but default false
  - re-use a specific BENCHMARK in data file instead of doing new run
  - the following becomes relative to the BENCHMARK
     - OPTS.diff|remove BOOL|NUM "previous benchmark"
     - BENCHMARK.iterations[*].previous
     - OPTS.limit

OPTS.remove:
  - same argument as OPTS.diff (BOOL|NUM|"TIMESTAMP")
     - but default false
  - remove single benchmark
  - do not report it

OPTS.limit[.TASK_ID[.VARIATION_ID[.RUNNER_ID]]] NUM
  - NUM is max ITERATION.stats.diff
     - def: twice standard deviation
  - can be specified several times
  - TASK_ID|VARIATION_ID|RUNNER_ID:
     - can be *
     - default to *
  - ITERATION.slow BOOL
     - used by reporters
        - no CLI error message
  - if any ITERATION.slow true, exit code 1

spyd-runner-cli:
  - benchmark FILE
     - YAML
     - OBJ:
        - variables OBJ:
           - VAR "COMMAND"
        - variations OBJ_ARR:
           - id, title, value: like spyd-runner-node
              - value can be NUM|BOOL too: serialized to STR
        - TASK:
           - title, variations: like spyd-runner-node
           - before|after|main: like spyd-runner-node except as 'COMMAND'
        - shell BOOL
  - 'COMMAND':
     - FILE.shell BOOL:
        - for all 'COMMAND' in file
        - default true if spawning shell does not add too much duration|variance. Otherwise false. Check it.
           - if big difference, do not allow mix two files with different value
     - use execa(..., { shell: true }) (if shell true) or execa.command() (if shell false)
     - any exit code non-0 propagates the error, i.e. aborts run
  - variables:
     - templating on any STR value
        - done before spawning commands, i.e. shell-independent
     - {{VAR}}
        - can escape as {{{VAR}}}
     - can target:
        - ENVVAR
        - OBJ.variables.VAR
           - VAR must be 0-9a-zA-Z-_
        - {{variation}} (FILE.variations[*].value)
        - {{before}} (TASK.before output)
     - processed in order:
        - first FILE.variables, then everything but TASK.before|after|main, then TASK.before, then TASK.main|after
        - FILE.variables are processed even if not used
     - propagate errors (exit code non 0)
  - try to re-use spyd-runner-node where it makes sense:
     - copy the code first, then once runner complete, see what be refactored as shared code
     - check the parts that might not make sense due to measures being probably much slower (check each):
        - nowBias
        - repeat
        - cold starts
     - loopBias should:
        - take into account process spawning
        - use a very fast command, OS-specific (e.g. "true" on Unix)

Add progress reporters:
  - spinner with task name and current median
  - progress bar
  - both above (def)

Reporters:
  - types:
     - JSON
     - CLI list
     - CLI table
     - Markdown list
     - Markdown table
     - CLI graphs|histograms
     - CLI where the tasks are in both axis, and the cells are the difference in %
     - CLI with horizontal bars for medians
        - with full CLI width for slowest median
        - still show numbers on top of bars (or on their left side)
        - def reporter instead of simple CLI list, except when there is only one iteration
        - for Markdown too???
     - HTML
     - CLI reporter that shows BENCHMARK.iterations[*].previous as a time series
  - CLI|Markdown list:
     - follow the formatting I used in fast-cartesian example
        - simple list for TASK with no variations
  - CLI|Markdown tables:
     - variations as x axis, tasks as y axis
  - default reporter:
     - CLI|Markdown table if more than half of cells would be filled, and some TASK.variations are defined
        - CLI|Markdown list otherwise
     - Markdown table|list if OPTS.insert '*.md|*.markdown|README|readme'
        - CLI table|list otherwise
  - should use iteration.fastest BOOL for highlighting
  - Markdown|HTML reporters should add "Benchmarked with [spyd](https://github.com/ehmicky/spyd)" when REPORTER_OPTS.link true

BENCHMARK.ci OBJ:
  - CI information using library like ci-info
  - used e.g. by HTML reporter

BENCHMARK.git OBJ:
  - git information (commit, branch, etc.)
  - only if `git` installed
  - used e.g. by HTML reporter

Competitors benchmark:
  - benchmark with other benchmarking tools
  - each should benchmark Math.random() for the same duration
     - use different durations as variations
  - report both medians (for accuracy) and standard deviation (for precision)

Separate each reporter to own package
  - e.g. spyd-report-*
  - builtin reporters are required as production dependencies by core

Separate now.js to its own package

Separate resolution.js to its own package

Separate stats to its own package
  - compare with existing packages

Separate measuring part to its own package
  - child processes might be able to spawn only this instead of the full spyd package

Separate runners into own packages
  - e.g. spy-run-node
  - distributed with npm, JavaScript endpoint, but can otherwise use any programming language

Add other runners:
  - spyd-run-chrome (maybe using puppetter)
  - spyd-run-firefox (maybe using puppetter-firefox)
  - spyd-run-selenium
  - spyd-run-bash

Validation|testing utility to help people creating reporters, runners, progress reporters

Consider lowering the valid Node version for spyd-runner-node, so that `run.node.versions` can target lower versions

Add roadmap:
  - point to it from contribution doc to orient contributors towards features I want (e.g. HTML reporter)

Promote:
  - add keywords (GitHub, package.json)

Features:
  - most precise and accurate benchmarking
  - pretty reporting
  - comparison with previous benchmarks
  - performance testing
  - automatically insert latest benchmarks into your documentation
  - custom reporters
  - TypeScript support

Commercial offer:
  - reporting dashboard:
     - show time series (i.e. keep history)
        - should not lose history when change only the `title` of the function|variant
     - nice data visualization
     - should show function bodies
  - code editor for benchmark files:
     - run benchmarks (inside browser not on our servers)
     - send benchmark results to API (like what users would do on CI otherwise)
     - show results from API
     - i.e. can be used like jsperf
  - Sharing like jsperf:
     - allow users to run in their own browsers
  - PR bot
  - notifications
  - user should report benchmark results to our API
     - like Codecov does
     - i.e. we do not pay for infrastructure cost, except simple CRUD API to store benchmark results
     - should be integrated with CI (i.e. use `ci-info`)
  - pricing:
     - free for open source
     - pay per private repo
