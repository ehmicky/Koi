
        
   SPYD  
        


------------------------------- TEMPORARY


History:
  - remove CONF.store
  - save results to a `spyd` git branch
     - branch is created from init commit
        - i.e. does not hold reference to any parent commits
     - what if current branch has uncomitted changes???
        - temporary git worktree add + remove
        - or git stash + git checkout???
     - reasons to use git branch:
        - unlike using regular file in codebase:
           - does not pollute git log
           - does not require git push --force on the codebase
           - can update in CI without requiring developers to pull all the time
        - unlike git hash-object + git cat-file:
           - allows multiple files
           - does not create many tags
           - easy to understand
           - no risk of pruning
           - versioned
  - `sync` command:
     - git pull --rebase + git push `spyd` git branch
     - CONF.sync BOOL instead???
     - how to handle failures???
        - such as: authentication, git hooks, network, etc.
     - allows providing with CLI flags to configure git push|pull???
     - allow stdin???
     - print stdout|stderr always, or only on failures???
     - In CI, done by def???
     - reasons we separate local (CONF.save) and remote (`sync` command) read|write:
        - mimics git, i.e. easy to understand
        - much faster, since read|write mostly locally
        - easier to isolate, fix and understand many possible failures with git push|pull
  - file structure:
     - possible solutions???
        - one immutable FILE.json per result
           - con: slower to read
        - one mutable FILE.json for all results
           - con: slower to write
           - con: require automated git conflict resolution
           - con: much bigger git file size impact
        - immutable FILE.json for all results, progressively created
           - i.e. instead of appending|mutating, create a new FILE.json and remove previous one
           - con: slower to write
           - con: read potentially many duplicate results
           - con: much bigger git file size impact
     - performance???
        - read:
           - one *.json file for all results: 10ms per 1e3 results
           - one *.json file per result: 100ms per 1e3 results
        - write:
           - one *.json file for all results: 5ms (JSON.stringify()) + 2ms (writeFile()) per 1e3 results
              - must stringify each result separately due to max string size
     - cache file???
        - single JSON file with almost all results
        - read at beginning of any spyd command:
           - in parallel with readdir of individual results *.json
           - then still read individual results, but only ones not in cache file (using result.id)
              - is this even possible, or is the cache always matching the latest state of *.json???
        - written:
           - at end of any spyd command
           - including `sync`
        - use `.gitignore` in `spyd` branch to ignore it
           - reason: prevent merge conflicts
           - reason: less size in git repo
     - format: normal JSON, ndjson, or "almost JSON" (JSON without [], for appending)???
     - add comment that no need to make addResults() concurrent safe??? Reasons:
        - append will be concurrent safe on many situations since the number of bytes to write is fairly small
        - unlikely two benchmarks would end exactly at same time on same machine
        - not good practice to execute two benchmarks at same time on same machine
  - multi-branch history:
     - sort by:
        - branchIndex in lastResult.systems[*].git.branches
           - filter out if not in any of them
        - then by result.timestamp
           - filter out if result.timestamp > oldest result in child branch
        - should still keep results with same result.systems[*].ci together (as we already do)
     - reasons:
        - easy to understand|explain
        - preserve chronologic order
           - good for reporting
           - good for time-based deltas
        - not impacted by rebasing
        - does not require git, except for finding parent branches
        - mostly follows "git log" order
           - except for newest common commit of parent branch's result, if saved after current branch's first commit's result, but that's unlikely
     - what if user checkout previous commit and save result???
        - forbid saving then???
     - what if there is no current branch???
  - CONF.since commit|tag|branch:
     - if sinceResult not parent of targetResult, sincePrevious uses a different branch+parentBranches than targetResult's
        - reason: allow comparing branches
           - very useful for PRs, about to be merged|rebased onto
           - still preserving chronological order, except for lastResult
        - if sinceResult child of targetResult: return -1, i.e. empty `previous`
     - logic:
        - branch:
           - use last result in branch+parentBranches
           - reasons:
              - what user probably expects when comparing branches, or to parent branch
              - since branch is explictly named, try to use it if possible, not child branch
        - commit|tag:
           - get author date (not committer date)
              - using `git`
           - then find first result with result.timestamp >= authorDate, within same branch
              - reasons child branches not used:
                 - comparing between branches is most likely not wanted
                 - if sinceResult not parent, hard to know which child branch is wanted
              - if none found, find first previous result with result.timestamp < authorDate, within branch+parentBranches
                 - reasons:
                    - user might have meant this instead
                    - graceful fallback
     - if none found, returns -1, i.e. empty `previous`
     - reasons we do not use result.systems[*].git:
        - works with rebases (which modify commit hashes) and tag renames
        - more uniform behavior regardless of whether a result with specific commit|tag exists
     - add CONF.since "parent"
        - same as CONF.since "branch" with parent branch
        - def of CONF.since is still "1"
  - branch aliases
     - reason: do not lose connection between results when git branch renamed
     - result.systems[*].git.branches STR_ARR_ARR:
        - computed on result creation
        - includes all parent branches, in order
           - using `git`
              - previously merged|rebased branches should be ignored, using the branch they merged|rebased onto instead
        - includes all branch renames
           - using `git reflog`
     - on load:
        - find current branches using `git branch`
        - for each branch, add aliases using `git reflog`
        - group results by `git.branches` with at least one common element, and add to branch aliases
        - set normalized result.systems[*].git.branches STR_ARR
           - using the { "ALIAS_BRANCH" -> "CURRENT_BRANCH" } map
  - auto-delete results when git branch has been deleted
     - done on CONF.save
     - done by comparing `git branch` with result.systems[*].branches
        - including branch aliases
     - unless has tag that has not been deleted???
     - reasons:
        - performance of read|write
        - prevents different branches with same name (created at different times) to be connected
  - how does this work with PRs???
     - both from and not from fork
  - require git for CONF.save???
     - but not required otherwise???
     - require a minimum version???
     - both `git` binary and `.git` can be found???
     - reasons to store with git:
        - no need to setup any remote store|database
        - much faster (everything local)
        - easy to share results
        - easy to make it work with git branches
        - easier data conflict resolution
        - data is coupled with repository

CONF.system:
  - impact of new history concepts???
     - e.g. comparing machines in CI, or comparing different devs laptops
  - 'ID'[_ARR] instead of CONF.system 'ID'???
     - e.g. in CI, matching both OS and software version

CONF.remove true instead of `remove` command???
  - still ask for confirmation???

Reporting on `remove` command:
  - call reporters, like `show`
     - i.e. must accept same CONF.*, e.g. CONF.tasks|system
  - then prompt for removal confirmation
     - unless CONF.force true
  - do not print that confirmation removal suceeded (but print error if failed)

Combination ids:
  - needed for:
     - reporters
        - distinguish rows (task, step) vs columns (system, runner, variation)???
        - use titles instead of ids???
     - `exec`
     - limit errors
     - measure errors
        - fix it, so it shows all the combination categories
           - except the ones not useful, e.g. system (since there is only one per execution), or inputs if none are used, etc.
  - remove current row|column|addTitles() logic
  - remove combination categories where all combinations have same value:
     - exception: if all combination categories removed, show only task
  - if there are runnerConfig variable properties:
     - must be last
     - empty values (when on different runners) removed
        - i.e. different variable properties for different runners might be aligned together
     - columnName arrays should all have same length, by appending empty strings
        - i.e. if one runner has 1 variable property, and another has 2, the first gets an empty string appended

MAX_LOOPS:
  - use two arrays:
     - measures is the final one
     - extraMeasures:
        - used instead of measures when measures.length > MAX_LOOPS / 2
        - merged to measures when either:
           - extraMeasures.length > MAX_LOOPS / 2
           - combination ended
        - merge with ever-decreasing weight:
           - before each merge, increase extraWeight integer from 1
           - pick NUM measures and NUM2 extraMeasures
              - NUM2 = Math.round(extraMeasures.length / extraWeight)
              - NUM = (MAX_LOOPS / 2) - NUM2
           - use quantiles
              - for both arrays, always start with min and end with max, with even spaces between picked items
           - concatenate + adaptive sort
  - have a little buffer, doing the merge a little before extraMeasures is full, so the last process does not have very short maxLoops or maxDuration???
  - pass limit to runners too???
     - with number of loops left???
     - add a maxTimes??? Or named maxLoops???
        - or add estimated duration to maxDuration instead???
           - e.g. maxLoopsMore: maxLoopsLeft / CONF.concurrency
           - is it needed??? would it be ok if measures were slightly over the limit???
     - is it even a concern due to maxDuration???
  - ensure the computed `stats.loops` is correct even when going over MAX_LOOPS
  - how does this work considering measures are split between `measures` and an array of not-merged-yet `childMeasures`???
     - done during aggregation???
  - lower limit due to several combinations and sampleGroups at same time???
     - each combination should get same max amount, so they don't influence each other (except for the number of combinations making that max amount smaller)
  - would above change the measure profile, which defeats the point of longer benchmarks???
  - pick elements to remove randomly instead of using quantiles, so it keeps statistical profile
     - random pick should have a uniform distribution. E.g. Math.random() entropy is less than 1e7, i.e. many indexes will have 0 probability to be picked
  - alternative: just stop iteration
  - max length (1e8) also applies to HTTP body (unless streaming used), i.e. limit might need to be lower inside each sample???

Try to see if anything more can be removed from `node` runner, i.e. simplified for all runners

Abstract runner orchestration so it is easier to create a runner???
   - how???
      - maybe an execute which maintains a state machine (using combination.id) and returns next action???

Precision stat???
  - means difference between another benchmark with same settings
  - as opposed to standard deviation is variation between measures
  - how to compute???

Programmatic usage???

Localization:
  - CONF.lang "LANG"
     - e.g. "en_US"
     - def: "en_US", not guessed???
 - changes number formatting
 - translates text in reporters:
    - for common text like "Memory"
    - reporters use a translation utility which uses some shared translations, which can be augmented by contributors (not users)
 - translates titles:
    - allow titles.yml to optionally be OBJ: LANG: OBJ2
    - i.e. defined by users
 - what about units???
    - known units, e.g. duration
    - user-defined units

Slogan???
  - Current: Simple and precise benchmarking
  - Potential issues:
     - "benchmarking" might not be clear enough
     - remove "simple"??? there are simpler alternatives, e.g. just using for loops or console.time()
     - not enough stress on the great DX
        - use word "fun"??? "pretty"???

-------------------------------

plugin.config.PROP STR[_ARR]
  - for all plugins: reporter, progress, runner, store
  - meant for validation, using jest-validate (same validation as for CONF.*):
     - validate against unknown props
        - including automatic suggestion when using wrong case
     - if ARR, use multipleValidOptions()
  - required to use PROP
  - validate PROP matches /^[a-z][a-zA-Z\d]*$/
     - i.e. use - (not _ nor case) as delimiter
  - if STR starts with ./ ../ or /, add to `PATH_CONFIG_PROPS` during config file path resolution
     - no more need to pass `cwd` to stores
     - including for CONF.runnerId.tasks
        - i.e. CONF.runnerId.tasks in spyd.* is relative to `spyd.yml`'s directory

Context OBJ:
  - initialized to empty OBJ
     - passed to before|after
  - each task initializes its own context OBJ
     - reason: discourage inter-task communication
  - before each iteration, shallow copy that OBJ
     - i.e. each iteration has fresh copy
     - i.e. cannot communicate with next iteration
        - reason: might accidentally get previous iteration state, especially if property is set considitionally
        - other reason: ensure proper garbage collection
        - exception: top-level state, or in properties created during before()
  - passed as named argument
     - reason: bound FUNCs, including arrow FUNCs
  - after each step function (after both repeat+scale loops done), throw if `context` argument reference was changed:
      const oldContext = args.context
      ...
      if (args.context !== oldContext) { ... }
  - advantages over top-level scope (which can still be used)
     - not shared between tasks
     - not shared between iterations
     - does not require declaring a variable
  - add comments about problems with alternatives to single `context` OBJ:
     - separate `context` arguments for input and output (to next step)
        - information meant for later steps must be passed between several steps
     - `context` argument for input, return for output (to next step)
        - information meant for later steps must be passed between several steps
     - `{stepId}` argument for input, return for output
        - custom metrics cannot use `return`, using instead something like `args.measures.push(value)`
        - name conflict with any core argument
           - except inputs, which are validated against duplicates with steps
        - more complex to explain:
           - return vs context
           - `stepId` argument name
           - when repeating a step, only last iteration's return value is used

Step functions:
  - export one function per step, i.e. each task value is either:
     - FUNC: same as { main FUNC }
     - OBJ:
        - key is before|after|stepId
        - value is FUNC
  - each function is run serially
     - in the order functions were declarared (runner-specific)
  - steps can communicate to each other using `context`
     - the top-level or global scope can also be used
  - identifier:
     - stepId, i.e. exported OBJ key
     - runners should enforce "main" as the default stepId
     - validated like other combination user-defined ids: character validation, duplicate ids check
        - including CONF.steps.stepId
  - processes:
     - at benchmark start, when runner communicates available tasks to parent, it should also return available steps
        - returned as `tasks: { taskId: 'stepId'_ARR, ... }`
     - all steps of a given combination use same process
  - remove beforeEach|afterEach
     - rename beforeAll|afterAll to before|after
     - add comment that runners should avoid specific case for reserved exported names, since users might use different case convention for stepIds
  - each step is a combination category:
     - selection in CONF.include|exclude|limit|titles
     - part of CONF.rowName, not CONF.columnName
     - result.steps OBJ_ARR
     - combination.steps ARR
  - implementation:
     - runner:
        - on start, returns steps to parent
           - ARR in execution order
        - on measure, gets param `steps` OBJ_ARR: id "stepId", scale NUM, repeat NUM
           - ARR in execution order
        - do {
            const context = { ...beforeContext }
            const args = { context }

            for (const { id, scale, repeat } of steps) {
              while (scale--) {
                startTime()
                while (repeat--) {
                  steps[id](args)
                }
                endTime()
              }
            }
          } while (maxLoops--)
        - ensure:
           - last step measured is always real last step, i.e. does not leave state half-finished
           - each step run at least once
        - returns `measures` ARR_ARR_NUM
           - ARR in steps execution order
     - parent:
        - `measureDuration`, `aggregationCountdown` are for whole sample (it is already the case)
        - `maxLoops` = 100ms / sum(steps.map((step) => step.median * step.repeat * step.scale))
        - `combination.steps` OBJ_ARR: id "stepId", ...
           - for all step-wise state: measures, bufferedMeasures, stats, loops, times, repeat, calibrated
           - not for: everything related to minLoopDuration, samples
  - reporting:
     - report one separate table per step
        - step title should be in top-left corner
     - sorting between tables:
        - by step execution order
        - step groups:
           - right before their earliest child
           - if two step groups have same earliest child, decide using:
              - if latest child is earlier, comes first
              - otherwise, CONF.steps.* index
  - excluding steps with CONF.include|exclude:
     - like any other combination categories:
        - filtered out from the `combinations` array created by `getCombinations()`
        - not persisted in results
        - not reported
     - however, runners always run all steps of a given task, even if excluded
        - providing at least one combination for that task exist
        - i.e. parent process measuring logic ignores steps:
           - at the beginning of measuring logic, combinations with same task but different steps are grouped
           - parent process does not pass any information to runner process about steps, and runner runs them all
           - at the end of measuring logic, combinations are ungrouped to different steps
     - add comments explaining reasons why:
        - we always run all steps:
           - ensure cleanup steps are always run
           - ensure steps never miss data|state created by previous steps
           - users most likely want to restrict reporting, not measuring, when selecting steps with CONF.include|exclude
        - skipping steps is done through CONF.* instead of inside task files contents:
           - allow changing it as CLI flag
        - steps skipping requires user action (setting CONF.*) instead of providing some defaults:
           - encourage users to see steps durations before exclusing them from reporting
           - help users understand how steps can be toggled in/off in case they want to see skipped steps duration
        - we do not skip steps based on some stepId prefix (e.g. _):
           - CONF.include|excluse already provide the feature
           - it would be hard to allow users to explicitly report those steps both exclusively ("only _stepIds") and inclusively ("also _stepIds")
  - step groups:
     - behave like steps except:
        - specified with CONF.steps.stepId 'stepId'_ARR
           - ignored if empty ARR
           - reasons for the syntax:
              - allow non-consecutive steps
              - not verbose (unlike using stepId, e.g. using stepId common prefixes)
        - stats are based on a sum of the `measures` of their child steps
           - i.e. we must ensure the number of `measures` for a given tasks is same for each of its steps
     - computed after each sample
        - then persisted in stores
           - as opposed to being dynamically computed during reporting
        - reason: so we can use all `measures` for better stats
     - including|excluding step groups does not have impact on whether its children are included|excluded, and vice-versa
        - reason: users might want to see children only when need details
           - and vice-versa
     - to group all steps, must enumerate the ids of each of them
        - no "*" special token because:
           - it would only make sense if it groups only included steps
           - however:
              - included steps might be change dynamically with CONF.include|exclude
              - and user might not expect that "*" groups different steps then
              - it would also make comparison with previous benchmarks wrong if saved
           - instead, being explicit avoids any confusion
  - add comments about:
     - complex step order:
        - problems:
           - order of steps is static (must always be the same)
           - sub-steps must completly "cover" their parent step
              - e.g. does not allow parallel steps
           - if a step starts after another one, it must end before it
        - solution:
           - user must change the code being measured to allow for a serial mode
           - then add 2 variations, one serial (to measure child steps), one not (to measure parent steps)
     - reasons on why using individual step functions (as opposed to start|end('stepId') utility for example)
        - works with cli runner
        - more declarative, giving more information to core
        - simple interface
        - little room for user misuse, i.e. no need for lots of validation and documentation
        - allow reporting all the steps, including in-between them
        - does not require running the task to know which steps are used
        - does not require setting a default stepId
        - does not require lots of work for the runner
     - measuring logic that's not exposed to users:
        - i.e. different steps within the library implementation
        - should return an EventEmitter and wait for specific events inside each spyd step
     - why measureDuration should not vary based on number of steps (i.e. measures sum of all steps):
        - splitting a step should not change the sample target duration
        - better responsiveness
     - why before|after are not handled as special kinds of steps:
        - if user wants to measure them, should run them more than once, i.e. use a normal step
        - most users would use it for init|cleanup, i.e. do not want reporting
        - too many differences: only runs once, sets initial context, always at beginning|end, error handling, CONF.precise error handling, etc.

Automatic repeat:
  - `repeat` vs `scale`:
     - both passed to runner.measure()
     - both are per step (not per task)
     - repeat is inside timestamp, scale outside
         while (scale) { start = now(); while (repeat) { stepFunc() }; end = now() }
     - goal:
        - repeat: removing imprecision when step function is faster than resolution or timestamp computation
        - scale: fast steps should be run more often than slow steps because:
           - they are less precise, i.e. each iteration brings more value
           - they take a smaller percentage of the overall CONF.duration
  - `repeat` NUM: keep current logic as is
  - `scale` NUM
     - always passed to runner.measure()
     - value:
        - Math.round(maxStepDuration / currentStepDuration)
           - maxStepDuration = for current task, median duration of slowest step
           - currentStepDuration = median duration of current step
        - i.e. always 1 if single step
  - CONF.precise BOOL
     - def: false
     - if false and task has multiple steps, then:
        - for all steps of that task
        - `repeat` and `scale` are always 1
     - if true and task has multiple steps, then:
        - each step function must be idempotent
           - reason: they will be repeated in repeat|scale loops
        - including: cannot both read+write same property in neither arguments nor top-level scope
           - including:
              - stateful class instances like event emitters and streams
              - measuring any mutating function (e.g. ARR.sort())
        - possible solutions:
           - cloning arguments before mutating them
           - instead of CONF.precise true, increase step function complexity (including increasing input size)
           - split step into its own task
  - report imprecise steps
     - only if CONF.precise false and multiple steps
        - reason: result might be slightly imprecise due to approximation of the repeat algorithm
     - when, if repeat had been used, it would have been >1
     - set combination.imprecise BOOL
        - stats prettify logic prepends ~ to duration
        - only for specific steps with imprecise durations, not whole task
  - add comments:
     - reasons why CONF.precise:
        - does not allow selecting tasks:
           - simpler syntax BOOL
           - prevents comparing steps with very different `repeat` since they would be more|less optimized
        - is opt-in instead of opt-out:
           - adds idempotency constraint gradually, once users have understood first how steps work
           - make the default experience not appear buggy (due to users not understanding the flow)
     - problems with alternative solutions to CONF.scale|precise:
        - common to many of those solutions:
           - since steps share data, they must either have same number of repeats or be idempotent
              - this forbids top-level scope or global changes (e.g. filesystem):
                 - big constraint that might cause many users to make mistakes
           - number of repeats being sub-optimal
           - encourage manual user looping:
              - users should not have to worry about it, and rely on spyd instead
              - based on count instead of duration, which is less precise for faster tasks
              - users are most likely to pick a sub-optimal number of loops
           - require work from user, either in code or to learn utility
        - making user manually loop:
           - either in code or with CONF.repeat.* NUM
        - making CONF.scale the same for all steps of a given task:
           - slower steps would repeat more than needed leading them to:
              - increase task duration, potentially a lot
              - have poorer stats distribution
           - make fast steps run as much as slow steps, leading to poorer precision and inefficient use of total CONF.duration
        - utility to signal start|end of measuring in code:
           - duplicate solution than FUNC steps, which solve a similar problem
        - pass some repeat() utility to task
           - problem: the repeat number would only be known once the task has been run once
        - when deciding which step's optimal repeat number to pick, insteading of using the max, use some value in-between the min and max
           - for example, enforce a max ratio between the min and max
        - enforce the number of repeats does not go over CONF.duration
           - problem: does not work with CONF.duration 0|1
        - enforce the number of repeats does not go over specific duration, e.g. 1s
           - problem: increases sample duration, i.e. reduce responsiveness
           - problem: relies on hardcoded duration, which might not fit all machines' speeds

Manual mode:
  - opt-in
     - ignore all of this unless CONF.[steps.stepId.]manual defined for that step
     - reasons:
        - avoid functions returning value but not intended, e.g. when exported directly
        - avoid returning seconds or ms when ns is expected
  - CONF.[steps.stepId.]manual "UNIT"
     - if no stepId: all steps
     - i.e. same step from different tasks have same unit
        - including if single step for all tasks
  - use hardcoded list of units:
     - list:
        - duration: fs ps ns us|μs ms s m h d
           - i.e. allow custom duration
              - could be useful when task file is measuring another process, e.g. time spent on a server
        - %
        - bytes: B KB|KiB MB|MiB GB|GiB TB|TiB PB|PiB
           - also ...b (bits not bytes)
        - counts: x
     - enum validation:
        - reasons (as opposed to allow custom counts units):
           - simpler to explain
           - no need for case insensitivity
           - no need to validate max length
     - reasons why no empty string units:
        - ambiguous as user might either intend to use it to specify CONF.unit should not be used, or should be displayed with no units
        - forces distinguishing between different units
  - repeat loop still used
     - because automatic duration still measured, for CONF.rate
     - but do not set combination.imprecise
  - pass `steps[*].manual` true to runner:
     - each measure should then be an ARR of two values:
        - automatic duration NUM
        - step return VAL
  - must return NUM from step function
     - reasons, as opposed to set `measure` argument:
        - argument could be destructured, leading to assignment not working
        - argument would be used for too many things: inputs, message passing, manual measures
        - clear that return value has this type of semantics
     - reason why NUM instead of OBJ: works for every language, including cli runner
  - parent validates NUM:
     - for:
        - all tasks of a given step
        - all measures of a given combination
     - allow:
        - 0
        - floats
     - do not allow:
        - negative floats
        - not numbers
        - NaN and Infinity
        - undefined
  - combination.stats:
     - used for manual measures NUM
     - automatic durations are still:
        - measured (for CONF.rate) in combination.durationStats
        - used for calibration: maxLoops, scale
  - persisted at result.steps.stepId.manual "UNIT"
     - optional, including steps.stepId itself, to keep result small
     - on load, normalized to results.steps OBJ_ARR: id, manual
  - re-use existing unit-specific logic for:
     - automatic scaling
        - e.g. 'ns' -> 's' or 'B' -> 'MB'
     - significant digits|decimals
  - reporting sorting:
     - duration, %: asc
     - bytes, count: desc
     - do not allow configuring|overridding for the moment, to keep things simple, because most users won't need it
  - when merging combinations from different results with same stepId but different unit:
     - if same unit "kind" (duration, %, bytes|bits, count): allow comparing by normalizing stats during mergeResults():
        - find the lowest scale among all units, then multiply to it
        - if mixed manual + auto durations, turn all to manual durations
           - i.e. copy combination.stats to combination.durationStats
           - only if manual unit is duration
        - reason: not losing history when:
           - changing unit scale
           - switching from auto to manual duration
     - if different unit "kind":
        - only keep most recent unit, filtering out previous combinations with different unit kind
        - i.e. units are not a combination category

Rate:
  - CONF.[steps.stepId.]rate BOOL
     - def: false
  - reporting-only
     - not persisted in stores
     - reporting flag
  - changes the reported value:
     - duration: 1/medianDuration, i.e. times per duration
     - %, bytes, count: value/medianDuration, i.e. scales the left side
  - sorting order:
     - duration: inverted
     - %, bytes, count: kept
  - reported unit:
     - duration, count: "x/TIME_UNIT"
     - %, bytes: "UNIT/TIME_UNIT"
  - automatic scaling
     - duration, %, count: focused on TIME_UNIT
     - bytes: focused on UNIT, leaving TIME_UNIT as "s"

Variations:
  - some config properties can be optionally variable:
     - value PROP: { ID: VAL, ... } instead of VAL
     - PROP: variable property (whole combination category)
     - PROP + ID: variation
  - when merging results:
     - if some PROP uses variations in one result, but not in another
     - then use ID 'default' to convert so all instances of that PROP have a variable property
     - this allows keeping history continuity when introducing variations
  - only on any CONF.* that can change the results:
     - CONF.concurrency
     - CONF.inputs.{inputId}
     - not CONF.duration:
        - no reasons why users would want to measure with different CONF.duration
        - complicates implementation
     - any CONF.runner.{runnerId}.PROP
        - cartesian product only to combinations with that runner
  - each variable property is a separate combination category, distinct from others:
     - in CONF.include|exclude
     - in combination.columnName: several STR
     - result.variations OBJ_ARR_ARR, not OBJ_ARR
     - combination.variations ARR
  - variationId:
     - 'PROP.ID' (not just 'ID')
        - full property name
           - including `inputs.*` and `runnerId.*`
     - used as identifier like for other combination categories, including:
        - comparing between combinations (including between different benchmarks)
        - selecting with CONF.include|exclude|limit
     - no duplicate ID check:
        - reason: namespaces by property name, i.e. not needed
     - should validate ID (not full variationId) allowed characters using the same validation as taskId|systemId|inputId
  - variationTitle: default to same as id
  - variationValue: property VAL
  - set on result.* like other combination categories:
     - for combinations sorting, mean, rank, selection, etc.
     - result.variations OBJ_ARR_ARR: id STR, value VAL, title STR
     - combination.variations OBJ_ARR: id STR, value VAL, title STR
  - just like tasks and inputs, only reported in main reporting table, not in system info below it
  - if several variations have different runner.versions.VAR VAL, they are concatenated as a result.systems[*].versions.VAR ARR
     - printed as a comma-separated list by reporter prettify logic
     - does not mention which variation used which ones. It should be obvious enough from ids or titles
  - multiple inputs combination categories using variations:
     - i.e. CONF.inputs.inputId.ID VAL
     - input combination category is just like any other variation combination categories
        - including for cartesian product, CONF.include|exclude|limit
        - variationId is 'inputs.inputId.ID'
           - reasons we do not use shorter 'inputId.ID' instead:
              - forward compatiblity with future variable configuration properties
              - consistent/monomorphic, i.e. simpler to learn
           - like any variationId: no duplicate ID check
           - including with CONF.titles
     - inputId is only part of the variationId
        - used in `inputs` passed to runner.measure()

Rename CONF.preview to CONF.quiet
  - invert BOOL
  - document in CLI flag that reporters are still run
  - alias "q"

Rename both progress + live reporting to: [results] preview

If multiple reporters in the same terminal output at once, concatenate their outputs
  - including during results preview

Preview:
  - steps:
     - reporter.report()->STR:
        - done after each measures aggregation:
           - counted as part of the `aggregateDuration`
           - unless calibrated false
              - reason: if calibrated false, measures will be removed, which would create confusing reporting (e.g. for min|max)
              - other reason: during calibrated false, stats change a lot, creating flicker
     - do I/O using the last reporter.report() STR
        - done during the same interval function as progress bar
           - not counted as part of the `aggregateDuration`
  - both steps are:
     - also initially done right after combinations are available, showing no stats yet
     - only done if all of:
        - CONF.preview true
        - reporter.preview true (def: false)
           - check reporter.report() return value instead???
        - reporterConfig.output "-"
     - still use the same logic even when not printed, so that results are same regardless???
  - call reporter.report()->STR with same arguments as the final reporter.report():
     - including result being normalized
     - including having information from initial listResults() (e.g. for previous combinations and diff)
     - including all possible result.combinations, even ones not measured yet
     - also pass `percentage` and `time`
        - in case reporter is not shown in terminal and wants to show progress
        - not passed to final reporter.report()
     - excluding CONF.show, always empty
  - progress bar is appended to it:
     - performed right after each results preview
  - limit the amount of changes of the general shape of the output between the initial call and the final one, to make it look nicer
     - e.g. tables should be initially shown with all rows|columns and empty cells
  - when:
     - ending benchmark: clear preview. Report again (do not keep the last preview)
     - stopping benchmark once: clear preview. Report again (do not keep the last preview)
     - stopping benchmark twice: clear preview. Keep last preview
  - do not clear screen if either:
     - CONF.preview false
     - no reporters with reporter.preview true + reporterConfig.output "-"
        - i.e. if only progress bar printed, should not clear screen

Scrolling:
  - only during results preview
     - when either stopping or ending benchmark, report in full without scrolling
  - actions:
     - listen for UpArrow/k and DownArrow/j
     - keep track of current scroll amount
     - remove first and last lines before printing according to scroll amount
     - show top of screen initially, not bottom
  - instructions:
     - shown at bottom of screen, regardless of scroll amount
     - includes progress bar, i.e. is whole progress output
     - show:
         Up/Down: scroll
         CTRL-C: stop
  - not if output fits within process.stdout.rows
     - do not show scrolling instructions

Consider adding back reporter.start|end()

CONF.concurrency NUM
  - validate that CONF.concurrency NUM is integer >=1
  - each sample spawns NUM processes in parallel
     - always 1 in `exec` command and during `init`
     - start|end group of processes together
     - use same `params`, including `maxLoops`
     - if one process fails
        - the other ones should continue (for cleanup)
        - but the sample should then propagate error
  - handle spawn errors due to too many processes at once
     - try to remove process limit with ulimit, and see if another error can happen with a high CONF.concurrency, e.g. too many open files
  - add code comments that:
     - CONF.concurrency is meant to measure cost of parallelism
        - both CPU and I/O parallelism
     - if task is I/O bound, it can also improve precision by performing more measures, at the cost of accuracy (due to cost of parallelism)
        - the number where parallel processes start competing for CPU depends on how much duration the task spend on CPU vs I/O
        - above that number:
           - median measure increases much more
           - precision decreases much more
     - move the current code comment from src/measure/combination.js (about spawning processes serially)
     - why different processes instead of Promise.all() in a single process:
        - works for any runner
        - no global scope conflicts
        - uses multiple CPU cores

isAsync:
  - initial check for isAsync:
     - execute func once, without await
     - check if return value is promisable (using p-is-promise)
     - sets func.isAsync BOOL (originally undefined)
     - if isAsync, await return value
  - do the above when func.isAsync undefined && repeat 1
     - add code comment that repeat should always be 1 when func.isAsync undefined, and this probably won't change. It is more of a failsafe.
  - do the above in a `sync_async` dir, next to `sync` and `async` dirs
  - do the above independently for beforeEach, main and afterEach
  - always use await on beforeAll|afterAll, i.e. allow both sync and async
  - remove task.async BOOL

Quantiles|histogram:
  - persist in stores
  - some stats should have a space-efficient shape for stores, but be denormalized on load:
     - histogram:
        - denormalized: OBJ_ARR: low, high, frequency
        - normalized: ARR of [high, frequency]
     - quantiles:
        - denormalized: OBJ_ARR: percentage NUM, value NUM
        - normalized: NUM_ARR
     - both: use difference from median in durations
  - show in `debug` reporter

Add stats.p95

reporter.debugStats BOOL
  - def: false
  - true for `debug` reporter
  - if false, do not pass:
     - mean
        - add comment that we must ensure median is the main one used, so different reporters are consistent, and also because it is used in sorting combinations, and also it is less precise
     - times
        - add comment that it is a bad indicator of precision, and also might be confused as an indicator of speed due to other benchmark libraries showing it like that
     - minLoopDuration, samples, repeat, loops

Precision:
  - compare precision:
     - compare with multiple processes:
        - difference between combinations of single benchmark, vs between single combinations of different benchmarks
        - median vs standard deviation vs variation between processes
        - small CONF.duration vs big CONF.duration
  - note: using a "for loop" without spyd does work:
     - increasing the count makes the results more and more precise
     - the first 2 loops (regardless of the total count) always seem to be different from others
  - check if using a fixed, low amount of processes helps with precision???
  - find ways to improve precision even more???

Plugin shape should be validated

Error handling:
  - better way for all plugins (report, progress, stores, runners) to signal user error vs bugs
  - better handling of child process errors due to runner bugs (handled as user error right now)
  - plugin|core errors should print message to report GitHub issues to the plugin|core
     - it should include system information

day.js:
  - parse "timestamp" and "duration" delta format using day.js
  - serialize `result.timestamp` for reporting using day.js

CONF.debug BOOL
  - add debug information, for bug reports
  - add to issue template
  - for all commands
  - print:
     - resolved config
     - task files
     - runner.versions
     - combinations
     - each sample's state (including maxDuration, repeat, etc.)
     - last result, new result
  - do not call reporters

Allow with the node runner:
  - tasks.mjs
  - tasks.ts

Learn package 'simple-statistics' and use it in spyd???

When killing child process, should kill descendants too
  - e.g. with spyd-runner-cli and command 'yes', 'yes' keeps executing after timeout

Consider lowering the valid Node version for spyd-runner-node, so that `run.node.versions` can target lower versions

Create a store that works in GitHub actions???

Reporters:
  - types:
     - JSON
     - CLI list
     - CLI table
     - Markdown list
     - Markdown table
     - CLI graphs|histograms
     - CLI where the tasks are in both axis, and the cells are the difference in %
     - CLI with horizontal bars for medians
        - with full CLI width for slowest median
        - still show numbers on top of bars (or on their left side)
        - def reporter instead of simple CLI list, except when there is only one combination
        - for Markdown too???
     - HTML
     - CLI time series (with previous combinations)
  - CLI|Markdown list:
     - follow the formatting I used in fast-cartesian example
        - simple list for TASK with no inputs
  - CLI|Markdown tables:
     - inputs as x axis, tasks as y axis
  - default reporter:
     - CLI|Markdown table if more than half of cells would be filled, and some inputs are defined
        - CLI|Markdown list otherwise
     - Markdown table|list if CONF.insert '*.md|*.markdown|README|readme'
        - CLI table|list otherwise

Make `precise-now` work on browser + node

Split `precise-timestamp` to own repository
  - make it work on browser + node
  - problem with browser: performance.now() is made only ms-precise by browser due to security timing attacks

Separate into different repos:
  - some plugins are builtin, i.e. required as production dependencies by core
     - including spyd-run-node and spyd-run-cli (until more runners are created)
  - types: spyd-reporter|runner|store-*
  - spyd -> spyd (CLI) + spyd-core (non-CLI)

Clarify features in `README`:
  - most precise and accurate benchmarking
  - pretty reporting
  - history
  - performance testing
  - automatically insert latest results into your documentation
  - custom reporters
  - TypeScript support
  - CI-friendly

Add tests, documentation, etc.:
  - for all repos, including sub-repos
  - add keywords (GitHub, package.json)

Use key-value abstraction layers to add more built-in spyd-store-*

Utilities to help people creating reporters, runners, stores
  - GitHub template
  - test utility

Competitors benchmark:
  - benchmark with other benchmarking tools
  - each should measure Math.random() for the same duration
     - use different durations as inputs
  - report both medians (for accuracy) and standard deviation (for precision)

Add roadmap:
  - point to it from contribution doc to orient contributors towards features I want (e.g. HTML reporter)

Send PRs to do or redo benchmarks of repositories to
  - get user feedback
  - experience the library as a user
  - get visibility

Promote

Add other runners:
  - spyd-runner-chrome (maybe using puppetter)
  - spyd-runner-firefox (maybe using puppetter-firefox)
  - spyd-runner-selenium
  - spyd-runner-bash
  - spyd-runner-go

Commercial offer:
  - reporting dashboard:
     - show time series (i.e. keep history)
        - should not lose history when change only the `title` of the function|variant
     - nice data visualization
     - should show function bodies
  - code editor for tasks files:
     - perform benchmark (inside browser not on our servers)
     - send results to API (like what users would do on CI otherwise)
     - show results from API
     - i.e. can be used like jsperf
  - Sharing like jsperf:
     - allow users to benchmark in their own browsers
  - PR bot
  - notifications
  - user should report results to our API
     - like Codecov does
     - i.e. we do not pay for infrastructure cost, except simple CRUD API to store results
     - should be integrated with CI (i.e. use `ci-info`)
  - pricing:
     - free for open source
     - pay per private repo
