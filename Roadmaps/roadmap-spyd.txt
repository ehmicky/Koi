
        
   SPYD  
        



figures:
  - add ESM (https://github.com/sindresorhus/figures/issues/50)

Execa:
  - add `debugString` (https://github.com/sindresorhus/execa/issues/455)

Fix selection:
  - with `bench`, filters used during run, both explicit (CONF.select) and implicit (CONF.tasks|runner|inputs|system), should also be used in reporting
     - i.e. only measured combinations are reported
  - with `show|remove`, only explicit should be used, i.e. implicit CONF.* not allowed

Remove some stringWidth(), e.g. ones in histogram reporter

stats.medianLow|High NUM:
  - stats.median +|- stats.moe
  - undefined if either:
     - stats.moe undefined
     - CONF.showPrecision false
  - stats.median undefined if CONF.showPrecision true
     - i.e. reporters must use stats.medianLow|High instead
  - stats.medianLow 0 if negative
  - add moe to debugStats
  - reporters must show both:
     - histogram: two ticks
     - debug: two columns
     - bar: rectangle at end of bar, with both durations at the right of it "NUMms - NUM2ms"
  - reason: easier to visualize and compare with other combinations than printing the moe

stats.diff:
  - use arrow|triangle sign instead of +|-
  - if neutral:
     - use gray
     - use horizontal|verticalDoubleArrow|≈ sign
     - use absolute value
     - do not use CONF.limit
  - add comments why diff not:
     - hidden: users might think it is a bug if CONF.showDiff true uses
     - shown as 0%: users might notice the diff themselves, and use it, or think it is a bug
     - showing sign when neutral: diff should be insignificant, including direction
  - whether diff is reported as neutral should be based on a welch's t-test
     - replace current logic
     - not student's t-test because it assumes variances are the same
     - not mann-whitney u-test because:
        - we want compare medians, not full distribution
           - e.g. if distributions mostly overlap, it should not be shown as "equivalent", if one is clearly shifted to the right, since it is useful to know this, so the faster combination can be preferred by user
        - slower time complexity O(n^2)
        - more complex to implement
        - assumes both combinations have similar distributions
        - not as good with skewed distributions

Learn inquirer

`remove` command:
  - prompt for removal confirmation
     - after report (i.e. at beginning of `removeFromHistory()`)
     - do not print that confirmation removal succeeded
        - but still print error if failed
  - CONF.force BOOL
     - def: true if isInteractive(process.stdin)
     - alias "f"
     - if false:
        - no report
        - no prompt

In isInit(), do not do beforeAll|afterAll()

plugin.config.PROP STR[_ARR]
  - for all plugins: reporter, runner
  - meant for validation, using jest-validate (same validation as for CONF.*):
     - validate against unknown props
        - including automatic suggestion when using wrong case
     - if ARR, use multipleValidOptions()
  - required to use PROP
  - validate PROP matches /^[a-z][a-zA-Z\d]*$/
     - i.e. use - (not _ nor case) as delimiter
  - if STR starts with ./ ../ or /, add to `PATH_CONFIG_PROPS` during config file path resolution
     - including for CONF.runnerId.tasks
        - i.e. CONF.runnerId.tasks in spyd.* is relative to `spyd.yml`'s directory

Previous combinations:
  - result.previous[*].combinations ARR:
     - indexes of each combination match current result's combination
     - if no match, undefined, i.e. sparse ARR
  - no result.combinations[*].previous

Combinations filtering:
  - list all unique ids from all results
     - including currently measured result
     - then find their categories
  - order:
     - getCombinations()
     - fetchResults()
     - listIdsCategories()
     - selectCombinations()
  - use category when filtering
     - reason we need to know category: non-matching ids resolve differently if in different categories or not
     - unknown category (i.e. unknown id) should error
        - use levenstein distance to suggest typo (if close enough)
  - duplicate id validation should use all results ids
     - i.e. no new result id has a duplicate in a previous result with a different category

Categories:
  - combination.categories.CATEGORY "ID"
  - remove current result.categories OBJ_ARR
  - on report (not persisted in stores):
     - filter out unnecessary categories from combination.categories.CATEGORY
        - i.e. any category with 0|1 id
        - exception: if all categories are unnecessary, keep task
        - reason this is not persisted: when merging results, those categories might get additional ids
     - convert combination.categories.CATEGORY "ID" to OBJ:
        - id STR
        - title STR, titlePadded STR: using CONF.titles
           - done on load. CONF.showTitles() just omit those properties later
     - sort result.combinations by mean stats.median
        - do not add combination.*Rank nor categories.*.mean|rank
        - same priority order as result.categories ARR order
        - reason this is not persisted: order might change depending on CONF.select
     - set result.categories "CATEGORY"_ARR:
        - with all categories
        - sorted by: step, task, runner, system, variation
  - reporters rows|columns computation:
     - use result.categories, including ARR order
     - preserve result.combinations ARR order
     - when grouping categories (e.g. tables), filter out dimensions with no combinations, which can happen due to:
        - CONF.select
        - runnerConfig variations being runner-specific
  - getCombinationName(combination)->STR:
     - 'CATEGORY "ID",...'
     - ids, not titles
     - for: `exec`, limit errors, measure errors
     - should re-use some of the normalization happening for reporters:
        - result.categories ARR order
        - filter out unnecessary categories
     - not meant for reporters
  - CATEGORY: "task", "step", "runner", "system.{systemCategory}", "variation.{variationCategory}"
  - remove current row|column|addTitles() logic

Default ids:
  - add default ids on results load
     - for all possible categories with default ids
        - figure out possible variation categories by using all results categories
           - do not also use currently measured runners' possible configuration properties
              - because this is not available in `show|remove`, which would make CONF.select|limit behave differently between commands
     - i.e. missing category should behave like the category with its default id, including in:
        - CONF.select|limit
        - diff
        - reporting (e.g. when mixed with other results not missing the category)
     - per category:
        - task|runner: never missing
        - step: "main"
        - variation: "*_main" (see below)
        - system: "system_*" (see below)
  - when saving, remove default ids, to save space
  - validate that new result ids do not match possible default ids (unless same category):
     - "main": step
     - "*_main": variations
     - "system_*": system
  - add comments about:
     - problems with alternatives:
        - alternatives:
           - different categories -> different combinations
           - missing category match any id of that category
           - new category matches missing category, but not vice-versa (i.e. can add but not remove)
        - problems:
           - new category have multiple ids, and it is hard to know which ones the user expects to be compared to the previous missing category
           - same problem when removing a category, but in the other direction
           - when making a new result with a missing category, but previous results have that category, they should be kept in history
              - this happens for example when running locally but still want to see latest CI results

CONF.system "ID" -> CONF.system[.{systemCategory}] "ID"
  - CATEGORY is "system[.{systemCategory}]"
     - i.e. can use several categories
     - getCombinationName() should use only systemCategory
        - if systemCategory is default "main", use "system" instead
  - system id is "ID", without systemCategory
  - default systemCategory: "main"
     - unlike default id, this is persisted
  - default "ID": "system_{systemCategory}"
  - when sorting result.categories, system sorted:
     - after runner, before variation
     - by CONF.system ARR order
  - result.systems[*].categories:
     - before merging: OBJ where key is category, value is id
     - after merging:
        - OBJ_ARR_ARR: id STR, title STR, category STR
        - second ARR is when merging combinations with same shared props
     - reported as comma-separated list of space-separated lists
     - remove result.systems[*].id|title
  - merging:
     - create shared systems in decreasing number of shared categories:
        - first look for properties shared on all system categories. On any match:
           - create a shared system OBJ for it, unless either:
              - no shared properties
                 - except top-level one, at systems[0], always defined
              - another shared system has exact same properties:
                 - just append categories ids to it instead
           - remove props from the matching combinations, so they are not in two different system OBJs
        - then same for all categories minus 1|2|...
           - using all possible sets of "categories minus 1|2|..."
     - undefined values:
        - like other values when grouping
        - but cleaned after grouping
           - i.e. not printed by reporters

Variations:
  - some config properties can be optionally variable:
     - CONF.PROP { ID: VAL, ... } instead of CONF.PROP VAL
     - PROP: "variable property" or "variation category"
     - PROP + ID: variation
  - only on any CONF.* that can change the results:
     - CONF.concurrency
     - CONF.inputs.{inputId}
     - any CONF.runner{runnerId}.PROP
        - cartesian product only to combinations with that runner
     - add comment why not CONF.duration:
        - no reasons why users would want to measure with different CONF.duration
        - complicates implementation
  - CATEGORY is "variation.{variationCategory}"
     - i.e. each variable property is a category
     - variationCategory is property VARR (dot-delimited)
     - getCombinationName() should remove "variation." prefix from CATEGORY
  - when sorting result.categories, variations sorted:
     - at end
     - input, then concurrency, then runnerConfig
     - input: sorted by CONF.inputs OBJ order
     - runnerConfig sorted by:
        - CONF.runner ARR order
        - then config prop name, alphabetically
  - add combination.config CONF_OBJ
     - not persisted in history nor used in report
     - contains config, with combination-specific variations
  - variation id is 'ID', not 'PROP.ID'
  - default id is "PROP_main"
     - PROP is only last property
     - exception: PROP is last two properties (_-separated) when either:
        - two variable properties have same last property
        - PROP is "system" (e.g. in runnerConfig), to avoid conflict with system default ids
  - if several variations have different runner.versions.VAR VAL, they are concatenated as a result.systems[*].versions.VAR STR (commaSpace-separated list)
     - does not mention which variation used which ones. It should be obvious enough from ids or titles
  - when using several runners and runnerConfig variations, the other runners will not have those variations
     - should still set combination.categories.{variationCategory} on those combinations, but with id "", title "", titlePadded " ... "
     - when filtering unnecessary categories, should exclude ones with id ""
     - should all be in result.categories "CATEGORY"_ARR
  - result.variations.{variationCategory} VAL
     - persisted in history
        - used the most recent value
     - on report:
        - set combination.categories.{variationCategory}.value VAL
           - should only be reported by reporters able to show details
        - remove result.variations

Context OBJ:
  - initialized to empty OBJ
     - passed to before|after
  - each task initializes its own context OBJ
     - reason: discourage inter-task communication
  - before each iteration, shallow copy that OBJ
     - i.e. each iteration has fresh copy
     - i.e. cannot communicate with next iteration
        - reason: might accidentally get previous iteration state, especially if property is set considitionally
        - other reason: ensure proper garbage collection
        - exception: top-level state, or in properties created during before()
  - passed as `this`
     - check whether FUNC.call(context) or FUNC.bind(context) is faster
        - probably bind() since it can be done once during init
     - should document that does not work with arrow function nor bound function, i.e. must be avoided
     - try to validate against binding step functions
        - only if multiple steps
  - should be passed to step function even when single step
     - reasons:
        - stats do not vary depending on whether there is a single step or not
        - more monomorphic
  - forbid inputId named `context`, to allow other runners to pass `context` alongside named arguments
  - add comments about:
     - advantages over using a named argument:
        - cannot re-assign `this`, i.e. no need to validate it
        - simpler syntax (no need to retrieve from arguments)
        - intuitive|common pattern in JavaScript
        - clearer separation between inputs and context
     - advantages over top-level scope (which can still be used)
        - not shared between tasks
        - not shared between iterations
        - does not require declaring a variable
     - problems with alternatives to single `context` OBJ:
        - separate `context` arguments for input and output (to next step)
           - information meant for later steps must be passed between several steps
        - `context` argument for input, return for output (to next step)
           - information meant for later steps must be passed between several steps
        - `{stepId}` argument for input, return for output
           - custom metrics cannot use `return`, using instead something like `args.measures.push(value)`
           - name conflict with any core argument
              - except inputs, which are validated against duplicates with steps
           - more complex to explain:
              - return vs context
              - `stepId` argument name
              - when repeating a step, only last iteration's return value is used

Steps:
  - export one function per step, i.e. each task value is either:
     - FUNC: same as { main FUNC }
     - OBJ:
        - key is before|after|stepId
        - value is FUNC
  - in documentation:
     - encourage `export const TASK = { STEP() {...}, ... };`
     - as opposed to `const TASK_STEP = function() {...}; export const TASK = { STEP: TASK_STEP, ... };`
  - each function is run serially
     - in the order functions were declarared (runner-specific)
  - steps can communicate to each other using `context`
     - the top-level or global scope can also be used
  - stepId:
     - exported OBJ key
     - runners should enforce "main" as the default stepId
        - i.e. must return `tasks` `{ taskId: ['main'] }` to parent
     - validated like other combination user-defined ids: character validation, duplicate ids check
  - processes:
     - at benchmark start, when runner communicates available tasks to parent, it should also return available steps
        - returned as `tasks: { taskId: 'stepId'_ARR, ... }`
     - all steps of a given combination use same process
  - remove beforeEach|afterEach
     - rename beforeAll|afterAll to before|after
     - add comment that runners should avoid specific case for reserved exported names, since users might use different case convention for stepIds
  - each step is a combination category
  - implementation:
     - runner:
        - on start, returns steps to parent
           - ARR in execution order
        - on measure, gets param `steps` OBJ_ARR: id "stepId", scale NUM, repeat NUM
           - ARR in execution order
        - do {
            const context = { ...beforeContext }
            const args = { context }

            for (const { id, scale, repeat } of steps) {
              while (scale--) {
                startTime()
                while (repeat--) {
                  steps[id](args)
                }
                endTime()
              }
            }
          } while (maxLoops--)
        - ensure:
           - last step measured is always real last step, i.e. does not leave state half-finished
           - each step run at least once
        - returns `measures` ARR_ARR_NUM
           - ARR in steps execution order
     - parent:
        - `measureDuration`, `aggregationCountdown` are for whole sample (it is already the case)
        - `maxLoops` = 100ms / sum(steps.map((step) => step.median * step.repeat * step.scale))
        - `combination.steps` OBJ_ARR: id "stepId", ...
           - for all step-wise state: measures, bufferedMeasures, stats, loops, times, repeat, calibrated
           - not for: everything related to minLoopDuration, samples
        - total `benchmarkDuration` does not vary with number of steps
           - fix preview logic (at the moment, it uses combinations.length * CONF.duration)
           - also `measureDuration` measures sum of all steps
           - add comments why:
              - new steps are more likely to be due to splitting existing steps than adding new ones
              - adding steps does not increase `measureDuration`, i.e. decrease preview responsiveness
              - with CONF.select, all steps are still run.
                It is simpler to explain this by documenting that steps never influence total benchmark duration
  - result.steps OBJ_ARR: id 'STR'
     - for all steps, even if not measured
     - ARR is sorted by step execution order
        - two tasks might run steps in different order
           - including between different results
        - i.e. use the step mean order:
           - percentage of step index within its task's steps ARR
              - 0 for first step, 1 for last step
           - take the arithmetic mean between all tasks defining that step
           - if two steps equal, use stepId alphabetical order
        - step groups:
           - right before their earliest child
           - if two step groups have same earliest child, decide using:
              - if latest child is earlier, comes first
              - otherwise, use stepId alphabetical order
  - reporting:
     - report one separate table per step
        - step title should be in top-left corner
     - sorting between tables: by result.steps ARR order
  - excluding steps with CONF.select:
     - like any other combination categories:
        - filtered out from the `combinations` array created by `getCombinations()`
        - not persisted in results
        - not reported
     - however, runners always run all steps of a given task, even if excluded
        - providing at least one combination for that task exist
        - i.e. parent process measuring logic ignores steps:
           - at the beginning of measuring logic, combinations with same task but different steps are grouped
           - parent process does not pass any information to runner process about steps, and runner runs them all
           - at the end of measuring logic, combinations are ungrouped to different steps
     - add comments explaining reasons why:
        - we always run all steps:
           - ensure cleanup steps are always run
           - ensure steps never miss data|state created by previous steps
           - users most likely want to restrict reporting, not measuring, when selecting steps with CONF.select
        - skipping steps is done through CONF.* instead of inside task files contents:
           - allow changing it as CLI flag
        - steps skipping requires user action (setting CONF.*) instead of providing some defaults:
           - encourage users to see steps durations before exclusing them from reporting
           - help users understand how steps can be toggled in/off in case they want to see skipped steps duration
        - we do not skip steps based on some stepId prefix (e.g. _):
           - CONF.select already provide the feature
           - it would be hard to allow users to explicitly report those steps both exclusively ("only _stepIds") and inclusively ("also _stepIds")
  - step groups:
     - behave like steps except:
        - specified with CONF.steps.stepId 'stepId'_ARR
           - ignored if empty ARR
           - reasons for the syntax:
              - allow non-consecutive steps
              - not verbose (unlike using stepId, e.g. using stepId common prefixes)
        - stats are based on aggregation of other steps stats
           - use other steps stats, not `measures` because the number of `measures` might differ between steps when CONF.precise true
              - add comment that could in principle use `measures` when CONF.precise false, but does not because:
                 - it would make stats differ between CONF.precise true|false
                    - this is confusing and might lead some users to use CONF.precise false
                    - using CONF.precise true|false should only change precision, not accuracy
                 - it would give better stats for step groups, discouraging CONF.precise true
                 - it is slower
           - how:
              - samples|minLoopDuration: any
              - median|mean|quantiles|min|max|loops|times: add
              - repeat: Math.round(loops / times)
              - stdev: mean
              - histogram: merge histograms (find solution online)
     - persisted in history
        - as opposed to being dynamically computed during reporting
        - reason: allows not losing history when:
           - step group change which steps it includes
           - or their names
           - or whether it is a step group or a normal step
     - including|excluding step groups does not have impact on whether its children are included|excluded, and vice-versa
        - reason: users might want to see children only when need details
           - and vice-versa
     - can target another step group
        - error if cycle
     - special stepId "all":
        - only allowed in steps.{stepId} ARR
           - when present, do not allow other values in ARR
        - select all available steps
           - including ones not measured|included
        - forbid "all" as a stepId name, either normal step or step group
  - `maxLoops` should be divided by number of steps, for the current combination, since all steps measures are in-memory at once
  - add comments about:
     - complex step order:
        - problems:
           - order of steps is static (must always be the same)
           - sub-steps must completly "cover" their parent step
              - e.g. does not allow parallel steps
           - if a step starts after another one, it must end before it
        - solution:
           - user must change the code being measured to allow for a serial mode
           - then add 2 variations, one serial (to measure child steps), one not (to measure parent steps)
     - reasons on why using individual step functions (as opposed to start|end('stepId') utility for example)
        - works with cli runner
        - more declarative, giving more information to core
        - simple interface
        - little room for user misuse, i.e. no need for lots of validation and documentation
        - allow reporting all the steps, including in-between them
        - does not require running the task to know which steps are used
        - does not require setting a default stepId
        - does not require lots of work for the runner
     - measuring logic that's not exposed to users:
        - i.e. different steps within the library implementation
        - should return an EventEmitter and wait for specific events inside each spyd step
     - why before|after are not handled as special kinds of steps:
        - if user wants to measure them, should run them more than once, i.e. use a normal step
        - most users would use it for init|cleanup, i.e. do not want reporting
        - too many differences: only runs once, sets initial context, always at beginning|end, error handling, CONF.precise error handling, etc.

Automatic repeat:
  - `repeat` vs `scale`:
     - both passed to runner.measure()
     - both are per step (not per task)
     - repeat is inside timestamp, scale outside
         while (scale) { start = now(); while (repeat) { stepFunc() }; end = now() }
     - goal:
        - repeat: removing imprecision when step function is faster than resolution or timestamp computation
        - scale: fast steps should be run more often than slow steps because:
           - they are less precise, i.e. each iteration brings more value
           - they take a smaller percentage of the overall CONF.duration
  - `repeat` NUM: keep current logic as is
  - `scale` NUM
     - always passed to runner.measure()
     - value:
        - Math.round(maxStepDuration / currentStepDuration)
           - maxStepDuration = for current task, median duration of slowest step
           - currentStepDuration = median duration of current step
        - i.e. always 1 if single step
  - CONF.precise BOOL
     - def: false
     - if false and task has multiple steps, then:
        - for all steps of that task
        - `repeat` and `scale` are always 1
     - if true and task has multiple steps, then:
        - each step function must be idempotent
           - reason: they will be repeated in repeat|scale loops
        - including: cannot both read+write same property in neither arguments nor top-level scope
           - including:
              - stateful class instances like event emitters and streams
              - measuring any mutating function (e.g. ARR.sort())
        - possible solutions:
           - cloning arguments before mutating them
           - instead of CONF.precise true, increase step function complexity (including increasing input size)
           - split step into its own task
  - report imprecise steps
     - only if CONF.precise false and multiple steps
        - reason: result might be slightly imprecise due to approximation of the repeat algorithm
     - when, if repeat had been used, it would have been >1
     - set combination.imprecise BOOL
        - stats prettify logic prepends ~ to duration
        - only for specific steps with imprecise durations, not whole task
  - add comments:
     - reasons why CONF.precise:
        - does not allow selecting tasks:
           - simpler syntax BOOL
           - prevents comparing steps with very different `repeat` since they would be more|less optimized
        - is opt-in instead of opt-out:
           - adds idempotency constraint gradually, once users have understood first how steps work
           - make the default experience not appear buggy (due to users not understanding the flow)
     - problems with alternative solutions to CONF.scale|precise:
        - common to many of those solutions:
           - since steps share data, they must either have same number of repeats or be idempotent
              - this forbids top-level scope or global changes (e.g. filesystem):
                 - big constraint that might cause many users to make mistakes
           - number of repeats being sub-optimal
           - encourage manual user looping:
              - users should not have to worry about it, and rely on spyd instead
              - based on count instead of duration, which is less precise for faster tasks
              - users are most likely to pick a sub-optimal number of loops
           - require work from user, either in code or to learn utility
        - making user manually loop:
           - either in code or with CONF.repeat.* NUM
        - making CONF.scale the same for all steps of a given task:
           - slower steps would repeat more than needed leading them to:
              - increase task duration, potentially a lot
              - have poorer stats distribution
           - make fast steps run as much as slow steps, leading to poorer precision and inefficient use of total CONF.duration
        - utility to signal start|end of measuring in code:
           - duplicate solution than FUNC steps, which solve a similar problem
        - pass some repeat() utility to task
           - problem: the repeat number would only be known once the task has been run once
        - when deciding which step's optimal repeat number to pick, insteading of using the max, use some value in-between the min and max
           - for example, enforce a max ratio between the min and max
        - enforce the number of repeats does not go over CONF.duration
           - problem: does not work with CONF.duration 0|1
        - enforce the number of repeats does not go over specific duration, e.g. 1s
           - problem: increases sample duration, i.e. reduce responsiveness
           - problem: relies on hardcoded duration, which might not fit all machines' speeds

Manual mode:
  - opt-in
     - ignore all of this unless CONF.[steps.stepId.]manual defined for that step
     - reasons:
        - avoid functions returning value but not intended, e.g. when exported directly
        - avoid returning seconds or ms when ns is expected
  - CONF.[steps.stepId.]manual "UNIT"
     - if no stepId: all steps
     - i.e. same step from different tasks have same unit
        - including if single step for all tasks
  - use hardcoded list of units:
     - list:
        - duration: fs ps ns us|μs ms s m h d
           - i.e. allow custom duration
              - could be useful when task file is measuring another process, e.g. time spent on a server
        - %
        - bytes: B KB|KiB MB|MiB GB|GiB TB|TiB PB|PiB
           - also ...b (bits not bytes)
        - counts: ops
     - enum validation:
        - reasons (as opposed to allow custom counts units):
           - simpler to explain
           - no need for case insensitivity
           - no need to validate max length
     - reasons why no empty string units:
        - ambiguous as user might either intend to use it to specify CONF.unit should not be used, or should be displayed with no units
        - forces distinguishing between different units
  - repeat loop still used
     - because automatic duration still measured, for CONF.rate
     - but do not set combination.imprecise
  - pass `steps[*].manual` true to runner:
     - each measure should then be an ARR of two values:
        - automatic duration NUM
        - step return VAL
  - must return NUM from step function
     - reasons, as opposed to set `measure` argument:
        - argument could be destructured, leading to assignment not working
        - argument would be used for too many things: inputs, message passing, manual measures
        - clear that return value has this type of semantics
     - reason why NUM instead of OBJ: works for every language, including cli runner
  - parent validates NUM:
     - for:
        - all tasks of a given step
        - all measures of a given combination
     - allow:
        - 0
        - floats
     - do not allow:
        - negative floats
        - not numbers
        - NaN and Infinity
        - undefined
  - combination.stats:
     - used for manual measures NUM
     - automatic durations are still:
        - measured (for CONF.rate) in combination.durationStats
        - used for calibration: maxLoops, scale
  - persisted at result.steps[*].manual "UNIT"
  - re-use existing unit-specific logic for:
     - automatic scaling
        - e.g. 'ns' -> 's' or 'B' -> 'MB'
     - significant digits|decimals
  - reporting sorting:
     - duration, %: asc
     - bytes, count: desc
     - do not allow configuring|overridding for the moment, to keep things simple, because most users won't need it
  - when merging combinations from different results with same stepId but different unit:
     - if same unit "kind" (duration, %, bytes|bits, count): allow comparing by normalizing stats during mergeResults():
        - find the lowest scale among all units, then multiply to it
        - if mixed manual + auto durations, turn all to manual durations
           - i.e. copy combination.stats to combination.durationStats
           - only if manual unit is duration
        - reason: not losing history when:
           - changing unit scale
           - switching from auto to manual duration
     - if different unit "kind":
        - only keep most recent unit, filtering out previous combinations with different unit kind
        - i.e. units are not a combination category

Rate:
  - CONF.[steps.stepId.]rate BOOL
     - def: false
  - reporting-only
     - not persisted in history
     - reporting flag
  - changes the reported value:
     - duration: 1/medianDuration, i.e. times per duration
     - %, bytes, count: value/medianDuration, i.e. scales the left side
  - sorting order:
     - duration: inverted
     - %, bytes, count: kept
  - reported unit:
     - duration, count: "ops/TIME_UNIT"
     - %, bytes: "UNIT/TIME_UNIT"
  - automatic scaling
     - duration, %, count: focused on TIME_UNIT
     - bytes: focused on UNIT, leaving TIME_UNIT as "s"

CONF.concurrency NUM
  - validate that CONF.concurrency NUM is integer >=1
  - each sample spawns NUM processes in parallel
     - always 1 in `exec` command and during `init`
     - start|end group of processes together
     - use same `params`, including `maxLoops`
     - if one process fails
        - the other ones should continue (for cleanup)
        - but the sample should then propagate error
  - handle spawn errors due to too many processes at once
     - try to remove process limit with ulimit, and see if another error can happen with a high CONF.concurrency, e.g. too many open files
  - add code comments that:
     - CONF.concurrency is meant to measure cost of parallelism
        - both CPU and I/O parallelism
     - if task is I/O bound, it can also improve precision by performing more measures, at the cost of accuracy (due to cost of parallelism)
        - the number where parallel processes start competing for CPU depends on how much duration the task spend on CPU vs I/O
        - above that number:
           - median measure increases much more
           - precision decreases much more
     - move the current code comment from src/measure/combination.js (about spawning processes serially)
     - why different processes instead of Promise.all() in a single process:
        - works for any runner
        - no global scope conflicts
        - uses multiple CPU cores

isAsync:
  - initial check for isAsync:
     - execute func once, without await
     - check if return value is promisable (using p-is-promise)
     - sets func.isAsync BOOL (originally undefined)
     - if isAsync, await return value
  - do the above when func.isAsync undefined && repeat 1
     - add code comment that repeat should always be 1 when func.isAsync undefined, and this probably won't change. It is more of a failsafe.
  - do the above in a `sync_async` dir, next to `sync` and `async` dirs
  - do the above independently for beforeEach, main and afterEach
  - always use await on beforeAll|afterAll, i.e. allow both sync and async
  - remove task.async BOOL

History:
  - save results to a `spyd` git branch
     - branch is created from init commit
        - i.e. does not hold reference to any parent commits
     - includes `README.md` explaining the branch
     - switches to `spyd` git branch using git worktree:
        - for both CONF.save and load
        - on load: only if `spyd` branch exists
        - temporary git worktree add + remove
           - using global temp dir
              - filename should be random ID because:
                 - concurrency
                 - prevent re-using previous worktree if not cleaned up
           - use `try {} finally {}` to ensure git worktree remove is called
           - reasons:
              - works even if uncommitted changes
              - faster and less risky than git stash
     - reasons to use git branch:
        - unlike using regular file in codebase:
           - does not pollute git log
           - does not require git push --force on the codebase
           - can update in CI without requiring developers to pull all the time
        - unlike git hash-object + git cat-file:
           - allows multiple files
           - does not create many tags
           - easy to understand
           - no risk of pruning
           - versioned
  - `sync` command:
     - git pull --rebase + git push, on `spyd` git branch
        - git push not run if we know locally there is nothing to push
        - retry (including git pull --rebase) if git push failed due to conflict
           - fails if git fails for any other reasons
           - fails if merge conflict, asking user to fix it
     - stdin|stdout|stderr "inherit" on git pull|push
        - reasons:
           - allow entering passwords
           - show any error message such as: authentication, git hooks, network, etc.
           - provide with progress
        - not on other git commands
        - also prints headers with cyan "Pulling latest results..." and "Pushing new results..."
        - only if CONF.quiet false
     - reasons we separate local (CONF.save) and remote (`sync` command) read|write:
        - mimics git, i.e. easy to understand
        - much faster, since read|write mostly locally
        - easier to isolate, fix and understand many possible failures with git push|pull
  - file structure:
     - individual results:
        - at /benchmark/history/FILE.json
           - FILE is result.id
        - one immutable FILE.json per result
           - i.e. single OBJ
        - reasons (as opposed to single file for all results):
           - fast to create new results
           - does not create git conflicts
           - concurrent safe
           - small file size impact in git history
        - format is JSON
           - reason: fast
     - cache file:
        - at GLOBAL_CACHE_DIR/spyd/history/{HASH}.json
           - HASH is .git/ absolute file path, normalized, symlink-resolved, SHA1-hashed
           - reasons:
              - remove reliance on `git` during results loading
              - faster due to not requiring git checkout
              - no need for .gitignore in `spyd` branch
        - cached concatenation of /benchmark/history/*.json
           - i.e. OBJ_ARR
           - reason: 10 times faster to read single file than individual ones
        - if exists, read instead of /benchmark/history/*.json
           - no need for `git worktree add|remove` on load then
           - fails during read|parse, silently ignore it (as if it did not exist)
        - written at end of commands:
           - not if does not read results (`exec`)
           - if command does not update results (`show`, `remove`, `bench` with CONF.save false, `sync` without git pull): only if cache file does not exist yet
           - if command update results (`bench` with CONF.save true, `sync` with git pull): use updated results
              - with `sync`, always re-create cache file, even when nothing to pull from git and cache file already exists
                 - reason: allows invalidating cache when:
                    - cache file got corrupted
                    - user manually git pulled
                    - result files were manually edited
        - add comment that cache invalidation is not an issue because:
           - cache is re-created after any command that changes results
           - users are required to use spyd commands, not manipulating the content of the `spyd` branch manually
        - use atomic-file-write
        - stringify each result separately
           - due to max string size if many results
  - multi-branch history:
     - sort by:
        - branchIndex in lastResult.systems[0].git.branches
           - filter out if not in any of them
        - then by result.timestamp
           - filter out if result.timestamp > oldest result in child branch
        - should still keep results with same result.systems[0].ci together (as we already do)
     - reasons:
        - easy to understand|explain
        - preserve chronologic order
           - good for reporting
           - good for time-based deltas
        - not impacted by rebasing
        - does not require git, except for finding parent branches
        - mostly follows "git log" order
           - except for newest common commit of parent branch's result, if saved after current branch's first commit's result, but that's unlikely
     - when listing all results ids|combinations, should use unfiltered results (i.e. of all branches)
     - results with no git branch:
        - `previous` always empty ARR
           - including `sincePrevious`
           - i.e. behaves as if part of single-result branch with no parent branch
        - result.systems[0].git.branch empty ARR
  - CONF.since commit|tag|branch:
     - if sinceResult not parent of targetResult, sincePrevious uses a different branch+parentBranches than targetResult's
        - reason: allow comparing branches
           - very useful for PRs, about to be merged|rebased onto
           - still preserving chronological order, except for lastResult
        - if sinceResult child of targetResult: return -1, i.e. empty `previous`
     - logic:
        - branch:
           - use last result in branch+parentBranches
           - reasons:
              - what user probably expects when comparing branches, or to parent branch
              - since branch is explicitly named, try to use it if possible, not child branch
        - commit|tag:
           - get author date (not committer date)
              - using `git`
           - then find first result with result.timestamp >= authorDate, within same branch
              - reasons child branches not used:
                 - comparing between branches is most likely not wanted
                 - if sinceResult not parent, hard to know which child branch is wanted
              - if none found, find first previous result with result.timestamp < authorDate, within branch+parentBranches
                 - reasons:
                    - user might have meant this instead
                    - graceful fallback
     - if none found, returns -1, i.e. empty `previous`
     - reasons we do not use result.systems[0].git:
        - works with rebases (which modify commit hashes) and tag renames
        - more uniform behavior regardless of whether a result with specific commit|tag exists
     - add CONF.since "parent"
        - same as CONF.since "branch" with parent branch
        - if no parent branch, empty `previous`
        - def of CONF.since is still "1"
  - branch aliases
     - reason: do not lose connection between results when git branch renamed
     - result.systems[0].git.branches STR_ARR_ARR:
        - computed on result creation
        - includes all parent branches, in order
           - using `git`
              - previously merged|rebased branches should be ignored, using the branch they merged|rebased onto instead
        - includes all branch renames
           - using `git reflog`
     - on load:
        - find current branches using `git branch`
        - for each branch, add aliases using `git reflog`
        - group results by `git.branches` with at least one common element, and add to branch aliases
        - set normalized result.systems[0].git.branches STR_ARR
           - using the { "ALIAS_BRANCH" -> "CURRENT_BRANCH" } map
  - auto-delete results when git branch has been deleted
     - done on CONF.save
     - done by comparing `git branch` with result.systems[0].git.branches
        - including branch aliases
     - do not delete result with a result.systems[0].git.tag
        - providing the tag still exists (using `git tag`)
     - reasons:
        - performance, by making cache file smaller
        - prevents different branches with same name (created at different times) to be connected
  - require git:
     - only for:
        - CONF.save
        - `sync` command
        - CONF.since branch|commit|tag|"parent"
     - require:
        - `git` binary is executable (i.e. `git --version` has exit code 0)
        - minimum version of `git`
        - there is a `.git` in `[.../]{CONF.cwd}`
     - reasons to store with git:
        - no need to setup any remote store|database
        - much faster (everything local)
        - easy to share results
        - easy to make it work with git branches
        - easier data conflict resolution
        - data is coupled with repository
  - improve performance when history is big
     - potential ideas:
        - check if gzipping cache file is worth doing in terms of performance and file size
        - removing some object spreads (during destructuring)
        - split `previous` into three arrays, computed at history load-time:
           - `sinceResult`: aggregation of all results from first to CONF.since (included)
           - `allPrevious`: aggregation of all results from sinceResult to lastResult (excluded)
           - `previous`: ARR of each results from sinceResult to lastResult (excluded)
        - add `previous` titles on load

Find ways to improve precision even more???

Plugin shape should be validated

Error handling:
  - better way for all plugins (report, runners) to signal user error vs bugs
  - better handling of child process errors due to runner bugs (handled as user error right now)
  - plugin|core errors should print message to report GitHub issues to the plugin|core
     - it should include system information

day.js:
  - parse "timestamp" and "duration" delta format using day.js
  - serialize `result.timestamp` for reporting using day.js

CONF.debug BOOL
  - add debug information, for bug reports
  - add to issue template
  - for all commands
  - force CONF.report "debug"
  - force CONF.quiet true
  - print:
     - resolved config
     - task files
     - runner.versions
     - combinations
     - row similar to "debug" reporter after each sample
        - only of currently measured combination
        - including: duration spent, estimated time left, progress bar percentage
  - do not call reporters

Allow with the node runner:
  - tasks.mjs
  - tasks.ts

Learn package 'simple-statistics' and|or 'jstat' and use it in spyd, where needed

When killing child process, should kill descendants too
  - e.g. with spyd-runner-cli and command 'yes', 'yes' keeps executing after timeout

Consider lowering the valid Node version for spyd-runner-node, so that `run.node.versions` can target lower versions

Create GitHub action

Learn the whole Terminal section in edl
  - including finishing ANSI sequences and terminal emulators

Reporters:
  - types:
     - JSON
     - CLI list
     - CLI table
     - Markdown list
     - Markdown table
     - CLI graphs|histograms
     - CLI where the tasks are in both axis, and the cells are the difference in %
     - CLI with horizontal bars for medians
        - with full CLI width for slowest median
        - still show numbers on top of bars (or on their left side)
        - def reporter instead of simple CLI list, except when there is only one combination
        - for Markdown too???
     - HTML
     - CLI time series (with previous combinations)
  - CLI|Markdown list:
     - follow the formatting I used in fast-cartesian example
        - simple list for TASK with no inputs
  - CLI|Markdown tables:
     - inputs as x axis, tasks as y axis
  - stacked bar graph for multiple stages benchmarks
  - default reporter:
     - CLI|Markdown table if more than half of cells would be filled, and some inputs are defined
        - CLI|Markdown list otherwise
     - Markdown table|list if CONF.output inserts '*.md|*.markdown|README|readme'
        - CLI table|list otherwise

Make `precise-now` work on browser + node

Split `precise-timestamp` to own repository
  - make it work on browser + node
  - problem with browser: performance.now() is made only ms-precise by browser due to security timing attacks

Terminal-histogram:
  - separate to own repository
  - add features:
     - color themable (using terminal-theme)
     - left bar with percentages
     - can specify number of abscissa ticks
        - or number of columns per tick
        - stack labels, i.e. might need to stack deeper than one level
    - allow minimum ordinate to be either 0 or minimum value
    - labelling columns
    - custom unit for ordinate
    - when too many columns:
       - if labeled: break into several histograms
       - otherwise: extrapolate

Separate into different repos:
  - some plugins are builtin, i.e. required as production dependencies by core
     - including spyd-run-node and spyd-run-cli (until more runners are created)
  - types: spyd-reporter|runner-*
  - spyd -> spyd (CLI) + spyd-core (non-CLI)

Manually try all features with each Node.js version

Add tests, documentation, etc.:
  - for all repos, including sub-repos
  - add keywords (GitHub, package.json)

Utilities to help people creating reporters, runners
  - GitHub template
  - test utility

Competitors benchmark:
  - benchmark with other benchmarking tools
  - each should measure Math.random() for the same duration
     - use different durations as inputs
  - report both medians (for accuracy) and stdev (for precision)

Add repo of spyd benchmarks:
  - contributors can add any
  - only for:
     - JavaScript
     - core Node.js or JavaScript, no modules
  - each benchmark is a directory with a single benchmark
     - optional spys.yml
  - README shows all results
     - as run in CI
     - each shows: title, tasks file content, reported result
     - a hardcoded list is maintained for sorting
     - created by a build task
  - binary for users to run any of the benchmarks on their machine
     - including with npx

Add roadmap:
  - point to it from contribution doc to orient contributors towards features I want (e.g. HTML reporter)

Send PRs to do or redo benchmarks of repositories to
  - get user feedback
  - experience the library as a user
  - get visibility

Promote
  - https://2020.stateofjs.com/en-US/resources/
  - https://javascriptkicks.com/submit

Ideas for articles about benchmarking:
  - choice between precision and accuracy
  - choice between computing timestamp inside or outside the for-loop, and hybrid approach spyd takes

Add other runners:
  - spyd-runner-chrome (maybe using puppetter)
  - spyd-runner-firefox (maybe using puppetter-firefox)
  - spyd-runner-selenium
  - spyd-runner-bash
  - spyd-runner-go

Commercial offer:
  - reporting dashboard:
     - show time series (i.e. keep history)
        - should not lose history when change only the `title` of the function|variant
     - nice data visualization
     - should show function bodies
  - code editor for tasks files:
     - perform benchmark (inside browser not on our servers)
     - send results to API (like what users would do on CI otherwise)
     - show results from API
     - i.e. can be used like jsperf
  - Sharing like jsperf:
     - allow users to benchmark in their own browsers
  - PR bot
  - notifications
  - user should report results to our API
     - like Codecov does
     - i.e. we do not pay for infrastructure cost, except simple CRUD API to store results
     - should be integrated with CI (i.e. use `ci-info`)
  - pricing:
     - free for open source
     - pay per private repo

==============================================


CONF.tasks optionally ARR
  - when merging configs (CONF.config ARR, or CLI vs programmatic flags), CONF.tasks must be concatenated, not overridden
  - processes:
     - to retrieve tasks, parent process loads all tasks in parallel, in different processes
     - to measure, parent process passes only the task file for the current combination
     - i.e. runner only needs to handle a single task file at once
  - on duplicate combinations (same categories)
     - keep only the last one in CONF.tasks ARR order
        - CONF.runnerRunner.tasks have priority over CONF.tasks
     - no error nor warning
  - add comments:
     - reasons:
        - allow consumers to add tasks to shared benchmarks, or override them
        - faster to load task file when many tasks and/or slow to load
        - allow breaking down big tasks file
           - not every language can do this at the language-level (e.g. with re-exports), e.g. the `cli` runner cannot
     - must document to users that CONF.tasks must target main files only, not dependent files
        - no globbing since it would encourage this
     - steps are still exported in nested OBJ, not top-level with one per task per file because:
        - make it clear that steps are nested within a task
        - encourages tasks over steps
        - allow several tasks per file, which is simpler DX when tasks are small

CONF.config
  - optionally ARR
     - last has higher priority
  - can be specified inside another config file
     - child has less priority
     - file resolution should be relative to the child config, not to the parent config
     - remove CONF.extend
  - automatic config lookup only used as default value, for convenience
     - i.e. not used if a shared config is specified
        - reasons:
           - project config is most likely meant for current project instead
           - global config is not very useful and might override meaningful config properties unknowlingly

Sharing benchmarks:
  - CONF.config "{packageManager}:NAME" or "PATH"
     - publisher
        - uses package manager of choice
           - initially, supported packageManager: npm
        - to publish: config file, tasks files, dependencies
           - on npm: "main" file must point to spyd.*
              - this can be spyd.yml, since we use `require.resolve()`, not `require()`
     - consumer:
        - installs package manager (e.g. npm)
        - installs spyd
        - installs package (e.g. npm install or npx -r)
           - this should also install package's dependencies
     - spyd:
        - resolves NAME to a file path to the config file
           - logic is specific to packageManager
           - packageManager prepends spyd namespace to NAME, e.g. spyd-config-NAME or @NAME/spyd-config
  - publisher should take into account that cwd is consumer-defined:
     - git repository is consumer's
     - cwd in tasks file is consumer-defined
     - tasks must be defined as CONF.tasks, not use default lookup
  - add comments:
     - can be used both to share config, or benchmark (config + tasks + dependencies)
     - goals:
        - make benchmark trustable
           - reproducing results
           - see if results would change by tweaking tasks
              - done by comparing publisher task with consumer task based on it
        - measuring with another machine|software (e.g. consumer's)
        - measuring against another library (with consumer adding a task file)
     - reasons to share benchmark either:
        - library performance, for library consumers
        - generic benchmark, meant to be applied to consumer's library
           - including org-wide shared benchmark, i.e. like templates
     - allow both:
        - one-off execution, e.g. npx
        - persisted install to specific project, e.g. npm install
     - works both for CLI and programmatic usage
     - encourage users to:
        - separate benchmark package from library package
        - while still allowing running benchmark while developing library
        - e.g. monorepo setup
     - make publisher build as much as possible
        - as opposed to consumer
           - no arbitrary command execution for consumer, for security
        - except when not possible, e.g. binary compilation
     - publishing as container might be allowed in the future but only when no other choices because:
        - more setup for publisher
        - does not use consumer's OS configuration
        - higher risk that setup works for publisher but not consumer, if publisher runs benchmark without docker
        - for most containers (e.g. docker):
           - only run on Linux
           - consumer might need to set some flags, e.g. for networking

Config spyd versioning???
  - possible solution:
     - core maintains list of breaking changes, and automatically fails with error message
     - uses a declarative list with each breaking change entry being:
        - isOld()->BOOL
        - minVersion|maxVersion STR
        - message STR
        - documentation 'URL'
     - use same logic inside each runner, for both runner config validation, and tasks file export

spyd format:
  - add comments for reasons for:
     - spyd.*js (as opposed to only spyd.yml)
        - using environment variables (including checking if is CI)
        - computing long list of inputs
     - spyd.yml (as opposed to spyd.json)
        - comments
        - consistency with cli runner's tasks.yml
     - tasks.yml (as opposed to tasks.json) with cli runner:
        - no escaping of double quotes
        - comments
  - validate merged|normalized config against non-JSON values

Name convention for plugins:
  - TYPE: reporter, runner, config
  - spyd-TYPE-NAME or @NAME/spyd-TYPE
  - character restriction on NAME: current one, i.e. [a-z][a-z\d]*
  - refered to by user as NAME

How to prevent reporter footer being shown twice, when two reporters have it???
  - make it not part of reporter???
     - problem: might differ per reporter, e.g. terminal vs markdown reporter
  - or:
     - if several reporters with same CONF.output
     - and their report() returns a string
     - then for all of them except last one:
        - make CONF.{reporterId}.showSystem|showMetadata false, unless explicitely defined (not CONF.showSystem|showMetadata)
  - add footer to histogram reporter

Steps:
  - why allow non-serial steps??? Wouldn't it be easier to define additional tasks instead???
  - some users might misuse steps to get parallel preview???
  - `repeat` should be based on number of iterations left to reach moe, not on duration
  - instead of passing `repeat`, ask runner to measure batches with different params???
     - i.e. arg would be OBJ:
        - serial BOOL
        - steps OBJ_ARR
           - step STR
           - maxLoops NUM
           - repeat NUM|0
     - runner would return measures of each
     - if serial, maxLoops all same, and state is passed between steps
  - rename CONF.precise to CONF.fast???

Differentiate between reporter intent (dev, histogram, etc.) and output format (terminal, markdown, image, HTML)???
   - pros:
      - smaller list of reporters
      - automatically adapts to CONF.output
   - either:
      - reporter exports different method for each
         - pro: can know in advance when format supported
      - format is passed as argument to report()
      - different modules, named spyd-reporter-{CONF.reporter}-{CONF.format}

Quantiles:
  - how to report them???
     - show in `dev` reporter
  - are all of them needed??? Or only min, p1, p5, p25, median, p75, p95, p99, max??? Or only 20 instead of 100???
  - add stats.p95???
  - make sure just adding works when computing step groups???

Histogram:
  - how to compute for step groups???

reporter.debugStats BOOL
  - def: false
  - true for `debug` reporter
  - if false, do not pass:
     - mean
        - add comment that we must ensure median is the main one used, so different reporters are consistent, and also because it is used in sorting combinations, and also it is less precise
     - times
        - add comment that it is a bad indicator of precision, and also might be confused as an indicator of speed due to other benchmark libraries showing it like that
     - rstdev|rmoe
        - add comment that moe is more useful for end users, including to allow seeing if two combinations overlap
     - minLoopDuration, samples, repeat, loops

Terminal width|height should use default, not stderr, when output is not tty

How to insert terminal content in Markdown, since ``` block needed???
  - maybe:
     - reporters declare format: terminal, Markdown, HTML, image, etc.
     - use inserted document file extension, with hardcoded list (using mime library)

How to beforeAll once for all tasks???
  - top-level scope
  - what about async??? top-level await???

HTTP body max length:
  - 1e8 max HTTP body length (unless streaming used)
  - add `Math.min()` to `maxLoops`???

Try to see if anything more can be removed from `node` runner, i.e. simplified for all runners

Programmatic usage???

Localization:
  - CONF.lang "LANG"
     - e.g. "en_US"
     - def: "en_US", not guessed???
 - changes number formatting
 - translates text in reporters:
    - for common text like "Memory"
    - reporters use a translation utility which uses some shared translations, which can be augmented by contributors (not users)
 - translates titles:
    - allow titles.yml to optionally be OBJ: LANG: OBJ2
    - i.e. defined by users
 - what about units???
    - known units, e.g. duration
    - user-defined units

Positioning:
  - all of:
     - simplicity
        - no library|APIs, only export functions
        - no need to specify duration nor number of loops
     - whole flow, not just measuring (i.e. a runner, not just a library)
        - reporting
        - sharing results (e.g. README automatic insert)
        - sharing for others to run
        - combinations (variations, systems, selection)
        - debugging
        - comparing
        - translating
        - history
        - testing (limits)
        - CI
        - GitHub PRs
     - measures precision (required for some of the workflow features above)
     - platform|language-agnostic
        - including TypeScript
  - slogan???
     - Current: Simple and precise benchmarking
     - Potential issues:
        - "benchmarking" might not be clear enough
        - remove "simple"??? there are simpler alternatives, e.g. just using for loops or console.time()
        - not enough stress on the great DX
           - use word "fun"??? "pretty"???
