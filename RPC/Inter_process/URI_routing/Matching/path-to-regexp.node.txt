
                  
   PATH-TO-REGEXP  
                  



VERSION ==>                       #3.0.0
                                  #Parses Express-style 'PATH' into regexp
                                  #Can contain :VAR, (REGEXP) and quantifiers * ? +
                                  #Can also reverse parse, e.g. '/path/:var' + {var: val} -> '/path/val'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONCEPT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PATH_STR                          #Can contain:
                                  #  - :VAR, with [:alnum:]_
                                  #  - (REGEXP)
                                  #  - quantifier * ? or + following :VAR or (...)
                                  #     - * and + do not stop at delimiters
                                  #Path tokens are either :VAR or (REGEXP)
                                  #E.g. '/my/path/:var/:varb+/(.*)/try(this)?'
                                  #OPTS:
                                  #  - sensitive BOOL (def: false): case insensitive
                                  #  - strict BOOL (def: false): optional trailing slash
                                  #  - start BOOL (def: true): must match from beginning
                                  #  - end BOOL (def: true): must match until end
                                  #  - delimiter STR (def: '/'): path delimiter
                                  #  - whitelist STR[_ARR] (def: any): same but several
                                  #  - endsWith STR[_ARR] (def: none): stops parsing when encountering that character
                                  #    E.g. '?' for query strings

PATH_REGEXP                       #REGEXP where each parenthesis group matches a path token
TTOKEN                            #Path groups, either TOKEN or 'STR' (anything between TOKEN)
TOKEN                             #
TOKEN.pattern                     #REGEXP
TOKEN.name                        #'VAR' (if :VAR) or NUM (parenthesis group)
TOKEN.optional                    #BOOL. If * or ?
TOKEN.repeat                      #BOOL. If * or +
TOKEN.delimiter                   #According to OPTS.delimiter|whitelist


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


parse(PATH_STR)->TTOKEN_ARR       #
tokensToRegExp
(TTOKEN_ARR[, OBJ_ARR][, OPTS])
->PATH_REGEXP                     #If OBJ_ARR specified, push PATH_REGEXP.keys to OBJ_ARR

PATHTOREGEXP(PATH_STR[_ARR])      #Same as parse() + tokensToRegExp()
 ->PATH_REGEXP                    #If PATH_STR_ARR: alternatives


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        REVERSE PARSING        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


tokensToFunction(TTOKEN_ARR)      #Reverse parsing
->FUNC(OBJ[, OPTS])->PATH_STR     #Replaces:
                                  #  - :VAR by OBJ.VAR
                                  #  - (...) by OBJ[NUM]
                                  #Can use VAL_ARR:
                                  #  - if quantifier + or *
                                  #  - is replaced by VAL_ARR.join(delimiter)
                                  #Throws TypeError if does not match
                                  #Uses encodeURIComponent(), or OPTS.encode()
compile(PATH_STR)->FUNC           #Same as parse() + tokensToFuncion()
