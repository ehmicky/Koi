
                  
   PATH-TO-REGEXP  
                  



VERSION ==>                       #6.1.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONCEPT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PATH_STR                          #URI path with template variables.
                                  #Can contain:
                                  #  - :VAR, with [:alnum:]_
                                  #  - (REGEXP)
                                  #  - quantifier * ? or + following :VAR or (...)
                                  #     - * and + do not stop at delimiters
                                  #Path tokens are either :VAR or (REGEXP)
                                  #E.g. '/my/path/:var/:varb+/(.*)/try(this)?'
                                  #OPTS:
                                  #  - sensitive BOOL (def: false): case-sensitive
                                  #  - strict BOOL (def: false): optional trailing slash
                                  #  - start BOOL (def: true): must match from beginning
                                  #  - end BOOL (def: true): must match until end
                                  #  - delimiter STR (def: '/'): path delimiter
                                  #  - whitelist STR[_ARR] (def: any): same but several
                                  #  - endsWith STR[_ARR] (def: none): stops parsing when encountering that character
                                  #    E.g. '?' for query strings
                                  #  - encode(STR)->STR (def: none): e.g. encodeURIComponent()

PATH_REGEXP                       #REGEXP where each parenthesis group matches a path token
TTOKEN                            #Path groups, either TOKEN or 'STR' (anything between TOKEN)
TOKEN                             #
TOKEN.pattern                     #REGEXP
TOKEN.name                        #'VAR' (if :VAR) or NUM (parenthesis group)
TOKEN.optional                    #BOOL. If * or ?
TOKEN.repeat                      #BOOL. If * or +
TOKEN.delimiter                   #According to OPTS.delimiter|whitelist


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


parse(PATH_STR)->TTOKEN_ARR       #
tokensToRegExp
(TTOKEN_ARR[, OBJ_ARR][, OPTS])
->PATH_REGEXP                     #If OBJ_ARR specified, push PATH_REGEXP.keys to OBJ_ARR

pathToRegexp(PATH_STR[_ARR]       #Same as parse() + tokensToRegExp()
 [, OBJ_ARR][,OPTS])->PATH_REGEXP #If PATH_STR_ARR: alternatives

regexpToFunction                  #From TTOKEN_ARR + PATH_STR -> PARAMS_OBJ
 (PATH_REGEXP[, TTOKEN_ARR])      #OBJ:
 ->FUNC(PATH_STR[, OPTS])         #  - path PATH_STR
 ->OBJ|false                      #  - params PARAMS_OBJ
                                  #  - index NUM
                                  #OPTS:
                                  #  - decode(STR, 'VAR')->STR (def: nothing)
match(PATH_STR[, OPTS])
 ->FUNC(PATH_STR[, OPTS])
 ->OBJ|false                      #Same as PATHTOREGEXP() + regexpToFunction()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        REVERSE PARSING        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


tokensToFunction                  #From TTOKEN_ARR + PARAMS_OBJ -> PATH_STR
 (TTOKEN_ARR[, TOPTS])            #Replaces:
 ->FUNC(PARAMS_OBJ[, OPTS])       #  - :VAR by PARAMS_OBJ.VAR
 ->PATH_STR                       #  - (...) by PARAMS_OBJ[NUM]
                                  #Can use VAL_ARR:
                                  #  - if quantifier + or *
                                  #  - is replaced by VAL_ARR.join(delimiter)
                                  #TOPTS:
                                  #  - sensitive BOOL (def: false): case-sensitive
                                  #  - validate BOOL (def: true): throw TypeError if does not match
                                  #OPTS:
                                  #  - encode(STR, TOKEN)->STR (def: encodeURIComponent())
compile(PATH_STR)->FUNC           #Same as parse() + tokensToFuncion()
