
           
   SIGNALS  
           



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONCEPT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GOAL ==>                          #Simple IPC:
                                  #  - no payload except standardized names.
                                  #  - no response
                                  #Unix only

SYNC|ASYNC ==>                    #Sending a signal is sync, since do not wait for response.
                                  #Signal handler can be:
                                  #  - sync:
                                  #     - interrupt process execution
                                  #     - application-level equivalent of a CPU exception
                                  #     - e.g. FPU, segfault, abort
                                  #  - async:
                                  #     - let process handle it when it wants
                                  #     - application-level equivalent of a CPU interrupt (IRQ)
                                  #     - e.g. timer

DEFAULT HANDLER ==>               #Each signal has a default handler:
                                  #  - noop (Ign)
                                  #  - terminate (Term)
                                  #  - terminate and dump to ./core (Core)
                                  #  - pause (Stop)
                                  #  - unpause (Cont)

ALLOWED HANDLER ==>               #Each signal allows:
                                  #  - using the default handler (def)
                                  #  - ignoring default handler
                                  #  - using a different handler
                                  #SIGKILL|SIGSTOP cannot be ignored|handle
                                  #SIGCONT cannot be ignored. It can be handled but the default handler is still performed.
                                  #SIGINT|SIGILL|SIGFPE|SIGSEGV|SIGQUIT|SIGTSTP should not be ignored

BLOCKING|MASKING ==>              #A signal can be blocked: such incoming signals will then be queued until unblocked
                                  #Paused processes block all signals
                                  #SIGKILL|SIGSTOP|SIGCONT cannot be blocked
                                  #Several pending signals of the same signal are queued
                                  #  - except for realtime signals, which are merged to one
                                  #Pending signals are delivered in order
                                  #  - except for realtime signals, which are delivered by signal number order

REALTIME SIGNALS ==>              #Application-specific signals

CHILD PROCESSES ==>               #Inherit signals mask but not handlers


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LIST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ANSI C89 SIGNALS ==>              #

NAME        NUMBER      DEFAULT   USAGE

SIGINT      2           Term      User interrupt with CTRL-C
SIGILL      4           Core      Trying to execute invalid machine instructions.
                                  E.g. due to wrong point, buffer overlow, etc.
                                  Similar to x64 exception #UD (invalid opcode)
SIGABRT     6           Core      Abnormal exit request. E.g. used by `abort()` in C
SIGFPE      8           Core      Float error.
                                  Similar to x64 exceptions #DE (division by 0) and #MF (arithmetic overflow|underflow, wrong bits format)
SIGSEGV     11          Core      Segmentation fault.
                                  Similar to x64 exceptions #BR (buffer overflow), #SS (stack overflow|underflow), #GP (null pointer)
SIGTERM     15          Term      Normal exit request.

POSIX SIGNALS ==>                 #

SIGHUP      1           Term      Parent process stopped or communication with it stopped.
                                  E.g. when command run in terminal and terminal was closed.
SIGQUIT     3           Core      User interrupt with CTRL-\
SIGTRAP     5           Core      Trace trap, used by debugger breakpoints
                                  Similar to x64 exceptions #DB and #BP (hardware|software breakpoints)
SIGKILL     9           Term      Forced termination
SIGUSR1     10          Term      User-defined signal 1
SIGUSR2     12          Term      User-defined signal 2
SIGPIPE     13          Term      Broken pipe (writing on a non-writable|connected pipe|socket)
SIGALRM     14          Term      Timer or timeout for real|user time (e.g. regardless of whether process is executing)
SIGCHLD     17          Ign       A child process ended|paused|unpaused. Allows for parent process to be notified of child process exit without waiting for them
SIGCONT     18          Cont      Unpause
SIGSTOP     19          Stop      Pause
SIGTSTP     20          Stop      Pause. Used by CTRL-Z or Unix command "suspend"
SIGTTIN     21          Stop      Try to read stdin but there is none (e.g. for a background process)
SIGTTOU     22          Stop      Try to read stdout|stderr but there is none (e.g. for a background process)

OTHER SIGNALS ==>                 #

SIGINFO     ?           Ign       Ask for information about the process. Sometimes available as CTRL-T
SIGIOT      6           Core      Other name for SIGABRT
SIGBUS      7           Core      Bus error due to misaligned, non-existing address or paging error
SIGSTKFLT   16          Term      Stack fault (empty|overflow). Rarely used
SIGCLD      17          Ign       Other name for SIGCHLD
SIGURG      23          Ign       Socket uses out-of-band data
SIGXCPU     24          Core      Exceeded CPU time soft limit
SIGXFSZ     25          Core      Exceeded file size soft limit
SIGVTALRM   26          Term      Timer or timeout for virtual|process time (e.g. only when process is executing)
SIGPROF     27          Term      Similar to SIGVTALRM
SIGWINCH    28          Ign       Window size changed
SIGIO       29          Term      Terminal|socket stdin|stdout|stderr got redirected. Other ignored.
SIGPOLL     29          Term      Other name for SIGIO
SIGPWR      30          Term      Imminent power failure
SIGSYS      31          Core      Bad system call
SIGUNUSED   31          Term      Unused signal

REALTIME SIGNALS ==>              #

SIGRTMIN    34          Term      Minimum allowed realtime signal. Should be used programmatically as this constant might change
SIGRTMAX    64          Term      Maximum allowed realtime signal. Should be used programmatically as this constant might change
_NSIG       65                    Biggest signal number + 1
