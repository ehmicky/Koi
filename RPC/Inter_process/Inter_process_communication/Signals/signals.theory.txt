
           
   SIGNALS  
           



SIGNAUX ==>             #Les signaux sont utilisés dans le monde Unix (Windows
                        #utilise les events). Ils permettent la communication
                        #entre différents processes. Envoyer un signal à un
                        #process provoque une réaction de ce process.
SYNCHRONES / ASYNCHRONES#Les signaux peuvent être :
        ==>             #  - synchrones :
                        #      - s'exécutent tout de suite à cause d'une action
                        #        du process courant
                        #      - équivalent software d'une exception CPU
                        #        (-> l'interrupt handler des exceptions CPU du
                        #        kernel lancent des signaux synchrones)
                        #      - exemple : exception FPU, segfault, etc.
                        #  - asynchrone :
                        #      - dû à l'action d'un autre process
                        #      - équivalent software d'une IRQ (-> même chose)
                        #      - exemple : achèvement process enfant, timer,
                        #        etc.
                        #  - synchrone ou asynchrone :
                        #      - envoi explicite via par exemple syscalls
                        #        kill() ou raise(), synchrone si dans le même
                        #        thread, asynchrone sinon.
ACTION PAR DEFAUT ==>   #Chaque signal provoque une réaction par défaut, parmi :
                        #  - ne rien faire (Ign)
                        #  - terminer le programme (Term)
                        #  - terminer le programme avec un dump core (Core).
                        #  - stopper le programme (Stop)
                        #  - reprendre le programme (Cont)
                        #Les core files seront dans le répertoire courant sous
                        #le nom "core, et doivent avoir la permission d'être
                        #écrits, ainsi qu'être de taille supérieure à une limite
                        #fixée par exemple par ulimit -c (0 par défaut)
                        #Cette réaction peut être :
                        #  - acceptée (par défaut)
                        #  - ignorée
                        #  - interceptée par un signal handler.
                        #Un signal handler est une fonction qui s'exécute à
                        #chaque émission d'un signal donné, à la place de la
                        #réaction par défaut (voir <signal.h>). Le signal est en
                        #fait listé sur un signal mask associé au processus
                        #ayant le signal handler
                        #SIGKILL et SIGSTOP ne peuvent pas être interceptés ou
                        #ignorés
                        #Un processus stoppé met en attente les signaux qu'il
                        #reçoit, sauf SIGKILL et SIGSTOP
SIGNAUX BLOQUES ==>     #Un signal peut être bloqué, auquel cas :
                        #  - si sa réaction par défaut est d'être ignoré, il
                        #    n'est pas bloqué, mais simplement ignoré
                        #  - sinon, il est bloqué pour une durée indéterminé.
                        #    Lorsqu'il sera débloqué, son action par défaut
                        #    aura alors lieu.
IMPLEMENTATION ==>      #Les signaux sont des macros associées à un nombre. Ce
                        #nombre dépend de l'implémentation (je montre ici celui
                        #d'Ubuntu).
                        #Les signaux eux-mêmes sont POSIX pour la plupart, mais
                        #certains sont propres à l'implémentation. Ils peuvent
                        #être définies pendant le runtime d'un programme
                        #(appelés alors real-time signals, avec une valeur entre
                        #SIGRTMIN et SIGRTMAX (normalement 34 et 64)
                        #Les signal masks sont hérités par les processes enfants

                        #Voici les signaux ANSI C89 :

NOM         NUMERO      ACTION      USAGE

SIGINT      2           Term        Interrupt clavier avec CTRL-C. Ne devrait
                                    pas être ignoré
SIGILL      4           Core        Tentative d'exécuter un code qui n'est en
                                    fait que du garbarge (dû à un mauvais
                                    pointeur de fonction, un buffer overflow qui
                                    écrase la return adress d'une fonction, un
                                    stack overflow, ...)
                                    Ne devrait pas être ignoré.
                                    Cf exceptions #UD
SIGABRT     6           Core        Interruption anormale, envoyée par abort()
SIGFPE      8           Core        Erreur arithmétique de floats.
                                    Ne devrait pas être ignoré.
                                    Cf exceptions #DE (division par 0) et #MF
                                    (arithmetic overflow, underflow, TOUINT
                                    enregistré dans un TOUFLOAT, etc.)
SIGSEGV     11          Core        Segfault (souvent mauvais pointeur).
                                    Ne devrait pas être ignoré.
                                    Cf exceptions #BR (buffer overflow), #SS
                                    (stack overflow/underflow), #GP (pointeur
                                    vers zone mémoire non accessible)
SIGTERM     15          Term        Demande normale de cloture d'un programme

                        #Voici les signaux POSIX :

SIGHUP      1           Term        Le terminal controlant le process a été
                                    fermé, ou la connexion a été interrompue
SIGQUIT     3           Core        Interruption clavier avec CTRL-\. Ne devrait
                                    pas être ignoré
SIGTRAP     5           Core        Trace trap, utilisé par un debugger.
                                    Cf exceptions #DB et #BP (hardware et
                                    software breakpoints)
SIGKILL     9           Term        Termine un programme, et ne peut pas être
                                    blocké ou ignoré
SIGUSR1     10          Term        User-defined signal 1
SIGUSR2     12          Term        User-defined signal 2
SIGPIPE     13          Term        "broken pipe" (écriture sur une pipe non
                                    ouverte en lecture), ou tentative d'output
                                    sur une socket non connectée
SIGALRM     14          Term        Indique la fin d'un compteur mesurant le
                                    temps réel (est général pris en charge par
                                    un signal handler). Permet de faire une
                                    action après un temps donné. Implémenté par
                                    alarm() et sleep()
SIGCHLD     17          Ign         Indique à son parent qu'un processus enfant
                                    vient de s'achever
SIGCONT     18          Cont        Continue un process bloqué. Ne peut pas
                                    être blocké. Même handled, l'action Cont
                                    est effectué.
SIGSTOP     19          Stop        Stoppe. Ne peut pas être ignoré, blocké ou
                                    handled
SIGTSTP     20          Stop        Stoppe, mais peut être ignoré ou handled.
                                    Utilisé par CTRL-Z ou suspend (command Unix)
                                    Ne devrait pas être ignoré (user-unfriendly)
SIGTTIN     21          Stop        Un processus en background cherche à lire
                                    l'input depuis le terminal (doit être
                                    handled). Par défaut, le processus est
                                    terminé
SIGTTOU     22          Stop        Comme SIGTTIN, mais pour un processus en
                                    background cherchant à écrire sur le
                                    terminal

                        #Voici les autres :

SIGINFO     ?           Ign         Demande des informations sur le process en
                                    cours
SIGIOT      6           Core        Synonyme de SIGABRT
SIGBUS      7           Core        Segfault dû non pas au pointage d'une
                                    adresse qu'on a pas le droit d'accéder, mais
                                    impossible (mal alignée ou trop grande)
SIGSTKFLT   16          Term        Stack fault (vide ou overflow). Rarement
                                    utilisé
SIGCLD      SIGCHLD     Ign         Same as SIGCHLD
SIGURG      23          Ign         Indique qu'une socket vient de out-of-band
                                    data
SIGXCPU     24          Core        CPU time soft limit exceeded par le
                                    programme
SIGXFSZ     25          Core        File size soft limit exceeded à cause d'une
                                    action du programme
SIGVTALRM   26          Term        Indique la fin d'un compteur mesurant le
                                    temps virtuel (est général pris en charge
                                    par un signal handler) du processus courant
SIGPROF     27          Term        Similaire à SIGVTALRM
SIGWINCH    28          Ign         Window size change (en général un terminal)
SIGPOLL     SIGIO       Term        Semblable à SIGIO
SIGIO       29          Term        En général pris en charge par un signal
                                    handler, et indique qu'un terminal ou une
                                    socket est pris pour un input ou output,
                                    normalement pour un mode async. Souvent
                                    ignoré par défaut
SIGPWR      30          Term        Power failure imminente
SIGSYS      31          Core        Bad system call.
SIGUNUSED   31          Term        Unused signal
SIGRTMIN    34                      Début des real-time signaux
SIGRTMAX    64                      Fin des real-time signaux
_NSIG       65                      Biggest signal number + 1

REAL-TIME SIGNAUX ==>   #Il s'agit des signaux qu'une application peut définir
                        #pour ses besoins propres. Leur numéro est en général
                        #entre environ 32 et 64, mais il faut de préférence :
                        #  - utiliser SIGRTMIN + INT_VAL, car SIGRTMIN peut
                        #    varier
                        #  - vérifier que le numéro du signal ne dépasse pas
                        #    SIGRTMAX
                        #  - utiliser une macro #define SIG... SIGRTMIN +
                        #    INT_VAL pour l'utiliser sous le nom de la macro et
                        #    non avec SIGRTMIN + INT_VAL
                        #Les real-time signaux font par défaut "Term".
                        #De plus, contrairement aux signaux classiques :
                        #  - plusieurs pending real-time du même signal sont
                        #    queued plutôt que d'être comprimés en un seul.
                        #  - plusieurs pending real-time de signaux différents
                        #    ne sont pas délivrés selon leur ordre d'arrivée,
                        #    mais selon leur ordre numérique.
