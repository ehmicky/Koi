
           
   SIGNALS  
           



GOAL ==>                          #Simple IPC:
                                  #  - no payload except standardized names.
                                  #  - no response
                                  #Unix only

SYNC|ASYNC ==>                    #Sending a signal is sync, since do not wait for response.
                                  #Signal handler can be:
                                  #  - sync:
                                  #     - interrupt process execution
                                  #     - application-level equivalent of a CPU exception
                                  #     - e.g. FPU, segfault, abort
                                  #  - async:
                                  #     - let process handle it when it wants
                                  #     - application-level equivalent of a CPU interrupt (IRQ)
                                  #     - e.g. timer

DEFAULT HANDLER ==>               #Each signal has a default handler:
                                  #  - noop (Ign)
                                  #  - terminate (Term)
                                  #  - terminate and dump to ./core (Core)
                                  #  - pause (Stop)
                                  #  - unpause (Cont)

ALLOWED HANDLER ==>               #Each signal allows:
                                  #  - using the default handler (def)
                                  #  - ignoring default handler
                                  #  - using a different handler
                                  #SIGKILL|SIGSTOP cannot be ignored|handle
                                  #SIGINT|SIGILL|SIGFPE|SIGSEGV|SIGQUIT|SIGTSTP should not be ignored

BLOCKING|MASKING ==>              #A signal can be blocked: such incoming signals will then be queued until unblocked
                                  #Paused processes block all signals
                                  #SIGKILL|SIGSTOP cannot be blocked

CHILD PROCESSES ==>               #Inherit signals mask but not handlers

ANSI C89 SIGNALS ==>              #

NAME        NUMBER      DEFAULT   USAGE

SIGINT      2           Term      User interrupt with CTRL-C
SIGILL      4           Core      Trying to execute invalid machine instructions.
                                  E.g. due to wrong point, buffer overlow, etc.
                                  Similar to x64 exception #UD (invalid opcode)
SIGABRT     6           Core      Abnormal exit request.
SIGFPE      8           Core      Float error.
                                  Similar to x64 exceptions #DE (division by 0) and #MF (arithmetic overflow|underflow, wrong bits format)
SIGSEGV     11          Core      Segmentation fault.
                                  Similar to x64 exceptions #BR (buffer overflow), #SS (stack overflow|underflow), #GP (null pointer)
SIGTERM     15          Term      Normal exit request.

POSIX SIGNALS ==>                 #

SIGHUP      1           Term      Parent process stopped or communication with it stopped.
SIGQUIT     3           Core      User interrupt with CTRL-\
SIGTRAP     5           Core      Trace trap, used by debugger breakpoints
                                  Similar to x64 exceptions #DB and #BP (hardware|software breakpoints)
SIGKILL     9           Term      Forced termination
SIGUSR1     10          Term      User-defined signal 1
SIGUSR2     12          Term      User-defined signal 2
SIGPIPE     13          Term      Broken pipe (writing on a non-writable|connected pipe|socket)
SIGALRM     14          Term      Indique la fin d'un compteur mesurant le temps réel (est général pris en charge par un signal handler). Permet de faire une action après un temps donné. Implémenté par
                                  alarm() et sleep()
SIGCHLD     17          Ign       Indique à son parent qu'un processus enfant vient de s'achever
SIGCONT     18          Cont      Continue un process bloqué. Ne peut pas être blocké. Même handled, l'action Cont est effectué.
SIGSTOP     19          Stop      Stoppe
SIGTSTP     20          Stop      Stoppe. Utilisé par CTRL-Z ou suspend (command Unix)
SIGTTIN     21          Stop      Un processus en background cherche à lire l'input depuis le terminal (doit être handled). Par défaut, le processus est terminé
SIGTTOU     22          Stop      Comme SIGTTIN, mais pour un processus en background cherchant à écrire sur le terminal

OTHER SIGNALS ==>                 #

SIGINFO     ?           Ign       Demande des informations sur le process en cours
SIGIOT      6           Core      Synonyme de SIGABRT
SIGBUS      7           Core      Segfault dû non pas au pointage d'une adresse qu'on a pas le droit d'accéder, mais impossible (mal alignée ou trop grande)
SIGSTKFLT   16          Term      Stack fault (vide ou overflow). Rarement utilisé
SIGCLD      SIGCHLD     Ign       Same as SIGCHLD
SIGURG      23          Ign       Indique qu'une socket vient de out-of-band data
SIGXCPU     24          Core      CPU time soft limit exceeded par le programme
SIGXFSZ     25          Core      File size soft limit exceeded à cause d'une action du programme
SIGVTALRM   26          Term      Indique la fin d'un compteur mesurant le temps virtuel (est général pris en charge par un signal handler) du processus courant
SIGPROF     27          Term      Similaire à SIGVTALRM
SIGWINCH    28          Ign       Window size change (en général un terminal)
SIGPOLL     SIGIO       Term      Semblable à SIGIO
SIGIO       29          Term      En général pris en charge par un signal handler, et indique qu'un terminal ou une socket est pris pour un input ou output, normalement pour un mode async. Souvent
                                  ignoré par défaut
SIGPWR      30          Term      Power failure imminente
SIGSYS      31          Core      Bad system call.
SIGUNUSED   31          Term      Unused signal
SIGRTMIN    34                    Début des real-time signaux
SIGRTMAX    64                    Fin des real-time signaux
_NSIG       65                    Biggest signal number + 1

REAL TIME SIGNALS ==>             #Il s'agit des signaux qu'une application peut définir
                                  #pour ses besoins propres. Leur numéro est en général
                                  #entre environ 32 et 64, mais il faut de préférence :
                                  #  - utiliser SIGRTMIN + INT_VAL, car SIGRTMIN peut
                                  #    varier
                                  #  - vérifier que le numéro du signal ne dépasse pas
                                  #    SIGRTMAX
                                  #  - utiliser une macro #define SIG... SIGRTMIN +
                                  #    INT_VAL pour l'utiliser sous le nom de la macro et
                                  #    non avec SIGRTMIN + INT_VAL
                                  #Les real-time signaux font par défaut "Term".
                                  #De plus, contrairement aux signaux classiques :
                                  #  - plusieurs pending real-time du même signal sont
                                  #    queued plutôt que d'être comprimés en un seul.
                                  #  - plusieurs pending real-time de signaux différents
                                  #    ne sont pas délivrés selon leur ordre d'arrivée,
                                  #    mais selon leur ordre numérique.
