
        
   GRPC  
        



https://github.com/grpc/grpc-node/tree/master/packages/grpc-tools
  - related to *_gprc_pb.js
https://github.com/grpc/grpc-node/tree/master/packages/grpc-health-check
https://github.com/grpc/grpc/tree/master/doc

VERSION ==>                       #1.35.0

SUMMARY ==>                       #  - low payload size (protobuf)
                                  #  - request|response typing
                                  #  - streaming-friendly (uni|bi-directional)
                                  #  - on HTTP/2, but without any HTTP semantics
                                  #  - timeout|cancellation
                                  #  - SSL authentication

GENERAL ==>                       #Uses protobuf 'services' to as endpoints IDL (for validation and stub generation)
                                  #protobuf is also used for payloads most of the time. It can be customized, but difficult.
                                  #Under the hood, use HTTP/2, but without any of its semantics exposed.

CHANNEL ==>                       #Client-server socket|connection
                                  #Client->server and server->client are 2 different HTTP/2 streams

STREAMING ==>                     #Either|both request|response can be either streamed or not.
                                  #When streamed, order is preserved
                                  #If request stream, server can start responding as soon as request stream starts

HEADERS ==>                       #Under the hood, use HTTP/2 headers
                                  #Metadata:
                                  #  - for request|response
                                  #  - custom OBJ, outside of request|response payloads
                                  #  - key is dash-case
                                  #  - value can be:
                                  #     - either STR or binary
                                  #        - if binary, key must end with '-bin'
                                  #     - array of them
                                  #  - request metadata is always sent before request message
                                  #  - response metadata can be sent:
                                  #     - either before|after receiving response message
                                  #     - additionally after response message sent (trailing metadata)
                                  #  - often set by framework:
                                  #     (request)
                                  #     - 'user-agent' 'grpc-node-js/X.Y.Z'
                                  #     (response)
                                  #     - 'content-type' 'application/grpc+proto'
                                  #     - date 'DATE'
                                  #Method name: for request
                                  #Deadline:
                                  #  - for request
                                  #  - timeout
                                  #Status:
                                  #  - for response
                                  #  - code NUM + message STR

application/gprc[+FORMAT]         #MIME


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


require('gprc')                   #Version 1.24.5
                                  #Same interface as grpc-js but requires native addon
require('@gprc/grpc-js')          #Version 1.2.6
                                  #Misses a few features:
                                  #  - compress only response, not request
                                  #  - no automatic retries
                                  #  - no stats|tracing|monitoring
                                  #  - load balancing: only pick first and round robin


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PROTOBUF            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


require('@gprc/proto-loader')     #Version 0.5.6
                                  #Thin wrapper above protobufjs:
                                  #  - use DEF instead of ROOT, which is similar but simpler
                                  #  - provides with default serialize|deserialize() for RPC.*

DEF                               #Similar to protobufjs ROOT, but different format

load('PATH.proto'[_ARR][, LOPTS]) #LOPTS:
 ->PROMISE_DEF                    #  - includeDirs STR_ARR: like protoc --proto_path
                                  #  - any from protobufjs toObject() (for MESSAGE parsing)
                                  #  - any from protobufjs load()
loadSync(...)->DEF                #
loadFileDescriptorSetFromObject
 (FILE_DESCRIPTOR[, LOPTS])->DEF  #Same from a FILE_DESCRIPTOR (see protobufjs)
loadFileDescriptorSetFromBuffer
 (BUFFER[, LOPTS])->DEF           #Same from a file descriptor protobuf BUFFER

DEF.'[PACKAGE_VARR.]SERVICE_NAME' #SERVICE
SERVICE.RPC_NAME                  #RPC
RPC.path                          #'/[PACKAGE_VARR.]SERVICE_NAME/RPC_NAME'
RPC.originalName                  #'RPC_NAME' (camelCased)
RPC.request|responseStream        #BOOL
RPC.request|responseType          #MESSAGE_TYPE
RPC.request|responseSerialize     #E.g. Buffer.from(MESSAGE.serializeBinary())
 (MESSAGE)->BUFFER                #Should validate MESSAGE instanceof Message
RPC.request|responseDeserialize
 (BUFFER)->MESSAGE                #E.g. MESSAGE.deserializeBinary(new Uint8Array(BUFFER))

DEF.
 '[PACKAGE_VARR.]MESSAGE_TYP_NAME'#MESSAGE_TYPE
DEF.
 '[PACKAGE_VARR.]ENUM_TYPE_NAME'  #ENUM_TYPE
MESSAGE_TYPE|ENUM_TYPE.type       #OBJ (protobufjs-specific reflection)
MESSAGE_TYPE|ENUM_TYPE.
 fileDescriptorProtos             #BUFFER_ARR of Protobuf file descriptors sets


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SERVER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Server([SOPTS])               #SERVER

SERVER.addService(SERVICE, OBJ)   #Define RPC endpoints in server.
                                  #Must define OBJ.RPC_NAME(SCALL[, RES_FUNC])
SCALL.request                     #REQ (non-streaming request)
RES_FUNC(SERROR, RES, METADATA    #Non-streaming response
 [, WRITE_FLAGS])                 #METADATA is trailing metadata (see below).
ISTREAM ==>                       #SCALL is ISTREAM of REQ when receiving streaming.
                                  #Should handle errors
OSTREAM ==>                       #SCALL is OSTREAM of RES when sending streaming.
                                  #Should handle errors
MESSAGE                           #Either OBJ or google-protobuf MESSAGE
REQ                               #Request MESSAGE
RES                               #Response MESSAGE

ORIGIN                            #'[RESOLVER]:HOST:PORT'
RESOLVER ==>                      #Either dns (def) or uds
CHOPTS.default_authority          #Customize how 'ORIGIN' is resolved

SERVER.bindAsync
 ('ORIGIN', SCREDENTIALS,
 FUNC(ERROR, PORT_NUM))           #Start HTTP2 server
SERVER.start()                    #Starts accepting requests
                                  #Must be done after SERVER.bindAsync() completed
SERVER.tryShutdown(FUNC())        #Shutdown, waiting for ongoing requests to end
SERVER.forceShutdown()            #Shutdown, without waiting for ongoing requests to end


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CLIENT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


*_gprc_pb.js                      #Generated by protoc with gprc plugin. ???
                                  #Exports ROOT_OBJ
                                  #Uses makeClientConstructor()

loadPackageDefinition(DEF)
 ->SERVICES                       #
SERVICES.PACKAGE_VARR.SERVICE_VAR #ABSERVICE
makeClientConstructor(SERVICE)
 ->ABSERVICE                      #Same as loadPackageDefinition() but from SERVICE
ABSERVICE.service                 #SERVICE

new ABSERVICE('ORIGIN',
 CCREDENTIALS[, NOPTS])           #CLIENT
CLIENT.waitForReady
 (DEADLINE, FUNC([ERROR]))        #Calls FUNC() once connected
MOPTS.waitForReady                #BOOL (def: false). Do not send request until connection is ready.
COPTS.host                        #STR
CLIENT.close()                    #

CLIENT.RPC_NAME([REQ, ]
 [METADATA, ][COPTS, ][REQ_FUNC]) #Call RPC endpoints from client.
 ->CCALL                          #REQ is non-streaming request
REQ_FUNC(SERROR, RES)             #Non-streaming response
STREAMING ==>                     #Like SCALL, but inverting REQ|RES
                                  #Different signature: OSTREAM.write(REQ[, WRITE_FLAGS][, FUNC()])


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STATUS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CCALL.on('status', FUNC(STATUS))  #

STATUS.code                       #STATUS_CODE
status.VAR                        #STATUS_CODE, with VAR among:
                                  #  - OK
                                  #  - INVALID_ARGUMENT: REQ user validation error
                                  #  - OUT_OF_RANGE: user limit validation
                                  #  - UNAUTHENTICATED: authentication
                                  #  - PERMISSION_DENIED: authorization
                                  #  - RESOURCE_EXHAUSTED: quota, or machine out-of-memory, or input too big
                                  #  - NOT_FOUND: entity not found
                                  #  - ALREADY_EXISTS: entity alredy exists
                                  #  - CANCELLED: client cancelled
                                  #  - DEADLINE_EXCEEDED: timeout
                                  #  - UNAVAILABLE: failed, but should retry
                                  #  - FAILED_PRECONDITION: failed, but client should fix something before retrying
                                  #  - ABORTED: server aborted the request, e.g. due to concurrency issues
                                  #  - UNIMPLEMENTED: method not implemented in server
                                  #  - DATA_LOSS: data corrupted or lost
                                  #  - INTERNAL: internal OS error
                                  #  - UNKNOWN: uncaught exception
STATUS.details                    #STR
STATUS.metadata                   #METADATA (trailing)

SERROR                            #ERROR with code STATUS_CODE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           METADATA            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Metadata([MOPTS])             #METADATA
METADATA.setOptions(MOPTS)        #
METADATA.getOptions()->MOPTS      #
METADATA.get('KEY')
 ->STR|BUFFER_ARR                 #
METADATA.set('KEY', STR|BUFFER)   #Set single value
METADATA.add('KEY', STR|BUFFER)   #Add to ARR value
METADATA.remove('KEY')            #
METADATA.getMap()->MAP            #Clone
METADATA.clone()->METADATA2       #
METADATA.merge(METADATA2)         #
METADATA.toHttp2Headers()->OBJ
Metadata.fromHttp2Headers(OBJ)
 ->METADATA                       #Converts from|to plain OBJ

SCALL.metadata                    #Request METADATA
SCALL.sendMetadata(METADATA)
CCALL.on
 ('metadata', FUNC(METADATA))     #Non-trailing response METADATA
TRAILING RESPONSE METADATA ==>    #Use RES_FUNC to send, and CCALL.on('status') to receive


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TIMEOUT/CANCEL         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CCALL.cancel()                    #Cancel request
SCALL.on('cancelled', FUNC())     #
SCALL.cancelled                   #BOOL

DEADLINE                          #DATE or UNIX_TIMESTAMP_NUM (in ms) or Infinity (i.e. none)
COPTS.deadline                    #DEADLINE (def: none)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTHENTICATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCREDENTIALS|CCREDENTIALS         #Server|client authentication for a whole connection
CREDENTIALS                       #Request|response authentication for a single request
ServerCredentials.createInsecure()
 ->SCREDENTIALS                   #No authentication
ServerCredentials.createSsl       #SSL authentication
 (BUFFER|null, KEY_ARR[, BOOL])   #BUFFER (def: null): certificate
 ->SCREDENTIALS                   #KEY_ARR: private_key BUFFER2, cert_chain BUFFER3
                                  #BOOL (def: false): check client certificate
credentials.createInsecure()
 ->CCREDENTIALS                   #No authentication
credentials.createSsl             #SSL authentication
 (BUFFER|null, BUFFER2|null,      #BUFFER2|3 are private_key|cert_chain
 BUFFER3|null[, OPTS])            #OPTS:
 ->CCREDENTIALS                   #  - checkServerIdentity('ORIGIN', CERTIFICATE_OBJ)[->ERROR] (def: none)

credentials.createEmpty()
 ->CREDENTIALS                    #No authentication
credentials.
 createFromMetadataGenerator
 (FUNC(OBJ, FUNC(ERROR,METADATA)))#OBJ: service_url STR
 ->CREDENTIALS                    #Custom header authentication
credentials.combineCallCredentials
 (CREDENTIALS_ARR)->CREDENTIALS   #
credentials.
 combineChannelCredentials
 (CCREDENTIALS, CREDENTIALS_ARR)
 ->CCREDENTIALS                   #When using both channel and request-specific authentication

COPTS.credentials                 #CREDENTIALS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CHANNEL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CHANNEL                           #Underlying transport. By def, HTTP/2 logic
                                  #Automatically reconnects

NOPTS.channelOverride             #CHANNEL. Customize
NOPTS.channelFactoryOverride
 ('ORIGIN', CCREDENTIALS, COPTS)
 ->CHANNEL                        #Same but as a method

CLIENT.getChannel()->CHANNEL      #
CHANNEL.getTarget()->'ORIGIN'     #

CHANNEL.getConnectivityState
 ([BOOL])->CONNECTIVITY_STATE     #If BOOL true (def: false), tries to connect if not connected
CHANNEL.watchConnectivityState
 (CONNECTIVITY_STATE, DEADLINE,
 FUNC(ERROR))                     #Call FUNC() when CONNECTIVITY_STATE, or after DEADLINE timeout
connectivityState.ENUM            #Among: IDLE, CONNECTING, READY, TRANSIENT_FAILURE, SHUTDOWN

CCALL|SCALL.getPeer()->'ORIGIN'   #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        CHANNEL OPTIONS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOPTS|NOPTS.'grpc.PROP'           #Documented as [S|N]CHOPTS.PROP

CHOPTS.max_send_message_length    #NUM (in bytes, def: -1)
CHOPTS.max_receive_message_length #NUM (in bytes, def: 4MB)
SCHOPTS.max_concurrent_streams    #NUM (def: unlim). Max number of requests at once.

NCHOPTS.
 primary|secondary_user_agent     #STR. Prepended|appended to user-agent METADATA

CHOPTS.initial|                   #NUM (in ms) (def: 1s initial, 2m max).
 max_reconnect_backoff_ms         #How long to wait to retry connecting.
CHOPTS.keepalive_time_ms          #NUM (in ms) (def|max: 1 month). Send a ping every NUMms.
CHOPTS.keepalive_timeout_ms       #NUM (in ms) (def: 20s). After a ping, timeout after NUMms, closing the channel.
CHOPTS.
 keepalive_permit_without_calls   #0|1 (def: 0). Send pings even when there are no REQ|RES streams.

CHOPTS.use_local_subchannel_pool  #BOOL. Make the CHANNELs|sockets pool be local to this server, instead of being global.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          COMPRESSION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CHOPTS.                           #NUM
 default_compression_algorithm    #Compression of REQ
                                  #Can be:
                                  #  - 0: none
                                  #  - 1: DEFLATE (non-streaming)
                                  #  - 2: GZIP (non-streaming)
                                  #  - 3: GZIP (streaming)
                                  #Does not seem to be supported yet
CHOPTS.default_compression_level  #NUM
                                  #Compression of RES
                                  #Can be: 0 (none), 1 (low), 2 (medium), 3 (high)
writeFlags.ENUM                   #WRITE_FLAGS:
                                  #  - NO_COMPRESS: force no compression on a specific REQ|RES


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CUSTOM CLIENT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NOPTS.callInvocationTransformer   #Modify each request before sending
 (OBJ)->OBJ                       #OBJ:
                                  #  - argument REQ
                                  #  - metadata METADATA
                                  #  - callOptions COPTS
                                  #  - callback REQ_FUNC
                                  #  - methodDefinition RPC
                                  #  - call CCALL
                                  #  - channel CHANNEL
COPTS|NOPTS.interceptors          #ARR of FUNC(COPTS, FUNC2)->new InterceptingCall(FUNC2(COPTS, OBJ))
                                  #Customizes some event handling using OBJ.FUNC(...):
                                  #  - start(METADATA, LISTENER, FUNC4([ERROR]))
                                  #  - sendMessage(MESSAGE, FUNC4([ERROR]))
                                  #  - halfClose(FUNC4([ERROR]))
                                  #  - cancel(MESSAGE, FUNC4([ERROR]))
                                  #LISTENER is OBJ with:
                                  #  - onReceiveMetadata(METADATA, FUNC5([ERROR]))
                                  #  - onReceiveMessage(MESSAGE, FUNC5([ERROR]))
                                  #  - onReceiveStatus(STATUS, FUNC5([ERROR]))
                                  #COPTS also has method_definition RPC
COPTS|NOPTS.interceptor_providers #FUNC3_ARR: same using FUNC3(RPC)->FUNC


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PROXY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CHOPTS.enable_http_proxy          #0|1 (def: 1). Allow client HTTP proxy (if configured with ENVVAR GRPC_PROXY)
ENVVAR GRPC_PROXY="URL"           #Proxies all response from server to client at URL

COPTS.parent                      #CCALL. Indicates current client is a proxy
COPTS.propagate_flags             #NUM
                                  #With COPTS.parent, proxies some information
                                  #Bitwise-flag of propagate.VAR among:
                                  #  - DEADLINE: timeout
                                  #  - CANCELLATION: request cancellation
                                  #  - CENSUS_STATS_CONTEXT
                                  #  - CENSUS_TRACING_CONTEXT
                                  #  - DEFAULTS (default values, i.e. all of them)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LOAD BALANCING         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CHOPTS.service_config             #'JSON'. Load balancing configuration.
                                  #Is OBJ:
                                  #  - loadBalancingPolicy STR
                                  #  - loadBalancingConfig OBJ_ARR:
                                  #     - pick_first|round_robin OBJ
                                  #  - methodConfig OBJ_ARR:
                                  #     - name OBJ: service STR, method STR
                                  #     - waitForReady BOOL
                                  #     - timeout 'NUM[.NUM]s'
                                  #     - maxRequestBytes|maxResponseBytes NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR GRPC_TRACE=STR             #Debug mode (def: none). STR can be 'all' or:
                                  #  - 'channel'
                                  #  - 'subchannel'
                                  #  - 'subchannel_refcount'
                                  #  - 'connectivity_state'
                                  #  - 'resolving_load_balancer'
                                  #  - 'dns_resolver'
                                  #  - 'pick_first'
                                  #  - 'call_stream'
                                  #  - 'server'
                                  #  - 'server_call'
ENVVAR GRPC_VERBOSITY=STR         #Can be 'DEBUG|INFO|ERROR' (def: 'INFO')
setLoggerVerbosity(NUM)           #Same, using logVerbositoy.DEBUG|INFO|ERROR
setLogger(CONSOLE)                #Customize logging
