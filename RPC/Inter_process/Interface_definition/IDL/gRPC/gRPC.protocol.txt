
        
   GRPC  
        



https://grpc.io/docs/languages/node/basics/
https://grpc.github.io/grpc/node/index.html
https://grpc.io/docs/guides/
https://github.com/grpc/grpc-node
https://github.com/grpc/grpc-node/blob/master/PACKAGE-COMPARISON.md

VERSION ==>                       #1.35.0

Headers-like:
  - request|response:
     - metadata OBJ
        - response metadata can be sent:
           - either before|after receiving request message
           - additionally after response message sent (trailing metadata)
  - request:
     - method name
     - deadline|timeout:
        - deadline (timestamp) or timeout (duration)
        - results in `DEADLINE_EXCEEDED` error
  - response:
     - status code+message

Streaming:
  - order is preserved
  - if request stream, server can start responding as soon as request stream starts
  - client->server and server->client are 2 different streams

Channel:
  - client-server socket|connection

require('@gprc/grpc-js')          #GRPCJS
                                  #Version 1.2.6
require('gprc')                   #GRPCN
                                  #Version 1.24.5
                                  #Difference with GRPCJS:
                                  #  - requires native addon

new GRPCJS.Server()               #SERVER

SERVER.bindAsync('HOST:PORT',
 CREDENTIALS, FUNC())             #
SERVER.start()                    #Must be done after SERVER.bindAsync() completed

GRPCJS.ServerCredentials          #SCREDENTIALS
SCREDENTIALS.createInsecure()
 ->CREDENTIALS                    #

SERVER.addService(SSERVICE, OBJ)  #Must define OBJ.RPC_NAME(CALL[, RES_FUNC])
SERVER.addProtoService
 (SSERVICE, OBJ)                  #Same???

CSERVICE.RPC_NAME
 ([REQ][, RES_FUNC])              #REQ is non-streaming request

MESSAGE                           #Either OBJ or google-protobuf MESSAGE
REQ                               #Request MESSAGE
RES                               #Response MESSAGE
CALL.request                      #REQ (non-streaming request)
RES_FUNC(ERROR, RES)              #Non-streaming response
                                  #Triggered by server, callbacked by client
CALL.on('data', FUNC(REQ|RES))
CALL.on('end', FUNC())            #Streaming receiving
CALL.write(REQ|RES)
CALL.end()                        #Streaming sending

require('@gprc/proto-loader')     #LOADER
                                  #Version 0.5.6
LOADER.loadSync
 ('PATH.proto'[, OPTS])->DEF      #
GRPCJS.loadPackageDefinition(DEF)
 ->ROOT_OBJ                       #Proto file as ROOT_OBJ
ROOT_OBJ.PACKAGE_VARR             #
ROOT_OBJ.SERVICE_VAR.service      #SSERVICE
new ROOT_OBJ.SERVICE_VAR
 ('HOST:PORT', CREDENTIALS)       #CSERVICE

GRPCJS
 .makeGenericClientConstructor    #Same as loadPackageDefinition() but not from proto file
 (OBJ)->ROOT_OBJ                  #OBJ.RPC_NAME COPTS
COPTS.path                        #'/[PACKAGE.]SERVICE_NAME/RPC_NAME'
COPTS.request|responseStream      #BOOL
COPTS.request|responseType        #Message type
COPTS.request|responseSerialize   #E.g. Buffer.from(MESSAGE.serializeBinary())
 (MESSAGE)->BUFFER                #Should validate MESSAGE instanceof Message
COPTS.
 request|responseDeserialize
  (BUFFER)->MESSAGE               #E.g. MESSAGE.deserializeBinary(new Uint8Array(BUFFER))

*_gprc_pb.js                      #Generated by protoc with gprc plugin.
                                  #Exports ROOT_OBJ
                                  #Uses makeGenericClientConstructor()
