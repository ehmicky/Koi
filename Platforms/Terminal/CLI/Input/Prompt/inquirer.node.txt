
            
   INQUIRER  
            



TODO:
  - go through source code
  - try everything in this doc
  - https://github.com/SBoudrias/Inquirer.js#plugins

ALTERNATIVES ==>                      #  - inquirer (preferred)
                                      #  - node-promptly: minimal but relies on unmaintained code
                                      #  - terkelg prompts: not well maintained
                                      #  - enquirer: not maintained
                                      #  - flatiron prompt: not maintained

VERSION ==>                           #8.0.0
                                      #Is a Node module

INQUIRER.prompt                       #Prompt for a value on the CLI
 (QUESTION_ARR[, ANSWERS2])           #ANSWERS2 are already answered ones (def: {})
 ->PROMISE_ANSWERS                    #Cleanly stopped on: SIGINT, process 'exit'
ANSWERS.NAME                          #VAL. Type depends on QUESTION.type
                                      #NAME can be VARR

INQUIRER.createPromptModule([MOPTS])  #Allows setting MOPTS
 ->INQUIRER.prompt                    #Also clone so that registerPrompt() is local to this instance.

MOPTS.skipTTYChecks                   #If true (def) and MOPTS.input.isTTY false, make prompt() throw an ERROR.
                                      #ERROR will have ERROR.isTTYError true
MOPTS.input                           #ISTREAM (def: process.stdin)
MOPTS.output                          #OSTREAM (def: process.stdout)
MOPTS.*                               #Any readline.createInterface() OPTs can be used

QUESTION.type                         #'TYPE'. Can be:
                                      #  - "confirm": Yes/No, returns BOOL
                                      #  - "input" (def): returns STR
                                      #  - "password": same but hides input
                                      #  - "editor":
                                      #     - return STR
                                      #     - uses machine-specific text editor for user to enter, based on:
                                      #        - ENVVAR VISUAL|EDITOR
                                      #        - otherwise, "notepad" (Windows) or "vim" (Unix)
                                      #     - uses a temporary file
                                      #  - "list":
                                      #     - returns VAL
                                      #     - chooses among choices with an arrow
                                      #     - can use Up|Down j|k or CTRL-n|p to navigate
                                      #  - "rawlist": same but chooses by typing number
                                      #  - "expand": same but chooses by typing letter, which shows the option.
                                      #  - "checkbox": same but multiple choice. Returns STR_ARR
                                      #  - "number": returns NUM
QUESTION.name                         #NAME. Required.
QUESTION.message                      #STR[(ANSWERS)]
                                      #Def: `${QUESTION.name}:`
QUESTION.prefix|suffix                #STR prepended|appended to QUESTION.message (def: '?'|'')
QUESTION.default                      #[PROMISE_]VAL[(ANSWERS)]
                                      #With:
                                      #  - "[raw]list", "expand", "checkbox": can be either CHOICE.value or index
                                      #  - "checkbox": can be ARR of CHOICE.value
                                      #  - "expand": def is "help"
QUESTION.askAnswered                  #If false (def), do not ask answers already in ANSWERS2
QUESTION.validate(STR, ANSWERS)       #For "input", "password", "checkbox", "number"
 ->[PROMISE_]BOOL|'ERROR'             #Whether input is accepted.
QUESTION.filter(VAL, ANSWERS)         #For all but "confirm|expand".
 ->[PROMISE_]VAL                      #Transform what is returned in ANSWERS
QUESTION.transformer                  #For "input"
 (STR, ANSWERS, OPTS)->STR            #Transform what is displayed to users (not what is returned in ANSWERS)
QUESTION.when(ANSWERS)->[PROMISE_]BOOL#Whether question should be prompted.
QUESTION.pageSize                     #For "[raw]list", "expand", "checkbox"
                                      #NUM of items
QUESTION.loop                         #For "[raw]list", "checkbox"
                                      #If true (def: false), end of list cycles back to start.
QUESTION.mask                         #For "password"
QUESTION.postfix                      #For "editor" ???

QUESTION.choices                      #For "[raw]list", "expand", "checkbox"
                                      #Chooses among [PROMISE_]CHOICE_ARR[(ANSWERS)].
                                      #Can also be [PROMISE_]STR_ARR[(ANSWERS)], same as CHOICE: name+short+value STR
CHOICE.name                           #STR (def: CHOICE.value). Shown before selection.
CHOICE.short                          #STR (def: CHOICE.name|value). Shown after selection.
CHOICE.value                          #VAL (def: CHOICE.name)
CHOICE.key                            #'CHAR'. For "expand"
                                      #Cannot be "h"
CHOICE.checked                        #BOOL (def: false). For "checkbox"
                                      #Whether checked by default.
CHOICE.disabled                       #BOOL[(ANSWERS)]. For "checkbox"
                                      #Can also be STR[(ANSWERS)]: like true, but with a specific message
new INQUIRER.Separator([STR])         #CHOICE used as visual separator (def STR "---------------")

new INQUIRER.ui.BottomBar()           #Shown in the bottom of the screen.
BOTTOMBAR.log                         #IOSTREAM. Writing to it updates the bottom bar.
BOTTOMBAR.updateBottomBar(STR)        #Like INQUIRERLOG.log.write(STR), but always put at last line.
                                      #Should only be done after all questions are asked.

INQUIRER.registerPrompt               #Add a QUESTION.type
 ('TYPE', PLUGIN)                     #Not documented until needed
