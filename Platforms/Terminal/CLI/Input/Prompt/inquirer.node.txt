
            
   INQUIRER  
            



TODO:
  - https://github.com/haversnail/inquirer-date-prompt
  - https://github.com/anc95/inquirer-file-tree-selection
  - https://github.com/mokkabonna/inquirer-autocomplete-prompt
  - https://github.com/sullof/inquirer-command-prompt

ALTERNATIVES ==>                      #  - inquirer (preferred)
                                      #  - node-promptly: minimal but relies on unmaintained code
                                      #  - terkelg prompts: not well maintained
                                      #  - enquirer: not maintained
                                      #  - flatiron prompt: not maintained

VERSION ==>                           #8.0.0
                                      #Is a Node module

require('inquirer')                   #INQUIRER

require('@inquirer/core|TYPE')        #Like require('inquirer') but:
                                      #  - broken down into smaller modules
                                      #  - use a different interface for plugins
                                      #Stil in alpha, so not documented


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROMPT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INQUIRER.prompt
 (QUESTION_ARR[, ANSWERS2])           #Prompt for a value on the CLI
 ->PROMISE_ANSWERS                    #ANSWERS2 are pre-filled ones (def: {})
ANSWERS.NAME                          #VAL. Type depends on QUESTION.type
                                      #NAME can be VARR
EXIT ==>                              #Cleanly stopped on: SIGINT, process 'exit'

INQUIRER.createPromptModule([MOPTS])  #Allows setting MOPTS
 ->INQUIRER.prompt                    #Also clone so that registerPrompt() is local to this instance.

MOPTS.skipTTYChecks                   #If false and MOPTS.input.isTTY false, make prompt() throw an ERROR.
                                      #ERROR will have ERROR.isTTYError true
                                      #If true (def), INQUIRER is most likely to hang forever otherwise (but not holding the process alive)
MOPTS.input                           #ISTREAM (def: process.stdin)
MOPTS.output                          #OSTREAM (def: process.stdout)
MOPTS.*                               #Any readline.createInterface() OPTs can be used


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TYPES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


QUESTION.type                         #'TYPE' (def: "input")

INQUIRER.[prompt.]registerPrompt      #Add a custom QUESTION.type
 ('TYPE', PLUGIN)->INQUIRER           #Not documented until needed

TYPE "confirm"                        #BOOL
                                      #Yes/No
                                      #Look for "y[es]", case-insensitively
                                      #Def QUESTION.default is true
TYPE "number"                         #NUM
                                      #Returns NaN if not a number
TYPE "input"                          #STR
TYPE "password"                       #Same as "input" but hides input
                                      #Can specify QUESTION.mark BOOL|'CHAR':
                                      #  - used to mask input
                                      #  - true: like '*'
                                      #  - false (def): show '[hidden]' (i.e. does not show input length)
TYPE "editor"                         #STR
                                      #Uses machine-specific text editor for user to enter, based on:
                                      #  - ENVVAR VISUAL|EDITOR
                                      #  - otherwise, "notepad" (Windows) or "vim" (Unix)
                                      #Uses a temporary file
                                      #Can specify QUESTION.postfix '.EXT' (def: '.txt') of the file to edit

TYPE "list"                           #VAL
                                      #Chooses among QUESTION.choices with an arrow
                                      #Can use:
                                      #  - Up|Down j|k or CTRL-n|p to navigate
                                      #  - digits to select by index
                                      #Can specify:
                                      #  - QUESTION.pageSize NUM (def: 7): max items to show at once
                                      #  - QUESTION.loop BOOL (def: true): end of list cycles back to start
                                      #QUESTION.default can be either CHOICE.value or index
TYPE "rawlist"                        #Same as "list" but shows indexes and a prompt to enter index
TYPE "expand"                         #Same as "list" but chooses by typing letter, which shows the option.
                                      #Also include "h" to show all possible options
                                      #  - shown also when submitting empty answer
TYPE "checkbox"                       #STR_ARR
                                      #Same as "list" but multiple choice
                                      #Can use same keys as "list", but also: a (all), i (invert)
                                      #QUESTION.default must be ARR of CHOICE.value

TYPE "emoji"                         ##STR
                                     ##Select emoji by entering words.
                                     ##Based on inquirer-autocomplete-prompt, i.e. can use same options
                                     ##  - uses emoj (see its doc) as QUESTION.source
                                     ##Module "inquirer-emoji" (1.0.2)
TYPE "date"                          ##DATE
                                     ##Select a date + time with arrows.
                                     ##  - CTRL-Arrow to change by 10, CTRL-ALT-Arrow to change by 100
                                     ##QUESTION.default is now by default
                                     ##Adds to QUESTION:
                                     ##  - locale 'LOCALE'[_ARR]
                                     ##  - format OBJ: Intl.DateTimeFormat's options
                                     ##  - clearable BOOL (def: false): delete|backspace submits and returns null
                                     ##Adds to QUESTION.transformer's OPTS:
                                     ##  - isDirty BOOL: user changed the date
                                     ##  - isFinal BOOL: user submitted
                                     ##  - isCleared BOOL: user cleared (see clearable)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           QUESTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


QUESTION.name                         #NAME. Required.
QUESTION.message                      #STR[(ANSWERS)]
                                      #Def: `${QUESTION.name}:`
QUESTION.prefix|suffix                #STR prepended|appended to QUESTION.message (def: ''|'?')

QUESTION.default                      #[PROMISE_]VAL[(ANSWERS)]
QUESTION.askAnswered                  #If false (def), do not ask pre-filled ANSWERS2

QUESTION.when(ANSWERS)->[PROMISE_]BOOL#Whether question should be prompted.
QUESTION.validate(STR, ANSWERS)       #For "input", "password", "checkbox", "number"
 ->[PROMISE_]BOOL|'ERROR'             #Whether input is accepted.
QUESTION.transformer                  #For "input", "number"
 (STR, ANSWERS, OPTS)->STR            #Transform what is displayed to users (not what is returned in ANSWERS)
QUESTION.filter(VAL, ANSWERS)         #For all but "confirm|expand".
 ->[PROMISE_]VAL                      #Transform what is returned in ANSWERS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CHOICE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


QUESTION.choices                      #For "[raw]list", "expand", "checkbox"
                                      #Chooses among [PROMISE_]CHOICE_ARR[(ANSWERS)].
                                      #CHOICE can also be STR, same as CHOICE: name+short+value STR

CHOICE.name                           #STR (def: CHOICE.value). Shown before selection.
CHOICE.short                          #STR (def: CHOICE.name|value). Shown after selection.
CHOICE.value                          #VAL (def: CHOICE.name)
CHOICE.key                            #'CHAR'. For "expand". Required.
                                      #Cannot be "h"
CHOICE.checked                        #BOOL (def: false). For "checkbox"
                                      #Whether checked by default.
CHOICE.disabled                       #BOOL[(ANSWERS)]. For "checkbox"
                                      #Can also be STR[(ANSWERS)]: like true, but with a specific message

new INQUIRER.Separator([STR])         #CHOICE used as visual separator (def STR "──────────────")


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BOTTOMBAR           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new INQUIRER.ui.BottomBar([MOPTS])    #Shown in the bottom of the screen.
BOTTOMBAR.updateBottomBar(STR)        #Like BOTTOMBAR.log.write(STR), but always put at last line.
                                      #Should only be done after all questions are asked.
BOTTOMBAR.clean()                     #Clear content
BOTTOMBAR.log                         #IOSTREAM to use instead of process.stdout (including console.log())
BOTTOMBAR.close()                     #Must be called when done
