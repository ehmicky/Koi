
         
   CHALK  
         



VERSION ==>                           #Node module (3.0.0)

GOAL ==>                              #Terminal colors:
                                      #  - apply them
                                      #  - detects terminal support
                                      #  - string colorization helpers (test, strip, get width)
                                      #  - low-level escape sequences

new Chalk.Instance([OPTS])            #
Chalk[.stderr]                        #Singleton with default options
                                      #OPTS.level is SUPPORTS-COLOR.stdout|stderr

CHALK.STYLE...(STR...)                #Apply STYLE on STR... among:
                                      #  - reset|bold|dim|underline|inverse|hidden
                                      #    (not on all terminals) italic|strikethrough
                                      #  - visible: i.e. hidden if !CHALK.enabled
                                      #  - [bg]black|red|green|yellow|blue|magenta|cyan|white|gray[Bright]
                                      #  - rgb|hsl|hsv|hwb|cmyk|gray|xyz|lab|lch|hcg|apple|hex|keyword|ansi256(...)
                                      #    (see color-convert library)
                                      #Result must be put in a console.log()
                                      #STR can be the result of another CHALK.STYLE()
                                      #Range of colors depends on terminal support (see below)

chalk`... {[~]STYLE... ${STR}} ...`   #Same as `... ${CHALK.STYLE...(STR)} ...`
                                      #~ negates the style
                                      #{...} can be nested
                                      #Spaces inside STYLE are not allowed, e.g. rgb(0,0,0), not rgb(0, 0, 0)

chalk STYLE... STR                   ##Same but as CLI
                                     ##Package chalk-cli (4.1.0)
--template STR                       ##Using syntax '{[~]STYLE... STR}'
--demo                               ##Show all possible styles


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       TERMINAL SUPPORT        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


Chalk[.stderr].supportsColor          #Returns SUPPORTS-COLOR.stdout|stderr (see below)
OPTS.level                            #Same as Chalk[.stderr].supportsColor.level, except can be changed

SUPPORTS-COLOR.supportsColor         ##Either:
 (STREAM)->VAL                       ##  - false: terminal does not support color
SUPPORTS-COLOR.stdout|stderr         ##  - OBJ:
                                     ##     - level 1|2|3: supports no, 16, 256 or 16 millions colors
                                     ##     - hasBasic|has256|has16m BOOL: same with booleans
                                     ##Use similar logic as core WRITESTREAM.hasColors():
                                     ##  - but based on older code, i.e. not as good
                                     ##  - if STREAM.isTTY false or in browsers: 1 bit
                                     ##Influenced by:
                                     ##  - --no-color[s], --color=false|never, ENVVAR FORCE_COLOR=0: 1 bit
                                     ##  - --color[s], --color=true|always, ENVVAR FORCE_COLOR=1: 4 bits
                                     ##  - --color=256, ENVVAR FORCE_COLOR=2: 8 bits
                                     ##  - --color=16m|full|truecolor, ENVVAR FORCE_COLOR=3: 24 bits
                                     ##Package supports-color (7.1.0)
supports-color                       ##Same as CLI, using exit code
                                     ##Package supports-color-cli (2.0.0)
--256|16m


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            HELPERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ANSI-REGEX([OPTS])->REGEXP           ##REGEXP checking if a STR has ANSI color sequences
                                     ##OPTS:
                                     ##  - onlyFirst BOOL: if false (def), use 'g' flag
                                     ##Package ansi-regex (5.0.0)
HAS-ANSI(STR)->BOOL                  ##Detects ANSI color sequences, using ANSI-REGEX
                                     ##Package has-ansi (4.0.0)
has-ansi [STR]                       ##Same as CLI. Def: stdin
                                     ##Package has-ansi-cli (3.0.0)

STRIP-ANSI(STR)->STR                 ##Removes ANSI color sequences, using ANSI-REGEX
                                     ##Package strip-ansi (6.0.0)
strip-ansi [STR]                     ##Same as CLI. Def: stdin
                                     ##Package strip-ansi-cli (2.0.0)
STRIP-ANSI-STREAM()->IOSTREAM        ##Same as IOSTREAM
                                     ##Package strip-ansi-stream (1.0.0)

STRING-WIDTH(STR)->NUM               ##Gets STR width, ignoring ANSI color sequences, and counting fullwidth Unicode chars as 2
                                     ##Package string-width (4.2.0)
string-width STR                     ##Same as CLI
                                     ##Package string-width-cli (2.0.0)
SLICE-ANSI(STR, ...)->STR            ##Like STR.slice(...), but with same logic as STRING-WIDTH
                                     ##Package slice-ansi (3.0.0)
CLITRUNCATE(STR, NUM[, OPTS])->STR   ##Like SLICE-ANSI but adding ellipsis …
                                     ##OPTS:
                                     ##  - position 'start', 'middle' or 'end' (def)
                                     ##  - space BOOL (def: false): add a space next to ellipsis.
                                     ##  - preferTruncationOnSpace BOOL (def: false): truncate on space if within 3 characters
                                     ##Package cli-truncate (2.0.0)
WRAP-ANSI(STR, NUM[, OPTS])->STR     ##Wrap STR for NUM columns, using same logic as STRING-WIDTH
                                     ##Package wrap-ansi (6.1.0)
                                     ##OPTS:
                                     ##  - trim BOOL (def: true): trim whitespaces at end
                                     ##  - hard BOOL: if false (def), allow words longer than NUM to overflow
                                     ##  - wordWrap BOOL: if true (def: false), fill each line with exactly NUM chars instead
                                     ##    of trying to break on words


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           INTERNALS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ANSI-STYLES.STYLE.open|close STR     ##ANSI color sequences
                                     ##Package ansi-styles (4.2.0)
ANSI-STYLES.modifier.MODIFIER
 .open|close STR                     ##ANSI sequences, e.g. for bold, etc.
ANSI-STYLES.color|bgColor.COLOR
 .open|close STR                     ##ANSI color sequences
ANSI-STYLES.color|bgColor.close STR  ##ANSI stop sequence, for any COLOR
ANSI-STYLES.codes                    ##Raw ANSI sequences, as a MAP
ANSI-STYLES.color|bgColor            ##Returns ANSI sequence, for terminal supporting:
 .ansi|ansi256|ansi16m               ##  - 4 bits (16 colors)
 .rgb|hsl|hsv|hwb|cmyk|gray|xyz|lab| ##  - 8 bits (256 colors) (def)
  lch|hcg|apple|hex|keyword|ansi16|  ##  - 24 bits (16 million colors) ("true color")
  ansi256|ansi16m(...)->STR          ##According to several possible spaces (see color-convert library)
