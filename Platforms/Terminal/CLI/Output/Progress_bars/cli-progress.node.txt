
                
   CLI-PROGRESS  
                



ALTERNATIVES ==>                  #  - cli-progress (preferred):
                                  #     - fast
                                  #     - schemas
                                  #     - custom text
                                  #     - clear on completion
                                  #     - custom bar
                                  #     - no TTY output (e.g. files)
                                  #     - custom output (e.g. not terminal)
                                  #     - ETA
                                  #  - ascii-progress:
                                  #     - not maintained
                                  #     - slow
                                  #     - shows weird characters
                                  #     - custom text
                                  #     - clear on completion
                                  #     - gradients
                                  #  - node-progress: not maintained
                                  #  - gauge: not maintained

VERSION ==>                       #3.3.1

new SingleBar(OPTS[, PRESET])     #
SINGLEBAR.start([TOTAL][,CURRENT])#Def CURRENT: 0, TOTAL: 100
SINGLEBAR.update(CURRENT)         #
SINGLEBAR.increment([NUM])        #Add NUM (def: 1) to CURRENT
SINGLEBAR.setTotal(TOTAL)         #
SINGLEBAR.stop()                  #

new MultiBar(OPTS[, PRESET])      #Show multiple SINGLBAR stacked on top of each other
MULTIBAR.create([TOTAL][,CURRENT])
 ->SINGLEBAR                      #Def CURRENT: 0, TOTAL: 100
MULTIBAR.remove(SINGLEBAR)        #
MULTIBAR.stop()                   #

PRESET                            #Same as OPTS, merged with lower priority
                                  #The following PRESETs work on Windows cmd.exe
presets.shades_legacy             #progress [===========----------] PERC% | ETA: ETAs | CURRENT/TOTAL
                                  #Default for OPTS.format
presets.shades_rect               # ■■■■■■■■■■■■■■■■■            ■  PERC% | ETA: ETAs | CURRENT/TOTAL
presets.shades_classic            # █████████████████░░░░░░░░░░░░░░ PERC% | ETA: ETAs | CURRENT/TOTAL
presets.shades_grey               #Same as shades_classic but bar is gray

OPTS.barsize                      #NUM (def: 40). Bar width (in characters)
OPTS.align                        #Position of OPTS.format inside OPTS.barsize
                                  #Among 'left' (def), 'right', 'center'

OPTS.format                       #STR[(OPTS, PARAMS, CUSTOM_PARAMS)]. What is printed.
                                  #Def: 'progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}'
                                  #Can contain placeholder {PARAM}:
                                  #  - value 'CURRENT'
                                  #  - total 'TOTAL'
                                  #  - percentage 'NUM'
                                  #  - duration 'NUM': elapsed seconds
                                  #  - eta 'NUM': remaining seconds
                                  #  - duration_formatted, eta_formatted STR: same with unit (s|h|m)
                                  #  - bar STR
                                  #Can pass CUSTOM_PARAMS as last argument to start|update|increment():
                                  #  - to add new PARAMS or override existing ones
OPTS.bar[In]CompleteChar          #STR (def: '=' and '-')
OPTS.emptyOnZero                  #BOOL (def: false). If TOTAL 0, show progress bar as empty.

OPTS.hideCursor                   #BOOL (def: false). Hide CLI cursor on start(), revert on stop()
OPTS.linewrap                     #BOOL. If false (def), disable terminal line wrapping (if any) on start(), revert on stop()

OPTS.stopOnComplete               #BOOL (def: false). Call stop() if CURRENT >= TOTAL
OPTS.clearOnComplete              #BOOL (def: false). Remove progress bar from UI on stop()

OPTS.fps                          #NUM (def: 10).
                                  #CLI updates per second.
                                  #CLI updates|writes are done at regular interval, throttled.
OPTS.etaBuffer                    #NUM (def: 10). Number of CLI updates to use to calculate ETA.
                                  #Higher is more stable, lower is more responsive to change of speed
OPTS.forceRedraw                  #BOOL (def: false). Do CLI update even if progress is same.
                                  #Useful if there are other things printed on output.
OPTS.synchronousUpdate            #BOOL (def: true). Do CLI update if last repaint was more than twice OPTS.fps
                                  #Only for SINGLEBAR, not MULTIBAR

OPTS.noTTYOutput                  #BOOL (def: false).
                                  #If false (def), prints nothing if not TTY.
                                  #If true, prints even if not TTY (e.g. if redirected to a file):
                                  #  - adds newlines between each progress bar
                                  #  - OPTS.synchronousUpdate false always
                                  #  - OPTS.forceRedraw true always
OPTS.notTTYSchedule               #NUM (def: 2000). Same but when not TTY, and is interval in ms.

OPTS.stream                       #STREAM (def: process.stderr) for output.
                                  #If !STREAM.isTTY, no progress bar printed.
OPTS.terminal                     #Customize how output is written.
                                  #By default it writes to OPTS.stream using ANSI sequences.
                                  #OBJ:
                                  #  - write(STR): write to output. Def: OPTS.stream.write(STR) and truncate with getWidth() on line wrapping
                                  #  - newline(): print newline
                                  #  - isTTY()->BOOL: Def: OPTS.stream.isTTY
                                  #  - getWidth()->NUM: terminal width. Def: OPTS.stream.columns or 80 (200 if not TTY)
                                  #  - lineWrapping(BOOL): enable|disable line wrapping. Def: \e[?7h and \e[?7l
                                  #  - cursorSave(): save cursor position. Def: prints \e7
                                  #  - cursorRestore(): load cursor position. Def: prints \e8
                                  #  - cursor(BOOL): show|hide cursor. Def: prints \e[?25h and \e[?25l
                                  #  - cursorTo(NUM, NUM2): move cursor absolutely. Def: \eNUMa and \eNUMb
                                  #  - cursorRelative(NUM, NUM2): move cursor relatively. Def: \eNUMc and \eNUMd
                                  #  - cursorRelativeReset(): revert previous cursorRelative() then put to beginning of line
                                  #  - clearLine(): clear full line. Def: \e2k
                                  #  - clearRight(): clear line to the right. Def: \e0k
                                  #  - clearBottom(): clear lines to down. Def: \e0j
