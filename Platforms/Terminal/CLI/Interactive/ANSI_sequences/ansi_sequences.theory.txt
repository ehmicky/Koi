
                  
   ANSI_SEQUENCES  
                  




STANDARDS ==>                     #  - ASCII / ISO/IEC 646 / ECMA-6
                                  #  - ECMA-48 (main one)
                                  #  - ISO/IEC 2022 / ECMA-35 (mostly encoding, not used much) (also C1 control characters)
ANSI.SYS ==>                      #Old (not recent) Windows-specific ANSI sequences.

SUPPORT ==>                       #Symbols means not supported on:
                                 ~#  - Gnome VTE (this doc does not check for support on other terminals then)
                                 C#  - Windows console
                                  #TODO

CONTROL CHARACTERS ==>            #Non-printing characters for in-band signaling, i.e. controls terminal behavior using input characters
CARET NOTATION ==>                #Representation for control characters
                                  #Meant for terminal input with CTRL-CHAR
                                  #  - SHIFT usually optional
                                  #  - readline shortcuts also use CTRL-CHAR, but are not related to control characters
                                  #  - CTRL-V CTRL-CHAR: input the character, but without any behavior
                                  #^ followed by character
ESCAPE SEQUENCE ==>               #Representation for control characters
                                  #Can contain several characters.
                                  #Often:
                                  #  - \ followed by character: some C0 control characters, meant for source code
                                  #  - CSI followed by characters: advanced controls

C0 CHARACTERS ==>                 #\x00 to \x1f, also \x7f (DEL)

FORMAT EFFECTORS ==>              #
09  HT   ^I  \t                   #Horizontal Tab
                                  #Tab key.
08  BS   ^H  \b                   #Backspace
                                  #Same line, previous column.
                                  #Backspace key.
7F  DEL  ^?                       #Delete.
                                  #Erase current character
                                  #DEL key.
0D  CR   ^M  \r                   #Carriage return.
                                  #Same line, first column.
0B  VT   ^K  \v                   #Vertical Tab
                                  #Next line (tab), same column.
0C  FF   ^L  \f                   #Form feed
                                  #Either:
                                  #  - end of page:
                                  #     - clear screen (as input)
                                  #  - next line (single), same column (as output)
                                  #Often not considered a newline nor whitepsace.
0A  LF   ^J  \n                   #Line feed.
                                  #Next line (single), first column.
                                  #Enter key.

ESCAPING ==>                      #
1B  ESC  ^[  \e                   #Escape.
                                  #Start an escape sequence.
                                  #ESC key.
1A  SUB  ^Z                      ~#Substitute.
                                 ~#Means next character should be minus 64, e.g. A -> ^A, etc.
                                 ~#Meant as a way to input caret notation with printable characters
                                 ~#EOF on Windows
10  DLE  ^P                      ~#Data Link Escape
                                 ~#Means next character should be escaped

OTHERS ==>                        #
00  NUL  ^@                      ~#Null
                                 ~#Meant for noop, padding, delimiter or reserved spaces.
                                 ~#  - ends a null-terminated-string.
                                 ~#  - used by some Unix commands to replace newlines.
16  SYN  ^V                      ~#Synchronous Idle
                                 ~#Sent when there is no data
07  BEL  ^G  \a                   #Bell
                                  #Emit a sound. Often disabled.

TRANSMISSION CONTROLS ==>         #
05  ENQ  ^E                      ~#Enquiry
                                 ~#Ask sender to start sending
04  EOT  ^D                      ~#End of Transmission
                                 ~#Tell receiver that request ended
06  ACK  ^F                      ~#Acknowledgment
                                 ~#Tell sender that request succeeded
15  NAK  ^U                      ~#Negative Acknowledgement
                                 ~#Tell sender that request failed
18  CAN  ^X                      ~#Cancel.
                                 ~#Undo previous message

MESSAGE CONTROLS ==>              #
01  SOH  ^A                      ~#Start of Header
                                 ~#Starts metadata
02  STX  ^B                      ~#Start of Text
                                 ~#Starts data
03  ETX  ^C                      ~#End of Text
                                 ~#Ends data
17  ETB  ^W                      ~#End of Transmission Block.
                                 ~#Ends metadata+data

INFORMATION SEPARATORS ==>        #
19  EM   ^Y                      ~#End of Medium
                                 ~#When terminal has no more available space.
1C  FS   ^\                      ~#File Separator
                                 ~#Delimiters between files
1D  GS   ^]                      ~#Group Separator
                                 ~#Delimiters between group of records in a file (e.g. OBJ_ARR)
1E  RS   ^^                      ~#Record Separator
                                 ~#Delimiters between records (e.g. OBJ)
1F  US   ^_                      ~#Unit Separator
                                 ~#Delimiters between units (e.g. OBJ properties)

DEVICE CONTROLS ==>               #
11  DC1  ^Q                       #Device Control 1
                                  #Meant to be terminal-specific
                                  #Often implemented as XON, i.e. can receive data again (for stream buffering)
12  DC2  ^R                      ~#Device Control 2
13  DC3  ^S                       #Device Control 3
                                  #Often implemented as XOFF, i.e. stop receiving (for stream buffering)
14  DC4  ^T                      ~#Device Control 4

LOCKING SHIFTS ==>                #
0E  SO   ^N                      ~#Shift Out
                                 ~#Select alternate styling|font|encoding
0F  SI   ^O                      ~#Shift In
                                 ~#Unselect alternate styling|font|encoding

SIGNALS ==>                       #Some control characters are listened by programs for signaling.
                                  #As opposed to the above:
                                  #  - the behavior happens on input, not output
                                  #  - programs sometimes listen for CTRL-CHAR shortcut directly
                                  #List:
                                  #  - CTRL-C (ETX): sends SIGINT to process, terminating it
                                  #  - CTRL-D (EOD): tells program that input ended, often causing input-reading programs to end
                                 ~#  - CTRL-T (DC4): sends SIGINFO, i.e. ask for information about process
                                  #  - CTRL-Z (SUB): sends SIGTSTP to process, i.e. stop
                                  #  - CTRL-\ (FS): sends SIGQUIT to process, i.e. terminate with core dump

C1 CONTROL CHARACTERS ==>         #\x80 to \x9f

80  PAD  \e@                      #Padding Character
                                  #Not part of ISO/IEC 6429 (ECMA-48).
                                  #In early drafts of ISO 10646, was used as part of a proposed mechanism to encode non-ASCII characters.
                                  #This use was removed in later drafts.
                                  #Is nonetheless used by the internal-use two-byte fixed-length form of the ISO-2022-based Extended Unix Code (EUC)
                                  #for left-padding single byte characters in code sets 1 and 3, whereas NUL serves the same function for code sets 0 and 2.
                                  #This is not done in the usual "packed" EUC format.
81  HOP  \eA                      #High Octet Preset
                                  #Not part of ISO/IEC 6429 (ECMA-48).
                                  #In early drafts of ISO 10646, was intended as a means of introducing a sequence of ISO 2022 compliant multiple byte characters with the same first
                                  #byte without repeating said first byte, thus reducing length; this behaviour was never part of a standard or published implementation.
                                  #Its name was nonetheless retained as an RFC 1345 standard code-point name.
82  BPH  \eB                      #Break Permitted Here
                                  #Follows a graphic character where a line break is permitted.
                                  #Roughly equivalent to a soft hyphen except that the means for indicating a line break is not necessarily a hyphen.
                                  #Not part of the first edition of ISO/IEC 6429.
                                  #See also zero-width space.
83  NBH  \eC                      #No Break Here
                                  #Follows the graphic character that is not to be broken.
                                  #Not part of the first edition of ISO/IEC 6429.
                                  #See also word joiner.
84  IND  \eD                      #Index   Move the active position one line down, to eliminate ambiguity about the meaning of LF. Deprecated in 1988 and withdrawn in 1992 from ISO/IEC 6429 (1986 and 1991 respectively for ECMA-48).
85  NEL  \eE                      #Next Line   Equivalent to CR+LF. Used to mark end-of-line on some IBM mainframes.
86  SSA  \eF                      #Start of Selected Area  Used by block-oriented terminals.
87  ESA  \eG                      #End of Selected Area
88  HTS  \eH                      #Character Tabulation Set Horizontal Tabulation Set  Causes a character tabulation stop to be set at the active position.
89  HTJ  \eI                      #Character Tabulation With Justification Horizontal Tabulation With Justification  Similar to Character Tabulation, except that instead of spaces or lines being placed after the preceding characters until the next tab stop is reached, the spaces or lines are placed preceding the active field so that preceding graphic character is placed just before the next tab stop.
8A  VTS  \eJ                      #Line Tabulation Set Vertical Tabulation Set   Causes a line tabulation stop to be set at the active position.
8B  PLD  \eK                      #Partial Line Forward Partial Line Down  Used to produce subscripts and superscripts in ISO/IEC 6429, e.g., in a printer.  Subscripts use PLD text PLU while superscripts use PLU text PLD.
8C  PLU  \eL                      #Partial Line Backward Partial Line Up
8D  RI   \eM                      #Reverse Line Feed Reverse Index
8E  SS2  \eN                      #Single-Shift 2  Next character invokes a graphic character from the G2 or G3 graphic sets respectively. In systems that conform to ISO/IEC 4873 (ECMA-43), even if a C1 set other than the default is used, these two octets may only be used for this purpose.
8F  SS3  \eO                      #Single-Shift 3
90  DCS  \eP                      #Device Control String   Followed by a string of printable characters (0x20 through 0x7E) and format effectors (0x08 through 0x0D), terminated by ST (0x9C). This may be used by variable-length control sequences for text terminals and terminal emulators, such as terminfo queries.
91  PU1  \eQ                      #Private Use 1   Reserved for a function without standardized meaning for private use as required, subject to the prior agreement of the sender and the recipient of the data.
92  PU2  \eR                      #Private Use 2
93  STS  \eS                      #Set Transmit State
94  CCH  \eT                      #Cancel character  Destructive backspace, intended to eliminate ambiguity about meaning of BS.
95  MW   \eU                      #Message Waiting
96  SPA  \eV                      #Start of Protected Area   Used by block-oriented terminals.
97  EPA  \eW                      #End of Protected Area
98  SOS  \eX                      #Start of String   Followed by a control string terminated by ST (0x9C) which, in contrast to those initiated by DCS, OSC, PM or APC, may contain any character except SOS or ST. Not part of the first edition of ISO/IEC 6429. MARC 21 uses SOS and ST in Unicode-format records to mark up a string which should be ignored for collation purposes, while MARC-8 format records use NSB and NSE for the same purpose.
99  SGC  \eY                      #Single Graphic Character Introducer   Not part of ISO/IEC 6429. In early drafts of ISO 10646, was used to encode a single multiple-byte character without switching out of a HOP mode. In later drafts, this facility was removed, the name was nonetheless retained as an RFC 1345 standard code-point name.
9A  SCI  \eZ                      #Single Character Introducer   To be followed by a single printable character (0x20 through 0x7E) or format effector (0x08 through 0x0D). The intent was to provide a means by which a control function or a graphic character that would be available regardless of which graphic or control sets were in use could be defined. Definitions of what the following byte would invoke was never implemented in an international standard. Not part of the first edition of ISO/IEC 6429.
9B  CSI  \e[                      #Control Sequence Introducer   Used to introduce control sequences that take parameters.
9C  ST   \e\                      #String Terminator   Terminates a variable-length control string initiated by DCS, SOS, OSC, PM or APC.
9D  OSC  \e]                      #Operating System Command  Followed by a string of printable characters (0x20 through 0x7E) and format effectors (0x08 through 0x0D), terminated by ST (0x9C). These three control codes were intended for use to allow in-band signaling of protocol information, but are rarely used for that purpose.  Some terminal emulators, including xterm, support OSC sequences for setting the window title and reconfiguring the available colour palette. They may also support terminating an OSC sequence with BEL as a non-standard alternative to the standard ST.
9E  PM   \e^                      #Privacy Message
9F  APC  \e_                      #Application Program Command

CSI SEQUENCE STRUCTURE ==>        #Start byte:
                                  #  - single sequence
                                  #  - either:
                                  #     - \x1b[
                                  #        - i.e. \e[
                                  #     - \x9b (CSI, Control Sequence Introducer)
                                  #  - signals that the next characters are a CSI sequence
                                  #Parameter bytes:
                                  #  - 0-n characters
                                  #  - among \x30-\x3f:
                                  #     - 0-9 : ;
                                  #     - < > = ? are for "private sequences", i.e. mean the characters after can be anything (meant for terminal manufacturers)
                                  #       - ? is often used
                                  #  - often use ;-separated digits
                                  #     - with omitted digits being 0
                                  #  - parameters|arguments
                                  #Intermediate bytes:
                                  #  - 0-n characters
                                  #  - among \x20-\x2f
                                  #     - i.e. space ! " # $ % & ' ( ) * + , - . /
                                  #  - often not used
                                  #Final byte:
                                  #  - single character
                                  #  - among \x40-\x7e:
                                  #     - A–Za-o @ [ ] \ ^ _ `
                                  #     - p-z { } | ~ are for "private sequences", i.e. mean the characters before can be anything (meant for terminal manufacturers)
                                  #  - A-Za-z are often used
                                  #  - main action

~                                 #Represents any number
                                  #Defaults to 0
                                  #  - except CUU|CUD|CUF|CUB|CNL|CPL|CHA|CP|SU|SD, which defaults to 1
SCREEN EDGES ==>                  #Moves stops at edges of screen
                                  #Index is 1-based
CURSOR POSITION ==>               #Unless specified, the cursor position is not changed.

\e[~A
\e[~B
\e[~C                             #Move cursor up|down|right|left by ~ characters
\e[~D                             #Named "Cursor Up|Down|Forward|Back" (CUU|CUD|CUF|CUB)

\e[~E                             #Move cursor up|down by ~ characters then goes to start of line
\e[~F                             #Named "Cursor Next|Previous Line" (CNL|CPL)

\e[~G                             #Move cursor to column ~
                                  #Named "Cursor Horizontal Absolute" (CHA)
\e[~;~H                           #Move cursor to row ~, column ~
                                  #Named "Cursor Position" (CP)

\e[~s                             #Save|restore cursor position
\e[~u                             #Named "Save|Restore Current Cursor Position" (SCOSC|SCORC or SCP|RCP)
                                  #Private sequence

\e[~J                             #Clear lines:
                                  #  - 0: after current line (excluded)
                                  #  - 1: before current line (included)
                                  #  - 2: all lines
                                  #  - 3: all lines, and removes scrollback buffer (previous lines that can be scrolled to)
                                  #     - non-standard
                                  #     - on cmd.exe, also moves cursor position to first line|column
                                  #Named "Erase in Display" (ED)
\e[~K                             #Clear characters in current line:
                                  #  - 0: after cursor (included)
                                  #  - 1: before cursor (included)
                                  #  - 2: whole line
                                  #Named "Erase in Line" (EL)

\e[~S                             #Move all lines ~ up|down
\e[~T                             #Lines going out of screen are gone. Does not actually scroll the terminal GUI.
                                  #Named "Scroll Up|Down" (SU|SD)

\e[?25h                           #Show|hide cursor
\e[?25l                           #Named DECTCEM
                                  #Private sequence

\e[?1049h                         #Enable alternative screen buffer.
                                  #I.e. saves the current screen, then clears it.
                                  #Private sequence
\e[?1049l                         #Restore saved screen.

\e[?2004h                        C#Enable|disable bracketed paste mode.
\e[?2004l                        C#Surround any pasted characters by \e[200~ and \e[201~
                                 C#Some programs (like Vim) will detect these characters to know the text was entered as paste, not input

\e[~;...m                         #Colors|style
                                  #Named "Select Graphic Rendition NUM" (SGR NUM)
                                  #Remains in effect until reset by another SGR

\e[0m                             #Reset SGR
\e[1m                             #Bold
\e[2m                            C#Dim
\e[3m                            C#Italic
\e[4m                             #Underline
\e[5m                            C#Slow blink
\e[6m                            ~#Fast blink. Often shown as slow blink instead.
\e[7m                             #Invert foreground|background color. Named "Reverse|invert video" (as opposed to "true video")
\e[8m                            C#Hidden, i.e. foreground has same color as background
\e[9m                            C#Strikethrough

\e[20m                           ~#Blackletter
\e[21m                           C#Double underline
\e[22m                            #Reset dim|bold
\e[23m                           C#Reset italic|blackletter
\e[24m                            #Reset underline
\e[25m                           C#Reset blink
\e[26m                           ~#Proportional spacing
\e[27m                            #Reset inverted
\e[28m                           C#Reset hide
\e[29m                           C#Reset strikethrough
\e[50m                           ~#Disable proportional spacing

\e[51m                           ~#Framed
\e[52m                           ~#Encircled
\e[53m                           ~#Overlined
\e[54m                           ~#Reset framed|encircled
\e[55m                           ~#Reset overlined

\e[60m                           ~#Ideogram underline
\e[61m                           ~#Ideogram double underline
\e[62m                           ~#Ideogram overline
\e[63m                           ~#Ideogram double overline
\e[64m                           ~#Ideogram stress marking
\e[65m                           ~#Reset ideogram underline|overline

\e[73m                           ~#Superscript
\e[74m                           ~#Subscript

\e[30-37m
\e[40-47m                         #Foreground|background 3-bits color: black|red|green|yellow|blue|magenta|cyan|white
\e[90-97m
\e[100-107m                       #Same for bright foreground|background 4-bits colors
\e[38;5;~m                        #Foreground|background 8-bits colors, using 0-255:
\e[48;5;~m                        #  - 0-15: same as 4-bits colors
                                  #  - 16-231: 216 colors
                                  #  - 232-255: 24 grayscales
\e[38;2;~;~;~m
\e[48;2;~;~;~m                    #Foreground|background 24-bits colors, using reg|green|blue 0-255 ("true color")
\e[39m
\e[49m                            #Reset foreground|background color

\e[58;5;~m
\e[58;2;~;~;~m
\e[59m                           C#Like \e[3*m but for underline color

\e[10-19m                       C~#Choose between 10 user-chosen fonts.
