
                  
   ANSI_SEQUENCES  
                  




STANDARDS ==>                     #  - ASCII / ISO/IEC 646 / ECMA-6
                                  #  - ECMA-48 (main one)
                                  #  - ISO/IEC 2022 / ECMA-35 (C1 control characters)
                                  #  - ANSI X3.64 / ISO 6429 (VT parameters)

ANSI.SYS ==>                      #Old (not recent) Windows-specific ANSI sequences.

SUPPORT ==>                       #Symbols means not supported on:
                                 ~#  - Gnome VTE (this doc does not check for support on other terminals then)
                                 C#  - Windows console
                                  #TODO

CARET NOTATION ==>                #Representation for C0 control characters
                                  #Meant for terminal input with CTRL-CHAR
                                  #  - SHIFT usually optional
                                  #  - readline shortcuts also use CTRL-CHAR, but are not related to control characters
                                  #  - CTRL-V CTRL-CHAR: input the character, but without any behavior
                                  #^ + @A-Z[\]^_
C0 BACKLASH SEQUENCE ==>          #Representation for C0 control characters
                                  #Introduced by C, meant for source code.
                                  #\e + a-z
C1 BACKLASH SEQUENCE ==>          #Representation for C1 control characters
                                  #\e + @A-Z[\]^_

CONTROL SEQUENCE ==>              #Perform a terminal control function. Not a "character", but a magic sequence interpreted by terminals.
                                  #Start bytes:
                                  #  - CSI character \x9b
                                  #  - can use escape syntax \e[
                                  #Parameter bytes:
                                  #  - 0-n characters
                                  #  - among \x30-\x3f:
                                  #     - 0-9 : ;
                                  #     - < > = ? are for "private sequences", i.e. mean the characters after can be anything (meant for terminal manufacturers)
                                  #       - ? is often used: "VT parameters"
                                  #  - often use ;-separated digits
                                  #     - with omitted digits being 0
                                  #  - parameters|arguments
                                  #Intermediate bytes:
                                  #  - 0-n characters
                                  #  - among \x20-\x2f
                                  #     - i.e. space ! " # $ % & ' ( ) * + , - . /
                                  #Final byte:
                                  #  - single character
                                  #  - among \x40-\x7e:
                                  #     - A–Za-o @ [ ] \ ^ _ `
                                  #     - p-z { } | ~ are for "private sequences", i.e. mean the characters before can be anything (meant for terminal manufacturers)
                                  #  - A-Za-z are often used
                                  #  - main action
C1 ESCAPE SEQUENCE ==>            #Similar goal as control sequence, but different syntax.
                                  #Start byte:
                                  #  - ESC character \x1b
                                  #  - can use escape syntax \e
                                  #Intermediate bytes: like control sequence
                                  #Final byte: like control sequence except also accepts 0-9 : ; < > = ?
DEVICE CONTROL STRING ==>         #Similar goal as control sequence, but different syntax and allows final strings.
                                  #Start bytes:
                                  #  - DCS character \x90
                                  #  - can use escape syntax \eP
                                  #Parameter bytes: like control sequence
                                  #Intermediate bytes: like control sequence
                                  #Final bytes: like control sequence
                                  #Final strings:
                                  #  - ;-separated list of arbitrary strings
                                  #  - terminated by ST character \x9c
OPERATING SYSTEM COMMAND ==>      #Similar goal as control sequence, but different syntax.
                                  #Start bytes:
                                  #  - OSC character \x90
                                  #  - can use escape syntax \e]
                                  #Parameter bytes:
                                  #  - 0-n characters
                                  #  - among \x20-\x7e or \x08-\x0d
                                  #     - i.e. printable ASCII or \b \t \n \v \f \r
                                  #  - often ;-separated digits
                                  #Final bytes: ST character \x9c or BEL \x07
CONTROL STRING ==>                #Similar goal as control sequence, but allowing any character.
                                  #Usually not supported
                                  #Start bytes:
                                  #  - SOS character \x90
                                  #  - can use escape syntax \eX
                                  #Intermediate bytes: any except final byte
                                  #Final bytes: ST character \x9c
APPLICATION PROGRAM COMMAND ==>   #Similar goal as control sequence, but different syntax.
                                  #Usually not supported
                                  #Start bytes:
                                  #  - APC character \x9f
                                  #  - can use escape syntax \e_
                                  #Intermediate bytes: any except final bytes
                                  #Final bytes: ST character \x9c
PRIVACY MESSAGE ==>               #Similar goal as control sequence, but different syntax.
                                  #Usually not supported
                                  #Start bytes:
                                  #  - APC character \x9e
                                  #  - can use escape syntax \e^
                                  #Intermediate bytes: any except final bytes
                                  #Final bytes: ST character \x9c

CONTROL CHARACTERS ==>            #Non-printing characters for in-band signaling, i.e. controls terminal behavior using input characters
C0 CHARACTERS ==>                 #\x00 to \x1f, also \x7f (DEL)
C1 CONTROL CHARACTERS ==>         #\x80 to \x9f

FORMAT EFFECTORS ==>              #
09  HT   ^I   \t                  #Horizontal Tab
                                  #Tab key.
08  BS   ^H   \b                  #Backspace
                                  #Same line, previous column.
                                  #Backspace key.
94  CCH       \eT                ~#Cancel character
                                 ~#Like \b
7F  DEL  ^?                       #Delete.
                                  #Erase current character
                                  #DEL key.
0D  CR   ^M   \r                  #Carriage return.
                                  #Same line, first column.
0B  VT   ^K   \v                  #Vertical Tab
                                  #Next line (tab), same column.
0C  FF   ^L   \f                  #Form feed
                                  #Either:
                                  #  - end of page:
                                  #     - clear screen (as input)
                                  #  - next line (single), same column (as output)
                                  #Often not considered a newline nor whitepsace.
84  IND       \eD                 #Index
                                  #Like \f (next line, same column)
0A  LF   ^J   \n                  #Line feed.
                                  #Next line (single), first column.
                                  #Enter key.
85  NEL       \eE                 #Next Line
                                  #Like \n (next line, first column)
8D  RI        \eM                 #Reverse Index
                                  #Previous line, same column
88  HTS       \eH                ~#Horizontal Tabulation Set
                                 ~#Set a horizontal tabulation point.
89  HTJ       \eI                ~#Horizontal Tabulation With Justification
8A  VTS       \eJ                ~#Vertical Tabulation Set
                                 ~#Set a vertical tabulation point.

LINE BREAKS ==>                   #
82  BPH       \eB                ~#Break Permitted Here
                                 ~#Indicates line breaking can happen here.
83  NBH       \eC                ~#No Break Here
                                 ~#Indicates line breaking cannot happen here.

STYLING ==>                       #
8B  PLD       \eK                ~#Partial Line Down
                                 ~#Subscript
8C  PLU       \eL                ~#Partial Line Up
                                 ~#Superscript
80  PAD       \e@                ~#Padding Character

NOOP ==>                          #
00  NUL  ^@                      ~#Null
                                 ~#Meant for noop, padding, delimiter or reserved spaces.
                                 ~#  - ends a null-terminated-string.
                                 ~#  - used by some Unix commands to replace newlines.
16  SYN  ^V                      ~#Synchronous Idle
                                 ~#Sent when there is no data

NOTIFICATION ==>                  #
07  BEL  ^G   \a                  #Bell
                                  #Emit a sound. Often disabled.

ESCAPING ==>                      #
1B  ESC  ^[   \e                  #Escape.
                                  #Start an escape sequence.
                                  #ESC key.
1A  SUB  ^Z                      ~#Substitute.
                                 ~#Means next character should be minus 64, e.g. A -> ^A, etc.
                                 ~#Meant as a way to input caret notation with printable characters
                                 ~#EOF on Windows
10  DLE  ^P                      ~#Data Link Escape
                                 ~#Means next character should be escaped
81  HOP       \eA                ~#High Octet Preset
                                 ~#Changes encoding of next character
9B  CSI       \e[                 #Control Sequence Introducer
                                  #Start a control sequence
90  DCS       \eP                 #Device Control String
                                  #Start a device control string
9D  OSC       \e]                 #Operating System Command
                                  #Start an operating system command
98  SOS       \eX                 #Start of String
                                  #Start a control string
9E  PM        \e^                 #Privacy Message
                                  #Start a privacy message
9F  APC       \e_                 #Application Program Command
                                  #Start an Application program command
9C  ST        \e\                 #String Terminator
                                  #Terminates a DCS, OSC, SOS, PM or APC
99  SGC       \eY                ~#Single Graphic Character Introducer
                                 ~#Start a multi-byte characters sequence
9A  SCI       \eZ                ~#Single Character Introducer
                                 ~#Start a single character sequence

ALTERNATE ENCODING ==>            #
0E  SO   ^N                       #Shift Out
                                  #Enable alternate encoding G1
0F  SI   ^O                       #Shift In
                                  #Forces default encoding G0
8E  SS2       \eN                ~#Single-Shift 2
                                 ~#Enable alternate encoding G2
8F  SS3       \eO                ~#Single-Shift 3
                                 ~#Enable alternate encoding G3

TRANSMISSION CONTROLS ==>         #
05  ENQ  ^E                      ~#Enquiry
                                 ~#Ask sender to start sending
04  EOT  ^D                      ~#End of Transmission
                                 ~#Tell receiver that request ended
06  ACK  ^F                      ~#Acknowledgment
                                 ~#Tell sender that request succeeded
15  NAK  ^U                      ~#Negative Acknowledgement
                                 ~#Tell sender that request failed
18  CAN  ^X                      ~#Cancel.
                                 ~#Undo previous message
93  STS       \eS                ~#Set Transmit State
95  MW        \eU                ~#Message Waiting

MESSAGE CONTROLS ==>              #
01  SOH  ^A                      ~#Start of Header
                                 ~#Starts metadata
02  STX  ^B                      ~#Start of Text
                                 ~#Starts data
03  ETX  ^C                      ~#End of Text
                                 ~#Ends data
17  ETB  ^W                      ~#End of Transmission Block.
                                 ~#Ends metadata+data

INFORMATION SEPARATORS ==>        #
19  EM   ^Y                      ~#End of Medium
                                 ~#When terminal has no more available space.
1C  FS   ^\                      ~#File Separator
                                 ~#Delimiters between files
1D  GS   ^]                      ~#Group Separator
                                 ~#Delimiters between group of records in a file (e.g. OBJ_ARR)
1E  RS   ^^                      ~#Record Separator
                                 ~#Delimiters between records (e.g. OBJ)
1F  US   ^_                      ~#Unit Separator
                                 ~#Delimiters between units (e.g. OBJ properties)

BLOCK-ORIENTED TERMINALS ==>      #
86  SSA       \eF                ~#Start of Selected Area
                                 ~#Meant for block-oriented terminals.
87  ESA       \eG                ~#End of Selected Area
96  SPA       \eV                ~#Start of Protected Area
                                 ~#Meant for block-oriented terminals.
97  EPA       \eW                ~#End of Protected Area

APPLICATION-SPECIFIC ==>          #
11  DC1  ^Q                       #Device Control 1
                                  #Meant to be terminal-specific
                                  #Often implemented as XON, i.e. can receive data again (for stream buffering)
12  DC2  ^R                      ~#Device Control 2
13  DC3  ^S                       #Device Control 3
                                  #Often implemented as XOFF, i.e. stop receiving (for stream buffering)
14  DC4  ^T                      ~#Device Control 4
91  PU1       \eQ                ~#Private Use 1
                                 ~#Application-specific
92  PU2       \eR                ~#Private Use 2
                                 ~#Application-specific

SIGNALS ==>                       #Some control characters are listened by programs for signaling.
                                  #As opposed to the above:
                                  #  - the behavior happens on input, not output
                                  #  - programs sometimes listen for CTRL-CHAR shortcut directly
                                  #List:
                                  #  - CTRL-C (ETX): sends SIGINT to process, terminating it
                                  #  - CTRL-D (EOD): tells program that input ended, often causing input-reading programs to end
                                 ~#  - CTRL-T (DC4): sends SIGINFO, i.e. ask for information about process
                                  #  - CTRL-Z (SUB): sends SIGTSTP to process, i.e. stop
                                  #  - CTRL-\ (FS): sends SIGQUIT to process, i.e. terminate with core dump

~                                 #Represents any number
                                  #Defaults to 0
                                  #  - except CUU|CUD|CUF|CUB|CNL|CPL|CHA|CP|SU|SD, which defaults to 1
SCREEN EDGES ==>                  #Moves stops at edges of screen
                                  #Index is 1-based
CURSOR POSITION ==>               #Unless specified, the cursor position is not changed.

\e[~A
\e[~B
\e[~C                             #Move cursor up|down|right|left by ~ characters
\e[~D                             #Named "Cursor Up|Down|Forward|Back" (CUU|CUD|CUF|CUB)

\e[~E                             #Move cursor up|down by ~ characters then goes to start of line
\e[~F                             #Named "Cursor Next|Previous Line" (CNL|CPL)

\e[~G                             #Move cursor to column ~
                                  #Named "Cursor Horizontal Absolute" (CHA)
\e[~;~H                           #Move cursor to row ~, column ~
                                  #Named "Cursor Position" (CP)

\e[~s                             #Save|restore cursor position
\e[~u                             #Named "Save|Restore Current Cursor Position" (SCOSC|SCORC or SCP|RCP)
                                  #Private sequence

\e[~J                             #Clear lines:
                                  #  - 0: after current line (excluded)
                                  #  - 1: before current line (included)
                                  #  - 2: all lines
                                  #  - 3: all lines, and removes scrollback buffer (previous lines that can be scrolled to)
                                  #     - non-standard
                                  #     - on cmd.exe, also moves cursor position to first line|column
                                  #Named "Erase in Display" (ED)
\e[~K                             #Clear characters in current line:
                                  #  - 0: after cursor (included)
                                  #  - 1: before cursor (included)
                                  #  - 2: whole line
                                  #Named "Erase in Line" (EL)

\e[~S                             #Move all lines ~ up|down
\e[~T                             #Lines going out of screen are gone. Does not actually scroll the terminal GUI.
                                  #Named "Scroll Up|Down" (SU|SD)

\e[?25h                           #Show|hide cursor
\e[?25l                           #Named DECTCEM
                                  #Private sequence

\e[?1049h                         #Enable alternative screen buffer.
                                  #I.e. saves the current screen, then clears it.
                                  #Private sequence
\e[?1049l                         #Restore saved screen.

\e[?2004h                        C#Enable|disable bracketed paste mode.
\e[?2004l                        C#Surround any pasted characters by \e[200~ and \e[201~
                                 C#Some programs (like Vim) will detect these characters to know the text was entered as paste, not input

\e[~;...m                         #Colors|style
                                  #Named "Select Graphic Rendition NUM" (SGR NUM)
                                  #Remains in effect until reset by another SGR

\e[0m                             #Reset SGR
\e[1m                             #Bold
\e[2m                            C#Dim
\e[3m                            C#Italic
\e[4m                             #Underline
\e[5m                            C#Slow blink
\e[6m                            ~#Fast blink. Often shown as slow blink instead.
\e[7m                             #Invert foreground|background color. Named "Reverse|invert video" (as opposed to "true video")
\e[8m                            C#Hidden, i.e. foreground has same color as background
\e[9m                            C#Strikethrough

\e[20m                           ~#Blackletter
\e[21m                           C#Double underline
\e[22m                            #Reset dim|bold
\e[23m                           C#Reset italic|blackletter
\e[24m                            #Reset underline
\e[25m                           C#Reset blink
\e[26m                           ~#Proportional spacing
\e[27m                            #Reset inverted
\e[28m                           C#Reset hide
\e[29m                           C#Reset strikethrough
\e[50m                           ~#Disable proportional spacing

\e[51m                           ~#Framed
\e[52m                           ~#Encircled
\e[53m                           ~#Overlined
\e[54m                           ~#Reset framed|encircled
\e[55m                           ~#Reset overlined

\e[60m                           ~#Ideogram underline
\e[61m                           ~#Ideogram double underline
\e[62m                           ~#Ideogram overline
\e[63m                           ~#Ideogram double overline
\e[64m                           ~#Ideogram stress marking
\e[65m                           ~#Reset ideogram underline|overline

\e[73m                           ~#Superscript
\e[74m                           ~#Subscript

\e[30-37m
\e[40-47m                         #Foreground|background 3-bits color: black|red|green|yellow|blue|magenta|cyan|white
\e[90-97m
\e[100-107m                       #Same for bright foreground|background 4-bits colors
\e[38;5;~m                        #Foreground|background 8-bits colors, using 0-255:
\e[48;5;~m                        #  - 0-15: same as 4-bits colors
                                  #  - 16-231: 216 colors
                                  #  - 232-255: 24 grayscales
\e[38;2;~;~;~m
\e[48;2;~;~;~m                    #Foreground|background 24-bits colors, using reg|green|blue 0-255 ("true color")
\e[39m
\e[49m                            #Reset foreground|background color

\e[58;5;~m
\e[58;2;~;~;~m
\e[59m                           C#Like \e[3*m but for underline color

\e[10-19m                       C~#Choose between 10 user-chosen fonts.

\e[3h                            ~#Enable|disable "Control Representation Mode" (CRM)
\e[3l                            ~#Print control characters and make them have no behavior.

\e(0                              #Switch alternate encoding G1 to DEC special graphics, which replaces
                                  #     _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~
                                  #  by   ◆ ▒ ␉ ␌ ␍ ␊ ° ± ␤ ␋ ┘ ┐ ┌ └ ┼ ⎺ ⎻ ─ ⎼ ⎽ ├ ┤ ┴ ┬ │ ≤ ≥ π ≠ £ ·
                                  #Named "Select character set" (SCS)
\e(B                              #Set alternative encoding G1 to normal encoding
