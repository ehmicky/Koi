
                     
   SYSTEMINFORMATION  
                     



VERSION ==>                       #3.54.0


system()->PROMISE_OBJ             #Main device. Uses:
                                  #  - Linux|*BSD: dmidecode --type system (must be root)
                                  #  - Mac: ioreg -c IOPlatformExpertDevice -d 2
                                  #  - Windows:
                                  #     - wmic csproduct get /value
                                  #     - wmic /namespace:\\\\root\\wmi path MS_SystemInformation get /value
system().manufacturer             #STR (e.g. 'PC Specialist LTD')
system().model                    #STR (e.g. 'P7xxTM1')
                                  #(Linux only)
                                  #  - 'Docker Container' if `/.dockerenv|dockerinit` exists
                                  #  - 'Virtual machine' if dmesg | grep -i virtual | grep -iE "vmware|qemu|kvm|xen"
                                  #  - 'BCM*' (Raspberry PI) using `cat /proc/cpuinfo`
system().version                  #STR (e.g. "1.0")
system().serial                   #STR (e.g. "0")
system().uuid                     #STR (e.g. '525BFA80-E4EC-0000-0000-000000000000')
system().sku                      #STR

baseboard()->PROMISE_OBJ          #Motherboard. Uses:
                                  #  - Linux|*BSD:
                                  #     - on non-ARM: dmidecode --type 2 (must be root)
                                  #     - on ARM: cat /proc/cpuinfo | grep Serial
                                  #  - Mac: ioreg -c IOPlatformExpertDevice -d 2
                                  #  - Windows: wmic baseboard get /value
baseboard().manufacturer          #STR (e.g. 'CLEVO')
baseboard().model                 #STR (e.g. 'P7xxTM1')
baseboard().version               #STR
baseboard().serial                #STR
baseboard().assetTag              #STR (e.g. 'Tag 12345')

bios()->PROMISE_OBJ               #BIOS. Uses:
                                  #  - Linux|*BSD:
                                  #     - on non-ARM: dmidecode --type 0 (must be root)
                                  #     - on ARM: cat /proc/cpuinfo | grep Serial
                                  #  - Windows: wmic bios get /value
bios().vendor                     #STR (e.g. 'American Megatrends Inc.')
bios().version                    #STR (e.g. '5.12')
bios().releaseDate                #STR (e.g. '11/23/2017')
bios().revision                   #STR (e.g. '5.12')

time()->PROMISE_OBJ               #Time-related info.
time().current                    #DATE (now)
time().uptime                     #OS.uptime()
time().timezone                   #STR (e.g. 'GMT+0100')
time().timezoneName               #STR (e.g. 'Central European Standard Time')

osInfo()->PROMISE_OBJ             #OS/distribution. Uses:
                                  #  - Linux: cat /etc/*-release
                                  #  - Mac|*BSD: sysctl kern.ostype kern.osrelease kern.osrevision kern.hostuuid
                                  #  - Mac: sw_vers
                                  #  - Solaris: uname -o
                                  #  - Windows: wmic os get /value
osInfo().platform                 #OS.platform()
osInfo().kernel                   #OS.release()
osInfo().arch                     #OS.arch()
osInfo().hostname                 #OS.hostname()
osInfo().distro                   #STR (e.g. 'Ubuntu')
osInfo().logofile                 #STR: normalized distro (e.g. 'ubuntu')
osInfo().release                  #STR (e.g. '18.10')
osInfo().codename                 #STR (e.g. 'cosmic')
osInfo().codepage                 #STR (e.g. 'UTF-8'). Uses:
                                  #  - Linux|Mac|*BSD: $LANG
                                  #  - Windows: chcp
osInfo().serial                   #STR
osInfo().build                    #STR (e.g. '18A391')

versions()->PROMISE_OBJ           #Library versions.
versions().kernel                 #STR (e.g. "4.18.0-13-generic") using OS.release()
versions().node                   #STR (e.g. "11.6.0") using process.versions.node
versions().systemOpenSslLib       #STR (e.g. "OpenSSL") using `openssl version`
versions().systemOpenSsl          #STR (e.g. "1.1.1") using process.versions.openssl and `openssl vesion`
versions().v8                     #STR (e.g. "7.0.276.38-node.13") using process.versions.v8
versions().npm                    #STR (e.g. "6.5.0") using npm -v
versions().yarn                   #STR (e.g. "1.12.3") using yarn --version
versions().pm2                    #STR using pm2 -v
versions().gulp                   #STR using gulp --version
versions().grunt                  #STR using grunt --version
versions().git                    #STR (e.g. "2.19.1") using git --version (also checks XCode presence on Mac)
versions().tsc                    #STR using tsc --version
versions().mysql                  #STR using mysql -V
versions().redis                  #STR using redis-server --version
versions().mongodb                #STR (e.g. "4.0.5") using mongod --version
versions().nginx                  #STR using nginx -v
versions().php                    #STR (e.g. "7.1.19") using php -v
versions().docker                 #STR (e.g. "18.06.1-ce") using docker --version
versions().postfix                #STR (e.g. "3.2.2") using postconf -d | grep mail_version
versions().postgresql             #STR using postgres -V
versions().perl                   #STR (e.g. "5.26.2") using perl -v
versions().python                 #STR (e.g. "2.7.15+") using python -V
versions().gcc                    #STR (e.g. "8") using gcc -dumpversion

shell()->PROMISE_STR              #STR (e.g. "/bin/bash")

uuid()->PROMISE_OBJ               #Machine UUID. Uses:
                                  #  - Linux: cat /var/lib/dbus/machine-id /etc/machine-id || hostname
                                  #  - Mac: ioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID
                                  #  - Windows: %windir%\\System32\\reg query "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography" /v MachineGuid
                                  #  - *BSD: kenv -q smbios.system.uuid
uuid().os                         #STR (e.g. "dbdfe326696d4644978c1752531c7599" or "d9517fbc-b6eb-4446-95d6-6224c1c9d7ac")

cpu()->PROMISE_OBJ                #CPU models. Uses:
                                  #  - Linux:
                                  #     - lscpu
                                  #     - cat /proc/cpuinfo | grep -E "physical id|core id"
                                  #     - dmidecode –t 4 2>/dev/null | grep "Upgrade: Socket"
                                  #  - Mac: sysctl machdep.cpu hw.cpufrequency_max hw.cpufrequency_min hw.packages hw.physicalcpu_max hw.ncpu
                                  #  - Windows:
                                  #     - wmic cpu get /value
                                  #     - wmic path Win32_CacheMemory get CacheType,InstalledSize,Purpose
                                  #  - *BSD: dmidecode -t 4|7
                                  #  - all: OS.cpus()
cpu().manufacturer                #STR (e.g. "Intel®")
cpu().brand                       #STR (e.g. "Core™ i7-8700K")
cpu().vendor                      #STR (e.g. "GenuineIntel")
cpu().family                      #STR (e.g. "6")
cpu().model                       #STR (e.g. "158")
cpu().stepping                    #STR (e.g. "10")
cpu().revision                    #STR (e.g. "")
cpu().voltage                     #STR (e.g. "")
cpu().speed                       #STR (e.g. "3.70")
cpu().speedmin                    #STR (e.g. "0.80")
cpu().speedmax                    #STR (e.g. "4.70")
cpu().cores                       #NUM (e.g. 12)
cpu().physicalCores               #NUM (e.g. 6)
cpu().processors                  #NUM (e.g. 1)
cpu().socket                      #STR (e.g. "LGA1151")

cpuFlags()->PROMISE_STR           #CPU flags. Uses:
                                  #  - Linux:
                                  #     - lscpu
                                  #     - cat /proc/cpuinfo
                                  #  - Mac: sysctl machdep.cpu.features
                                  #  - Windows: reg query "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0" /v FeatureSet
                                  #  - *BSD: dmidecode -t 4
cpu().flags                       #STR (e.g. "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 ...")

cpuCache()->PROMISE_OBJ           #CPU caches. Uses:
                                  #  - Linux: lscpu
                                  #  - Mac: sysctl hw.l1icachesize hw.l1dcachesize hw.l2cachesize hw.l3cachesize
                                  #  - Windows:
                                  #     - wmic cpu get l2cachesize, l3cachesize /value
                                  #     - wmic path Win32_CacheMemory get CacheType,InstalledSize,Purpose
                                  #  - *BSD: dmidecode -t 7
cpu().cache                       #OBJ (e.g. { "l1d": 32768, "l1i": 32768, "l2": 262144, "l3": 12582912 }

cpuCurrentspeed()->PROMISE_OBJ    #CPU speed. Uses: OS.cpus()
cpuCurrentspeed().min             #NUM (e.g. 4.33)
cpuCurrentspeed().max             #NUM (e.g. 4.41)
cpuCurrentspeed().avg             #NUM (e.g. 4.36)
cpuCurrentspeed().cores           #NUM_ARR (e.g. [4.39) 4.33, 4.36, 4.34, 4.34, 4.4, 4.38, 4.34, 4.38, 4.41, 4.34, 4.36]

cpuTemperature()->PROMISE_OBJ     #CPU temperature. Uses:
                                  #  - Linux:
                                  #     - sensors
                                  #     - cat /sys/class/thermal/thermal_zone0/temp
                                  #     - /opt/vc/bin/vcgencmd measure_temp
                                  #  - Mac: IOKit with native C code (must have `osx-temperature-sensor` installed)
                                  #  - Windows: /namespace:\\\\root\\wmi PATH MSAcpi_ThermalZoneTemperature get CurrentTemperature
                                  #  - *BSD: sysctl dev.cpu | grep temp
cpuTemperature().main             #NUM (e.g. 53)
cpuTemperature().max              #NUM (e.g. 53)
cpuTemperature().cores            #NUM_ARR (e.g. [])

currentLoad()->PROMISE_OBJ        #Uses:
currentLoad().avgload             #NUM (e.g. 0.11)
currentLoad().currentload         #NUM (e.g. 5.820068190909327)
currentLoad().currentload_user    #NUM (e.g. 2.9976314622515607)
currentLoad().currentload_system  #NUM (e.g. 2.8169164454700404)
currentLoad().currentload_nice    #NUM (e.g. 0.005520283187725356)
currentLoad().currentload_idle    #NUM (e.g. 94.17993180909068)
currentLoad().currentload_irq     #NUM (e.g. 0)
currentLoad().raw_currentload     #NUM (e.g. 207698300)
currentLoad().raw_currentload_user
currentLoad()                     #NUM (e.g. 106975200)
 .raw_currentload_system          #NUM (e.g. 100526100)
currentLoad().raw_currentload_nice#NUM (e.g. 197000)
currentLoad().raw_currentload_idle#NUM (e.g. 3360959200)
currentLoad().raw_currentload_irq #NUM (e.g. 0)
currentLoad().cpus                #OBJ_ARR
currentLoad().cpus.VAR            #Same VAR as currentLoad().[raw_]current* but without current*

fullLoad()->PROMISE_NUM           #Average load since boot.
                                  #NUM (e.g. 3.25).
                                  #Uses OS.cpus()

mem()->PROMISE_OBJ                #Uses:
mem().total                       #NUM (e.g. 33668726784)
mem().free                        #NUM (e.g. 6174519296)
mem().used                        #NUM (e.g. 27494207488)
mem().active                      #NUM (e.g. 6219747328)
mem().available                   #NUM (e.g. 11204636672)
mem().buffcache                   #NUM (e.g. 21274460160)
mem().swaptotal                   #NUM (e.g. 31999389696)
mem().swapused                    #NUM (e.g. 0)
mem().swapfree                    #NUM (e.g. 31999389696)

memLayout()->PROMISE_OBJ_ARR      #Uses:
memLayout()[*].size               #NUM (e.g. 17179869184)
memLayout()[*].bank               #STR (e.g. "BANK 0")
memLayout()[*].type               #STR (e.g. "DDR4")
memLayout()[*].clockSpeed         #NUM (e.g. 2400)
memLayout()[*].formFactor         #STR (e.g. "SODIMM")
memLayout()[*].manufacturer       #STR (e.g. "029E")
memLayout()[*].partNum            #STR (e.g. "CM4X16GE2400C16S4")
memLayout()[*].serialNum          #STR (e.g. "00000000")
memLayout()[*].voltageConfigured  #NUM (e.g. 1.2)
memLayout()[*].voltageMin         #NUM (e.g. 1.2)
memLayout()[*].voltageMax         #NUM (e.g. 1.2)

battery()->PROMISE_OBJ            #Uses:
battery().hasbattery              #BOOL (e.g. true)
battery().cyclecount              #NUM (e.g. 0)
battery().ischarging              #BOOL (e.g. true)
battery().maxcapacity             #NUM (e.g. 5600000)
battery().currentcapacity         #NUM (e.g. 944000)
battery().percent                 #NUM (e.g. 19)
battery().timeremaining           #NUM (e.g. 20)
battery().acconnected             #BOOL (e.g. true)
battery().type                    #STR (e.g. "Li-ion")
battery().model                   #STR (e.g. "BAT")
battery().manufacturer            #STR (e.g. "Notebook")
battery().serial                  #STR (e.g. "0001")

graphics()->PROMISE_OBJ           #Uses:
graphics().controllers            #OBJ_ARR
graphics().controllers[*].vendor  #STR (e.g. "NVIDIA Corporation")
graphics().controllers[*].model   #STR (e.g. "GP106M [GeForce GTX 1060 Mobile] ")
graphics().controllers[*].bus     #STR (e.g. "Onboard")
graphics().controllers[*].vram    #NUM|null (e.g. 32)
graphics().controllers[*]
 .vramDynamic                     #BOOL (e.g. false)
graphics().displays               #OBJ_ARR
graphics().displays[*].model      #STR (e.g. "Display")
graphics().displays[*].main       #BOOL (e.g. true)
graphics().displays[*].builtin    #BOOL (e.g. false)
graphics().displays[*].connection #STR (e.g. "DP-0")
graphics().displays[*].sizex      #NUM (e.g. 381)
graphics().displays[*].sizey      #NUM (e.g. 214)
graphics().displays[*].pixeldepth #NUM (e.g. 24)
graphics().displays[*].resolutionx#NUM (e.g. 1920)
graphics().displays[*].resolutiony#NUM (e.g. 1080)

fsSize()->PROMISE_OBJ_ARR         #Uses:
fsSize()[*].fs                    #STR (e.g. "/dev/sda1")
fsSize()[*].type                  #STR (e.g. "ext4")
fsSize()[*].size                  #NUM (e.g. 1967925690368)
fsSize()[*].used                  #NUM (e.g. 50408796160)
fsSize()[*].use                   #NUM (e.g. 2.56)
fsSize()[*].mount                 #STR (e.g. "/home/data")

blockDevices()->PROMISE_OBJ       #Uses:

fsStats()->PROMISE_OBJ            #Uses:
fsStats().rx                      #NUM (e.g. 15091493888)
fsStats().wx                      #NUM (e.g. 12358868480)
fsStats().tx                      #NUM (e.g. 27450362368)
fsStats().rx_sec                  #NUM (e.g. -1)
fsStats().wx_sec                  #NUM (e.g. -1)
fsStats().tx_sec                  #NUM (e.g. -1)
fsStats().ms                      #NUM (e.g. 0)

disksIO()->PROMISE_OBJ            #Uses:
disksIO().rIO                     #NUM (e.g. 484061)
disksIO().wIO                     #NUM (e.g. 792074)
disksIO().tIO                     #NUM (e.g. 1276135)
disksIO().rIO_sec                 #NUM (e.g. -1)
disksIO().wIO_sec                 #NUM (e.g. -1)
disksIO().tIO_sec                 #NUM (e.g. -1)
disksIO().ms                      #NUM (e.g. 0)

diskLayout()->PROMISE_OBJ_ARR     #Uses:
diskLayout()[*].type              #STR (e.g. "HD")
diskLayout()[*].name              #STR (e.g. "ST2000LX001-1RG1")
diskLayout()[*].vendor            #STR (e.g. "Seagate")
diskLayout()[*].size              #NUM (e.g. 2000000000000)
diskLayout()[*].bytesPerSector    #NUM (e.g. 512)
diskLayout()[*].totalCylinders    #NUM (e.g. 6527)
diskLayout()[*].totalHeads        #NUM (e.g. 255)
diskLayout()[*].totalSectors      #NUM (e.g. 104856255)
diskLayout()[*].totalTracks       #NUM (e.g. 1664385)
diskLayout()[*].tracksPerCylinder #NUM (e.g. 255)
diskLayout()[*].sectorsPerTrack   #NUM (e.g. 63)
diskLayout()[*].firmwareRevision  #STR (e.g. "SDM1")
diskLayout()[*].serialNum         #STR (e.g. "WDZABADZ")
diskLayout()[*].interfaceType     #STR (e.g. "SATA")
diskLayout()[*].smartStatus       #STR (e.g. "unknown")

networkInterfaceDefault()         #Uses:
 ->PROMISE_OBJ                    #

networkInterfaces()               #Uses:
 ->PROMISE_OBJ_ARR                #
networkInterfaces()[*].iface      #STR (e.g. "wlp112s0")
networkInterfaces()[*].ip4        #STR (e.g. "192.168.1.225")
networkInterfaces()[*].ip6        #STR (e.g. "fe80::ca35:9059:32c0:7095")
networkInterfaces()[*].mac        #STR (e.g. "9c:b6:d0:20:69:c7")
networkInterfaces()[*].internal   #BOOL (e.g. false)

networkStats()->PROMISE_OBJ       #Uses:
networkStats().iface              #STR|undefined (e.g. "en0")
networkStats().operstate          #STR (e.g. "up")
networkStats().rx                 #NUM (e.g. 6560567312)
networkStats().tx                 #NUM (e.g. 82889387)
networkStats().rx_sec             #NUM (e.g. -1)
networkStats().tx_sec             #NUM (e.g. -1)
networkStats().ms                 #NUM (e.g. 0)

networkConnections()
 ->PROMISE_OBJ_ARR                #Uses:
networkConnections()[*].protocol  #STR (e.g. "tcp")
networkConnections()[*]
 .localaddress                    #STR (e.g. "127.0.0.53%lo")
networkConnections()[*].localport #STR (e.g. "53")
networkConnections()[*]
 .peeraddress                     #STR (e.g. "0.0.0.0")
networkConnections()[*].peerport  #STR (e.g. "*")
networkConnections()[*].state     #STR (e.g. "LISTEN")

services()->PROMISE_OBJ           #Uses:
                                  #Empty object on Linux|Mac, undefined on Windows???

processes()->PROMISE_OBJ          #Uses:
processes().all                   #NUM (e.g. 389)
processes().running               #NUM (e.g. 1)
processes().blocked               #NUM (e.g. 0)
processes().sleeping              #NUM (e.g. 290)
processes().unknown               #NUM (e.g. 0)
processes().list                  #OBJ_ARR
processes().list[*].pid           #NUM (e.g. 19171)
processes().list[*].parentPid     #NUM (e.g. 3810)
processes().list[*].name          #STR (e.g. "bash")
processes().list[*].pcpu          #NUM (e.g. 0)
processes().list[*].pcpuu         #NUM (e.g. 0)
processes().list[*].pcpus         #NUM (e.g. 0)
processes().list[*].pmem          #NUM (e.g. 0)
processes().list[*].priority      #NUM (e.g. 19)
processes().list[*].mem_vsz       #NUM (e.g. 23696)
processes().list[*].mem_rss       #NUM (e.g. 12992)
processes().list[*].nice          #NUM (e.g. 0)
processes().list[*].started       #STR (e.g. "2019-01-10 12:09:40")
processes().list[*].state         #STR (e.g. "sleeping")
processes().list[*].tty           #STR (e.g. "pts/4")
processes().list[*].user          #STR (e.g. "ether")
processes().list[*].command       #STR (e.g. "bash")

processLoad()->PROMISE_OBJ        #Uses:

users()->PROMISE_OBJ_ARR          #Uses:
users()[*].user                   #STR (e.g. "ether")
users()[*].tty                    #STR (e.g. ":1")
users()[*].date                   #STR (e.g. "2019-01-09")
users()[*].time                   #STR (e.g. "10:24")
users()[*].ip                     #STR (e.g. ":1")
users()[*].command                #STR (e.g. "/usr/lib/gdm3/gdm-x-session --run-script env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session --session=ubuntu")

inetChecksite()->PROMISE_OBJ      #Uses:

inetLatency()->PROMISE_NUM        #NUM (e.g. 18.042). Uses:

dockerContainers()->PROMISE_OBJ   #Uses:
dockerContainerStats()            #Uses:
 ->PROMISE_OBJ                    #
dockerContainerProcesses()        #Uses:
 ->PROMISE_OBJ                    #
dockerAll()->PROMISE_OBJ          #Uses:
