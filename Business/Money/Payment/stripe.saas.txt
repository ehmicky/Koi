
          
   STRIPE  
          



TODO:
  - stopped at https://stripe.com/docs/strong-customer-authentication
  - https://stripe.com/docs
     - go back to:
        - https://stripe.com/docs/billing/webhooks
        - https://stripe.com/docs/building-extensions
        - https://stripe.com/docs/recipes
        - https://stripe.com/docs/development/checklist
        - https://stripe.com/docs/stripe-js/reference
           - https://stripe.com/docs/amex-express-checkout#integrating
           - https://stripe.com/docs/masterpass#integrating
           - https://stripe.com/docs/visa-checkout#integrating
        - https://stripe.com/docs/payments/checkout
           - including the Checkout section on https://stripe.com/docs/receipts
        - https://stripe.com/docs/payments/3d-secure
  - go through each attribute, edit and try to make sense of them
  - check https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.yaml
  - what do publishable keys do?
     - check what 'RETRIEVABLE WITH PUBLISHABLE KEY' means in API docs
     - it seems like they are used with Stripe.js client library
  - difference Connect custom vs express vs standard
     - including in API it sometimes shows "Custom only" or "Custom and Express only"
     - including:
        - https://stripe.com/docs/sources/connect
        - https://stripe.com/docs/ach#connect
        - https://stripe.com/docs/disputes#disputes-on-connect-platforms
  - go through all undocumented endpoints, see if they are documented elsewhere
  - pricing
     - including differences based on where the Stripe account was created
  - go through Stripe dashboard
     - including https://stripe.com/docs/receipts#automatically-send-receipts-when-using-billing
  - compare with other providers like PayPal, authorize.net and Klarna
  - https://stripe.com/works-with

Undocumented:
  - can see schema at https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.yaml
  - potentially new features:
     - POST /3d_secure
     - GET /3d_secure/ID
     - GET /apple_pay/domains[/ID]
     - POST /apple_pay/domains
     - DELETE /apple_pay/domains/ID
     - GET /subcription_schedules[/ID]
     - POST /subcription_schedules[/ID]
     - POST /subcription_schedules/ID/release
     - POST /subcription_schedules/ID/cancel
     - GET /subcription_schedules/ID/revisions
     - GET /subcription_schedules/ID/revisions/ID
     - GET /issuer_fraud_records[/ID]
     - GET /exchange_rates[/ID]
     - POST /ephemeral_keys
     - DELETE /ephemeral_keys/ID
        - See https://stripe.com/docs/mobile/ios/standard#ephemeral-key
     - POST /account_links
  - can be done with existing endpoints:
     - POST /transfers/ID/cancel
     - GET /sources/ID/source_transactions
     - POST /sources/ID/verify
     - GET /payouts/ID/transactions
     - GET /customers/ID/subscriptions[/ID]
     - POST /customers/ID/subscriptions[/ID]
     - DELETE /customers/ID/subscriptions/ID
     - DELETE /customers/ID/subcriptions/ID/discount
     - POST /charges/ID/refund
     - POST /charges/ID/dispute
     - POST /charges/ID/dispute/close
     - GET /charges/ID/refunds[/ID]
     - POST /charges/ID/refunds[/ID]
     - POST /application_fees/ID/refund

VERSION ==>                       #2019-03-14
                                  #See:
                                  #  - https://stripe.com/en-US/blog/changelog
                                  #  - https://stripe.com/docs/upgrades
Stripe-Version: VERSION [C|S]     #Defaults to latest.

ENDPOINT ==>                      #https://api.stripe.com/v1/

Content-Type: application/
 x-www-form-urlencoded [C]        #Request body: x-www-form-urlencoded (but must keep [] not encoded)
?PARAM                            #Are actually request body parameters, not URL variables.
Accept: application/json [C]      #Response body: JSON

Authorization: Bearer API_KEY [C] #Authentication
                                  #4 keys by default:
                                  #  - either production or testing
                                  #  - either secret or public ("publishable")
                                  #Can create|delete more:
                                  #  - can be revoked
                                  #     - including with a timeout of 12 hours
                                  #  - can be scoped to:
                                  #     - specific endpoints
                                  #     - read/write, read-only, none
Authorization: API_KEY [C]
Stripe-Account:
 STRIPE_ACCOUNT.id [C]            #Authentication for Connect instead.

TEST MODE ==>                     #  - separate data
                                  #  - payments not processed by providers
                                  #  - simpler steps for some flows
                                  #  - fewer retries
RESOURCE.livemode                 #BOOL on all RESOURCEs
                                  #Test transactions fire both test and production webhooks with WEBHOOK.connect true
                                  #  - i.e. those webhook handlers should check RESOURCE.livemode

Request-Id: UUID [S]              #

SECURITY ==>                      #Security-sensitive information:
                                  #  - personal info, credit cards, bank account
                                  #  - never returned in response, only in request payloads
                                  #  - also not needed in request payloads when letting Stripe do it through TOKENs with
                                  #    Stripe checkout, Elements, mobile SDK, Terminal or Connect.
                                  #     - i.e. servers never see those information
                                  #For security and PCI compliance:
                                  #  - use HTTPS
                                  #  - must submit self-assessments if:
                                  #     - creating charges manually via HTTP or via Dashboard (instead of Elements, etc.)
                                  #  - must do a fuller compliance process if more than 15000 transactions per day
                                  #Check online doc how to migrate from|to Stripe from|to another provider:
                                  #  - it's not easy and might be impossible if new provider is not PCI compliant
                                  #  - from one Stripe account to another: can contact support
                                  #When using CSP in front-end, must whitelist some *.stripe.com (see online doc).

{ error: ERROR }                  #Error response for any endpoint
ERROR.type                        #Can be:
                                  #  - 'invalid_request_error' (400|404): input validation server-side
                                  #  - 'authentication_error' (401)
                                  #  - 'api_connection_error': cannot connect to API (network failure, timeout)
                                  #  - 'card_error' (402): credit card could not be charged
                                  #  - 'permission_error' (403)
                                  #  - 'idempotency_error' (409): wrong usage of `Idempotency-Key`
                                  #  - 'rate_limit_error' (429)
                                  #  - 'api_error' (500|502|503|504): server-side errors
                                  #  (client library only)
                                  #  - 'validation_error': input validation
                                  #  (Node.js library only)
                                  #  - 'signature_response_error': webhooks verification error
                                  #  - 'stream_processing_error': when creating files using STREAMs
                                  #  - 'generic_error': generic error
ERROR.code                        #One of:
CHARGE.failure_code               #  - 'account_already_exists': The email address provided for the creation of a deferred account already has an account associated with it.
                                  #    Use the OAuth flow to connect the existing account to your platform.
                                  #  - 'account_country_invalid_address': The country of the business address provided does not match the country of the account.
                                  #    Businesses must be located in the same country as the account.
                                  #  - 'account_invalid': The account ID provided as a value for the Stripe-Account header is invalid. Check that your requests are specifying a valid account ID.
                                  #  - 'account_number_invalid': The bank account number provided is invalid (e.g., missing digits).
                                  #    Bank account information varies from country to country. We recommend creating validations in your entry forms based on the bank account formats we provide.
                                  #  - 'alipay_upgrade_required': This method for creating Alipay payments is not supported anymore. Please upgrade your integration to use Sources instead.
                                  #  - 'amount_too_large': The specified amount is greater than the maximum amount allowed. Use a lower amount and try again.
                                  #  - 'amount_too_small': The specified amount is less than the minimum amount allowed. Use a higher amount and try again.
                                  #  - 'api_key_expired': The API key provided has expired. Obtain your current API keys from the Dashboard and update your integration to use them.
                                  #  - 'balance_insufficient': The transfer or payout could not be completed because the associated account does not have a sufficient balance available.
                                  #    Create a new transfer or payout using an amount less than or equal to the account's available balance.
                                  #  - 'bank_account_exists': The bank account provided already exists on the specified Customer object.
                                  #    If the bank account should also be attached to a different customer, include the correct customer ID when making the request again.
                                  #  - 'bank_account_unusable': The bank account provided cannot be used for payouts. A different bank account must be used.
                                  #  - 'bank_account_unverified': Your Connect platform is attempting to share an unverified bank account with a connected account.
                                  #  - 'bitcoin_upgrade_required': This method for creating Bitcoin payments is not supported anymore. Please upgrade your integration to use Sources instead.
                                  #  - 'card_declined': The card has been declined.
                                  #    When a card is declined, the error returned also includes the decline_code attribute with the reason why the card was declined.
                                  #  - 'charge_already_captured': The charge you're attempting to capture has already been captured. Update the request with an uncaptured charge ID.
                                  #  - 'charge_already_refunded': The charge you're attempting to refund has already been refunded. Update the request to use the ID of a charge that has not been refunded.
                                  #  - 'charge_disputed': The charge you're attempting to refund has been charged back. Check the disputes documentation to learn how to respond to the dispute.
                                  #  - 'charge_exceeds_source_limit': This charge would cause you to exceed your rolling-window processing limit for this source type.
                                  #    Please retry the charge later, or contact us to request a higher processing limit.
                                  #  - 'charge_expired_for_capture': The charge cannot be captured as the authorization has expired. Auth and capture charges must be captured within seven days.
                                  #  - 'country_unsupported': Your platform attempted to create a custom account in a country that is not yet supported.
                                  #    Make sure that users can only sign up in countries supported by custom accounts.
                                  #  - 'coupon_expired': The coupon provided for a subscription or order has expired. Either create a new coupon, or use an existing one that is valid.
                                  #  - 'customer_max_subscriptions': The maximum number of subscriptions for a customer has been reached. Contact us if you are receiving this error.
                                  #  - 'email_invalid': The email address is invalid (e.g., not properly formatted).
                                  #    Check that the email address is properly formatted and only includes allowed characters.
                                  #  - 'expired_card': The card has expired. Check the expiration date or use a different card.
                                  #  - 'idempotency_key_in_use': The idempotency key provided is currently being used in another request.
                                  #    This occurs if your integration is making duplicate requests simultaneously.
                                  #  - 'incorrect_address': The card's address is incorrect. Check the card's address or use a different card.
                                  #  - 'incorrect_cvc': The card's security code is incorrect. Check the card's security code or use a different card.
                                  #  - 'incorrect_number': The card number is incorrect. Check the card's number or use a different card.
                                  #  - 'incorrect_zip': The card's ZIP code is incorrect. Check the card's ZIP code or use a different card.
                                  #  - 'instant_payouts_unsupported': The debit card provided as an external account does not support instant payouts.
                                  #    Provide another debit card or use a bank account instead.
                                  #  - 'invalid_card_type': The card provided as an external account is not a debit card. Provide a debit card or use a bank account instead.
                                  #  - 'invalid_charge_amount': The specified amount is invalid.
                                  #    The charge amount must be a positive integer in the smallest currency unit, and not exceed the minimum or maximum amount.
                                  #  - 'invalid_cvc': The card's security code is invalid. Check the card's security code or use a different card.
                                  #  - 'invalid_expiry_month': The card's expiration month is incorrect. Check the expiration date or use a different card.
                                  #  - 'invalid_expiry_year': The card's expiration year is incorrect. Check the expiration date or use a different card.
                                  #  - 'invalid_number': The card number is invalid. Check the card details or use a different card.
                                  #  - 'invalid_source_usage': The source cannot be used because it is not in the correct state (e.g., a charge request is trying to use a source with a pending,
                                  #    failed, or consumed source). Check the status of the source you are attempting to use.
                                  #  - 'invoice_no_customer_line_items': An invoice cannot be generated for the specified customer as there are no pending invoice items.
                                  #    Check that the correct customer is being specified or create any necessary invoice items first.
                                  #  - 'invoice_no_subscription_line_items': An invoice cannot be generated for the specified subscription as there are no pending invoice items.
                                  #    Check that the correct subscription is being specified or create any necessary invoice items first.
                                  #  - 'invoice_not_editable': The specified invoice can no longer be edited.
                                  #    Instead, consider creating additional invoice items that will be applied to the next invoice.
                                  #    You can either manually generate the next invoice or wait for it to be automatically generated at the end of the billing cycle.
                                  #  - 'invoice_upcoming_none': There is no upcoming invoice on the specified customer to preview.
                                  #    Only customers with active subscriptions or pending invoice items have invoices that can be previewed.
                                  #  - 'livemode_mismatch': Test and live mode API keys, requests, and objects are only available within the mode they are in.
                                  #  - 'missing': Both a customer and source ID have been provided, but the source has not been saved to the customer.
                                  #    To create a charge for a customer with a specified source, you must first save the card details.
                                  #  - 'not_allowed_on_standard_account': Transfers and payouts on behalf of a Standard connected account are not allowed.
                                  #  - 'order_creation_failed': The order could not be created. Check the order details and then try again.
                                  #  - 'order_required_settings': The order could not be processed as it is missing required information. Check the information provided and try again.
                                  #  - 'order_status_invalid': The order cannot be updated because the status provided is either invalid or does not follow the order lifecycle (e.g., an order cannot
                                  #    transition from created to fulfilled without first transitioning to paid).
                                  #  - 'order_upstream_timeout': The request timed out. Try again later.
                                  #  - 'out_of_inventory': The SKU is out of stock. If more stock is available, update the SKU's inventory quantity and try again.
                                  #  - 'parameter_invalid_empty': One or more required values were not provided. Make sure requests include all required parameters.
                                  #  - 'parameter_invalid_integer': One or more of the parameters requires an integer, but the values provided were a different type.
                                  #    Make sure that only supported values are provided for each attribute.
                                  #  - 'parameter_invalid_string_blank': One or more values provided only included whitespace. Check the values in your request and update any that contain only whitespace.
                                  #  - 'parameter_invalid_string_empty': One or more required string values is empty. Make sure that string values contain at least one character.
                                  #  - 'parameter_missing': One or more required values are missing.
                                  #  - 'parameter_unknown': The request contains one or more unexpected parameters. Remove these and try again.
                                  #  - 'parameters_exclusive': Two or more mutually exclusive parameters were provided.
                                  #  - 'payment_intent_authentication_failure': The provided payment method has failed authentication.
                                  #    Provide a new payment method to attempt to fulfill this PaymentIntent again.
                                  #  - 'payment_intent_incompatible_payment_method': The PaymentIntent expected a payment method with different properties than what was provided.
                                  #  - 'payment_intent_invalid_parameter': One or more provided parameters was not allowed for the given operation on the PaymentIntent.
                                  #  - 'payment_intent_payment_attempt_failed': The latest payment attempt for the PaymentIntent has failed.
                                  #    Check the last_payment_error property on the PaymentIntent for more details, and provide source_data or a new source to attempt to fulfill this PaymentIntent again.
                                  #  - 'payment_intent_unexpected_state': The PaymentIntent's state was incompatible with the operation you were trying to perform.
                                  #  - 'payment_method_unactivated': The charge cannot be created as the payment method used has not been activated.
                                  #    Activate the payment method in the Dashboard, then try again.
                                  #  - 'payment_method_unexpected_state': The provided payment method's state was incompatible with the operation you were trying to perform.
                                  #    Confirm that the payment method is in an allowed state for the given operation before attempting to perform it.
                                  #  - 'payouts_not_allowed': Payouts have been disabled on the connected account.
                                  #    Check the connected account's status to see if any additional information needs to be provided, or if payouts have been disabled for another reason.
                                  #  - 'platform_api_key_expired': The API key provided by your Connect platform has expired.
                                  #    This occurs if your platform has either generated a new key or the connected account has been disconnected from the platform.
                                  #    Obtain your current API keys from the Dashboard and update your integration, or reach out to the user and reconnect the account.
                                  #  - 'postal_code_invalid': The ZIP code provided was incorrect.
                                  #  - 'processing_error': An error occurred while processing the card. Check the card details are correct or use a different card.
                                  #  - 'product_inactive': The product this SKU belongs to is no longer available for purchase.
                                  #  - 'rate_limit': Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.
                                  #  - 'resource_already_exists': A resource with a user-specified ID (e.g., plan or coupon) already exists. Use a different, unique value for id and try again.
                                  #  - 'resource_missing': The ID provided is not valid. Either the resource does not exist, or an ID for a different resource has been provided.
                                  #  - 'routing_number_invalid': The bank routing number provided is invalid.
                                  #  - 'secret_key_required': The API key provided is a publishable key, but a secret key is required.
                                  #    Obtain your current API keys from the Dashboard and update your integration to use them.
                                  #  - 'sepa_unsupported_account': Your account does not support SEPA payments.
                                  #  - 'shipping_calculation_failed': Shipping calculation failed as the information provided was either incorrect or could not be verified.
                                  #  - 'sku_inactive': The SKU is inactive and no longer available for purchase. Use a different SKU, or make the current SKU active again.
                                  #  - 'state_unsupported': Occurs when providing the legal_entity information for a U.S. custom account, if the provided state is not supported.
                                  #    This is mostly associated states and territories.
                                  #  - 'tax_id_invalid': The tax ID number provided is invalid (e.g., missing digits). Tax ID information varies from country to country, but must be at least nine digits.
                                  #  - 'taxes_calculation_failed': Tax calculation for the order failed.
                                  #  - 'testmode_charges_only': Your account has not been activated and can only make test charges. Activate your account in the Dashboard to begin processing live charges.
                                  #  - 'tls_version_unsupported': Your integration is using an older version of TLS that is unsupported. You must be using TLS 1.2 or above.
                                  #  - 'token_already_used': The token provided has already been used. You must create a new token before you can retry this request.
                                  #  - 'token_in_use': The token provided is currently being used in another request. This occurs if your integration is making duplicate requests simultaneously.
                                  #  - 'transfers_not_allowed': The requested transfer cannot be created. Contact us if you are receiving this error.
                                  #  - 'upstream_order_creation_failed': The order could not be created. Check the order details and then try again.
                                  #  - 'url_invalid': The URL provided is invalid.
ERROR.doc_url                     #'URL' of the ERROR.code
ERROR.decline_code                #When ERROR.code is `card_declined`, can be:
                                  #  - invalid card numbers:
                                  #     - 'incorrect_number'
                                  #     - 'invalid_number'
                                  #     - 'invalid_expiry_year'
                                  #     - 'incorrect_cvc'
                                  #     - 'invalid_cvc'
                                  #     - 'incorrect_pin'
                                  #     - 'invalid_pin'
                                  #     - 'pin_try_exceeded'
                                  #     - 'incorrect_zip': The ZIP/postal code is incorrect.
                                  #     - 'approve_with_id': authorization error.
                                  #  - unknown reason:
                                  #     - 'call_issuer'
                                  #     - 'do_not_honor'
                                  #     - 'do_not_try_again'
                                  #     - 'generic_decline'
                                  #     - 'no_action_taken'
                                  #     - 'not_permitted'
                                  #     - 'revocation_of_all_authorizations'
                                  #     - 'revocation_of_authorization'
                                  #     - 'security_violation'
                                  #     - 'service_not_allowed'
                                  #     - 'stop_payment_order'
                                  #     - 'try_again_later'
                                  #     - 'transaction_not_allowed'
                                  #  - fraud:
                                  #     - 'fraudulent': Stripe suspects it is fraudulent.
                                  #     - 'lost_card': reported lost.
                                  #     - 'stolen_card': reported stolen.
                                  #     - 'pickup_card': reported lost or stolen.
                                  #     - 'restricted_card': reported lost or stolen.
                                  #     - 'merchant_blacklist': merchant is blacklisted by Stripe.
                                  #  - not enough money:
                                  #     - 'card_velocity_exceeded': exceeded the balance or credit limit available.
                                  #     - 'withdrawal_count_limit_exceeded': exceeded the balance or credit limit available on their card.
                                  #     - 'insufficient_funds'
                                  #     - 'invalid_amount': payment amount is invalid, or exceeds the amount that is allowed.
                                  #  - invalid purchase:
                                  #     - 'card_not_supported': does not support this type of purchase.
                                  #     - 'currency_not_supported': does not support the specified currency.
                                  #  - invalid card/bank:
                                  #     - 'expired_card'
                                  #     - 'invalid_account': The card, or account the card is connected to, is invalid.
                                  #     - 'new_account_information_available': The card, or account the card is connected to, is invalid.
                                  #  - server-side:
                                  #     - 'issuer_not_available': provider could not be reached.
                                  #     - 'processing_error': An error occurred while processing the card.
                                  #     - 'reenter_transaction': The payment should be attempted again.
                                  #  - 'duplicate_transaction'
                                  #  - 'testmode_decline': A Stripe test card number was used. A genuine card must be used to make a payment.
ERROR.message
CHARGE.failure_message            #STR. Can be shown to users for card errors.
ERROR.param                       #'PROP' that failed input validation.
ERROR.charge                      #CHARGE.id
ERROR.payment_intent              #PINTENT
ERROR.payment_method              #PAYMENT_METHOD
ERROR.source                      #SOURCE.id

GET /RESOURCES?limit=NUM          #Pagination size (def: 10). Min 1, max 100.
GET /RESOURCES
 ?starting_after|ending_before
 =RESOURCE.id                     #Cursor pagination

LIST                              #Paginated response
LIST.data                         #OBJ_ARR
LIST.has_more                     #BOOL
LIST.total_count                  #NUM
LIST.url                          #'/v1/...'

?expand=VARR,...                  #Populate attribute
                                  #Max depth 4

Idempotency-Key: RANDOM [C]       #Memoize using:
                                  #  - RANDOM
                                  #  - request parameters (including body)
                                  #  - response's status code (including 4**|5**)
                                  #Error is same RANDOM but others two are different.
                                  #Allows for safe retries.
                                  #Only for 24 hours.
                                  #Only memoize requests that passed input validation layer.
                                  #Only for `POST`
                                  #Recommended for POST /charges
                                  #  - using the order ID, or the SOURCE.id (unless reusable), etc.
                                  #  - to avoid DISPUTEs on duplicated charges

RESOURCE.id                       #STR
RESOURCE.object                   #Either:
                                  #  - 'list': for list endpoints
                                  #  - 'RESOURCE_NAME' (e.g. 'balance_transaction')
RESOURCE.metadata               CU#Custom OBJ
                                  #Max 50 properties, max KEY length 40 bytes, max value length 500 bytes.
                                  #Should not contain personal or confidential information.

CMP_FILTER                        #OBJ: gt[e]|lt[e] NUM|DATE_NUM

RESOURCE.created                  #DATE_NUM
GET /RESOURCES?created=CMP_FILTER #

Request-Id [S]                    #Request/response ID, for debugging

NOTATION ==>                    CU#Updatable on create|update
                                 R#Only on create|update, not in responses
                                 *#Required on create|update
                                 ?#Optional field (null or undefined if not present). I have not documented all optional fields as such yet.

MONEY                             #INT. In the currency's smallest unit (e.g. cents for USD).
                                  #Can be negative.
PMONEY                            #Like MONEY but >= 0

RESOURCE.currency                 #STR (ISO 4217) (e.g. 'usd')
                                  #Available:
                                  #  - as sibling on any RESOURCE with MONEY properties.
                                  #  - on CUSTOMER|CARD|BANK_ACCOUNT|SKU|REPORT_RUN_PARAMS
CURRENCY CONVERSION ==>           #Conversion is automatic and has three stages:
                                  #  - customer's currency (specified by SOURCE, i.e. customer input)
                                  #     - used during CHARGE
                                  #  - CHARGE.currency ("presentment" currency) (specified by our code)
                                  #     - stored in BALANCE, currency-wise
                                  #  - destination's currency (our bank account)
                                  #     - used during PAYOUT
                                  #        - not when money is re-used with a REFUND or a Connect transaction
AVAILABLE CURRENCIES ==>          #Customer's currency and CHARGE.currency:
                                  #  - see full list at https://stripe.com/docs/currencies
                                  #  - payment method-specifics for CHARGE.currency:
                                  #     - 'usd' only for card with JCB, Discover, Diners Club, and for 'ach*'
                                  #     - 'eur' for bancontact
                                  #     - same as destination currency for 'alipay'
                                  #Destination currency:
                                  #  - must match main currency of STRIPE_ACCOUNT.country
                                  #  - but PAYOUT can be to another country with same currency (e.g. Eurozone)
EXCHANGE FEE ==>                  #Conversion exchange fee (if conversion needed):
                                  #  - customer to presentment: paid by customer (bank fee)
                                  #  - presentment to destination: 1% Stripe fee
                                  #I.e. CHARGE.currency should either use:
                                  #  - customer's currency (preferred): fee is paid by us, if PAYOUT
                                  #  - destination's currency: fee is paid by customer, always
                                  #There is also an unrelated fee when customer's bank's country is different from destination's:
                                  #  - paid by customer (bank fee)
                                  #  - we also pay 1-1.5% Stripe fee (depending on country)
                                  #Can set several bank accounts with different currencies|countries to avoid those fees.
                                  #Conversion happens at rate when CHARGE|REFUND is created:
                                  #  - the difference between REFUND and its CHARGE is paid by destination not customer
                                  #     - i.e. customer always get back exactly what they paid
                                  #Currency rates are shown in dashboard.
SOURCE.default_for_currency       #BOOL (def: false).
                                  #When making payout to multiple SOURCEs:
                                  #  - use the SOURCE with same currency
                                  #  - if multiple ones, use the one with BOOL true

DATE_NUM                          #Unix timestamp in seconds.
COUNTRY                           #STR (2-letters ISO code)

BILL_DETAILS.address              #ADDRESS
BILL_DETAILS.email                #STR.
BILL_DETAILS.name                 #STR. Recipient name.
BILL_DETAILS.phone                #STR. Includes country extension
SHIPPING                          #Like ADDRESS with extra fields:
SHIPPING.carrier                  #STR. Delivery service like 'Fedex', 'UPS', 'USPS', etc.
SHIPPING.tracking_number          #'STR,...'.
PRECISE_SHIPPING                  #Like SHIPPING with extra fields:
PRECISE_SHIPPING.tracking_url     #'URL'
PRECISE_SHIPPING.status           #STR among 'pending', 'shipped', 'delivered', 'returned', 'failure', 'canceled'.
PRECISE_SHIPPING.eta              #DATE_NUM
VERIFIED_BILL_DETAILS             #Like ADDRESS with extra fields:
VERIFIED_BILL_DETAILS.verified_*  #Like ADDRESS.* but verified by provider.

ADDRESS                           #
ADDRESS.country                   #COUNTRY
ADDRESS.state                     #STR
ADDRESS.city                      #STR
ADDRESS.postal_code               #STR
ADDRESS.line1                     #STR (e.g. street)
ADDRESS.line2                     #STR (e.g. appt)

GET /files[/ID]                   #For POST:
POST /files                       #  - endpoint is https://files.stripe.com
                                  #  - Content-Type is multipart/form-data
                                  #  - with Node.js library:
                                  #     - request payload is either:
                                  #        - OBJ where:
                                  #           - key is filename
                                  #           - value is BUFFER|STR or { [type: 'MIME', ]data BUFFER|STR }
                                  #        - STREAM: filename will be 'file'
                                  #     - def files MIME is 'application/octet-stream'
STRIPE.files.
 retrieve|list|create()           #
FILE                              #Any file
FILE.filename                     #string A filename for the file, suitable for saving to a filesystem.
FILE.links                        #FILE_LINK_LIST
FILE.file_link_data             RC#FILE_LINK:
                                  #  - create (required) BOOL: set this to true to create a file link for the newly created file.
                                  #    Creating a link is only possible when the file's purpose is one of the following: business_icon, business_logo, customer_signature, dispute_evidence, pci_document,
                                  #    or tax_document_user_upload.
                                  #  - expires_at, metadata
FILE.purpose                    *C#string The purpose of the file.
                                  #Possible values are:
                                  #  - 'identity_document': PERSON.verification.document.front|back
                                  #  - business_icon, business_logo, customer_signature, dispute_evidence, finance_report_run, pci_document, sigma_scheduled_query, tax_document_user_upload.
?purpose=STR                      #
FILE.size                         #integer The size in bytes of the file object.
FILE.title                        #string A user friendly title for the document.
FILE.type                         #string The type of the file returned (e.g., csv, pdf, jpg, or png).
FILE.url                          #string The URL from which the file can be downloaded using your live secret API key.

GET /file_links[/ID]
POST /file_links[/ID]             #Link sharing a FILE publicly.
STRIPE.fileLinks.
 retrieve|list|create|update()    #
FILE_LINK.expired                 #boolean Whether this link is already expired.
?expired=BOOL                     #
FILE_LINK.expires_at            CU#timestamp Time at which the link expires.
FILE_LINK.file                  *C#FILE.id The file object this link points to.
?file=FILE.id                     #
FILE_LINK.url                     #string The publicly accessible URL to download the file.

GET /balance                      #BALANCE
                                  #Current Stripe "aggregated bank account".
STRIPE.balance.retrieve()         #
balance.available                 #'EVENT_TYPE' when your Stripe balance has been updated (e.g., when a charge is available to be paid out).
                                  #By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis.
BALANCE.available                 #BALANCE_SUB_ARR. Money available.
BALANCE.pending                   #BALANCE_SUB_ARR. Money not available yet due to 7-day rolling pay cycle.
BALANCE.connect_reserved          #BALANCE_SUB_ARR. Money held.
BALANCE_SUB                       #Subdivision of BALANCE for each currency and SOURCE
BALANCE_SUB.amount                #MONEY
BALANCE_SUB.source_types.TYPE     #INT. How amount is divided between account TYPE 'bank_account' or 'card'.

GET /balance/history[/ID]         #BALANCE_TRANSACTION.
                                  #BALANCE's single transaction
STRIPE.balance.
 list|retrieveTransactions()      #
BALANCE_TRANSACTION.amount        #PMONEY paid by sender
BALANCE_TRANSACTION.fee           #PMONEY paid to Stripe or taxes
BALANCE_TRANSACTION.fee_details   #FEE_DETAILS
FEE_DETAILS.application           #STRIPE_ACCOUNT.id
?payout=PAYOUT.id                 #
FEE_DETAILS.amount                #PMONEY
?currency=STR                     #
FEE_DETAILS.description           #STR
FEE_DETAILS.type                  #Can be: 'application_fee', 'stripe_fee' or 'tax'
BALANCE_TRANSACTION.net           #amount - fee
BALANCE_TRANSACTION.exchange_rate #NUM
BALANCE_TRANSACTION.available_on  #DATE_NUM. When will be 'available' in BALANCE. Until then is 'pending'
?available_on=CMP_FILTER          #
BALANCE_TRANSACTION.status        #'pending' or 'available'
BALANCE_TRANSACTION.type          #Can be:
                                  #  - adjustment
                                  #  - advance
                                  #  - advance_funding
                                  #  - application_fee
                                  #  - charge
                                  #  - connect_collection_transfer
                                  #  - issuing_authorization_hold
                                  #  - issuing_authorization_release
                                  #  - issuing_transaction
                                  #  - payment
                                  #  - payout
                                  #  - refund
                                  #  - reserve_transaction
                                  #  - reserved_funds
                                  #  - stripe_fee
                                  #  - stripe_fx_fee
                                  #  - tax_fee
                                  #  - topup
                                  #  - topup_reversal
                                  #  - transfer
                                  #  - *_refund: for application_fee|payment|payment_failure|transfer
                                  #  - *_cancel: for payout|transfer
                                  #  - *_failure: for payout|refund|transfer
?type=STR                         #
BALANCE_TRANSACTION.source        #Related RESOURCE.id
?source=SOURCE.id                 #
BALANCE_TRANSACTION.description   #STR

CHARGE                            #Single payment
GET /charges[/ID]
POST /charges[/ID]                #
STRIPE.charges.retrieve|list|
 create|update()                  #
CHARGE.amount                   *C#PMONEY
                                  #Have a currency-specific minimum (around $0.5).
                                  #  - see https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts
CHARGE.application_fee_amount    C#PMONEY
CHARGE.application_fee            #STRIPE_ACCOUNT_FEE.id
CHARGE.balance_transaction        #BALANCE_TRANSACTION.id
CHARGE.paid                       #BOOL for success
CHARGE.status                     #First 'pending' then either 'succeeded' or 'failed'.
                                  #EVENTS 'charge.pending|succeeded|failed' fired:
                                  #  - most SOURCEs are sync:
                                  #     - response status is never 'pending'
                                  #     - no need to use webhooks
                                  #  - some SOURCEs are async
                                  #     - must use webhooks
                                  #     - only SOURCE.type 'ach_*', 'sepa_debit' and 'sofort'
CHARGE.refunds                    #REFUND_LIST
CHARGE.refunded                   #BOOL. False if only partially refunded.
CHARGE.amount_refunded            #PMONEY. 0 if none.
CHARGE.source                   *C#Can be:
                                  #  - TOKEN
                                  #  - SOURCE|CARD|BANK_ACCOUNT:
                                  #     - must be reusable
                                  #     - requires CHARGE.customer
                                  #  - STRIPE_ACCOUNT
                                  #On create, must be ID
CHARGE.payment_method             #PAYMENT_METHOD.id
CHARGE.payment_method_details     #Like SOURCE.type + SOURCE.TYPE.*
CHARGE.customer                 CU#CUSTOMER.id
?customer=CUSTOMER.id             #
CHARGE.application                #STRIPE_ACCOUNT.id
CHARGE.on_behalf_of              C#STRIPE_ACCOUNT.id
                                  #When one made transaction of another's behalf
CHARGE.statement_descriptor      C#STR. Shown to customer's bank transaction statement.
                                  #Only ASCII. Cannot contain <>"'*. Must contain a letter.
                                  #Prefixed by 'STR* ' where STR is:
                                  #  - (specific SOURCE) SOURCE.statement_descriptor
                                  #  - (credit card) STRIPE_ACCOUNT.settings.card_payments.statement_descriptor_prefix
                                  #  - (otherwise) STRIPE_ACCOUNT.settings.payments.statement_descriptor
                                  #Total max length 22.
STRIPE_ACCOUNT.settings.
 card_payments.
 statement_descriptor_prefix    CU#STR
STRIPE_ACCOUNT.settings.payments.
 statement_descriptor           CU#STR
SOURCE.statement_descriptor      C#
CHARGE.description              CU#STR. Shown in receipts.
CHARGE.receipt_email            CU#'EMAIL' to send a receipt to.
                                  #Defaults to CHARGE.customer.email
                                  #Can be resent|previewed from the dashboard.
                                  #There is a dashboard setting to let Stripe fill this automatically.
CHARGE.receipt_url                #'URI'. Kept up-to-date.
CHARGE.receipt_number             #STR. Unique number appearing on receipts.
CHARGE.outcome                    #OUTCOME. Whether payment was accepted.
OUTCOME.type                      #STR among:
                                  #  - 'authorized': success
                                  #  - 'invalid': invalid parameters
                                  #  - 'manual_review': Radar requests a review first
                                  #  - 'blocked': Stripe blocked before sending to bank
                                  #  - 'issuer_declined': bank rejected
OUTCOME.network_status            #STR among:
                                  #  - 'approved_by_network': success
                                  #  - 'not_sent_to_network': Stripe blocked before sending to bank (Radar or invalid parameters)
                                  #  - 'declined_by_network': bank rejected
                                  #  - 'reversed_after_approval': bank authorized, but Stripe blocked
OUTCOME.reason                    #STR among:
                                  #  - ERROR.decline_code
                                  #  - 'highest|elevated_risk_level': blocked by Radar
                                  #  - 'rule': blocked by custom rule
OUTCOME.rule                      #Radar's rule ID
OUTCOME.risk_level                #STR among:
                                  #  - 'normal', 'elevated', 'highest'
                                  #  - 'not_assessed': non-card payments
                                  #  - 'unknown'
OUTCOME.risk_score                #0-100
                                  #Undefined for non-card payments
OUTCOME.seller_message            #STR. Explanation. Should not be shown to customers.
CHARGE.fraud_details             U#FRAUD_DETAILS. Set when blocked by Radar.
FRAUD_DETAILS.stripe_report       #Always 'fraudulent'.
FRAUD_DETAILS.user_report        U#Either 'fraudulent' or 'safe'. Meant to override Radar's blocking ("Mark as safe")
CHARGE.dispute                    #DISPUTE.id
CHARGE.invoice                    #INVOICE.id
CHARGE.order                      #ORDER.id
CHARGE.payment_intent             #PINTENT.id
CHARGE.review                     #REVIEW.id
CHARGE.transfer                   #TRANSFER.id. Only applicable if the charge was created using the destination parameter.
CHARGE.source_transfer            #TRANSFER.id. Only present if the charge came from another Stripe account.
CHARGE.billing_details            #BILL_DETAILS.
CHARGE.shipping                 CU#SHIPPING.
CHARGE.transfer_data             C#TRANSFER_DATA.
TRANSFER_DATA.amount             C#MONEY (def: CHARGE.amount).
TRANSFER_DATA.destination        C#STR. Stripe account to transfer funds to if CHARGE.transfer_data was defined.
CHARGE.transfer_group           CU#STR.
?transfer_group=STR               #

POST /charges/ID/capture          #Like POST/charges/ID with CHARGE.capture true
STRIPE.capture()                  #
CHARGE.capture                  RC#BOOL. Delayed payment:
                                  #  - first create with CHARGE.captured false
                                  #     - CHARGE is authorized by bank
                                  #     - can be partial by specifying CHARGE.amount
                                  #  - then set to true
                                  #     - CHARGE is now processed
                                  #     - EVENT 'charge.captured'
                                  #  - if more than 7 days, CHARGE fails
                                  #     - EVENT 'charge.expired'
                                  #  - to cancel it, should create a REFUND
                                  #Goal: delaying payment when it might look fraudulent (see below).
                                  #Some banks show not-processed yet (but authorized) payments as if it was processed, which
                                  #can confuse some customers.
                                  #Only works with card* SOURCEs
CHARGE.captured                   #BOOL

GET /payment_intents[/ID]
POST /payment_intents[/ID]        #
POST /payment_intents/ID/confirm  #Set payment's method and start payment.
                                  #If additional authentication required, set PINTENT.status to 'requires_action' and use PINTENT.next_action
                                  #If failure, set PINTENT.status 'requires_payment_method'
                                  #If success, set PINTENT.status 'succeeded' (or 'requires_capture' if PINTENT.capture_methd 'manual')
                                  #Payload attributes: client_secret, payment_method, receipt_email, return_url, shipping, source, save_payment_method
POST /payment_intents/ID/capture  #Gets money if PINTENT.status 'requires_capture'
                                  #Payload attributes: amount_to_capture MONEY, application_fee_amount
POST /payment_intents/ID/cancel   #From PINTENT.status 'requires*' to 'canceled'.
                                  #If PINTENT.status 'requires_capture', PINTENT.amount_capturable is refunded.
                                  #Payload attributes: cancellation_reason
STRIPE.paymentIntents.retrieve|
 list|create|update|confirm|
 capture|cancel()                 #
payment_intent.                   #'EVENT_TYPE' when a PaymentIntent has funds to be captured.
 amount_capturable_updated        #Check the amount_capturable property on the PaymentIntent to determine the amount that can be captured.
                                  #You may capture the PaymentIntent with an amount_to_capture value up to the specified amount.
payment_intent.payment_failed     #'EVENT_TYPE' when a PaymentIntent has failed the attempt to create a source or a payment.
payment_intent.succeeded          #'EVENT_TYPE' when a PaymentIntent has been successfully fulfilled.
PINTENT                           #Ongoing flow to pay by a CUSTOMER.
PINTENT.amount                 *CU#
PINTENT.application_fee_amount  CU#
PINTENT.source                  CU#
PINTENT.payment_method          CU#
PINTENT.customer                CU#
PINTENT.application               #
PINTENT.on_behalf_of             C#
PINTENT.statement_descriptor    CU#
PINTENT.description             CU#
PINTENT.receipt_email           CU#
PINTENT.invoice                   #
PINTENT.review                    #
PINTENT.shipping                CU#
PINTENT.transfer_data            C#
PINTENT.transfer_group          CU#Like CHARGE.*
PINTENT.charges                   #CHARGE_LIST
PINTENT.payment_method_types    CU#STR_ARR of allowed SOURCE.type
PINTENT.save_payment_method    RCU#BOOL (def: false). Save PINTENT.payment_method|source to CUSTOMER.sources.
                                  #Must be specified again if PINTENT.payment_method|source changes.
PINTENT.amount_capturable         #MONEY that can be captured.
PINTENT.amount_received           #MONEY that was collected.
PINTENT.capture_method           C#Either 'automatic' or 'manual'.
PINTENT.status                    #STR among:
                                  #  - 'requires_payment_method'
                                  #  - 'requires_confirmation'
                                  #  - 'requires_action'
                                  #  - 'processing'
                                  #  - 'requires_authorization'
                                  #  - 'requires_capture'
                                  #  - 'canceled'
                                  #  - 'succeeded'
PINTENT.next_action               #NEXT_ACTION. If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
NEXT_ACTION.redirect_to_url       #REDIRECT_TO_URL. Contains instructions for authenticating a payment by redirecting your customer to another page or application.
REDIRECT_TO_URL.return_url        #string If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
REDIRECT_TO_URL.url               #string The URL you must redirect your customer to in order to authenticate the payment.
NEXT_ACTION.type                  #string Type of the next action to perform, one of redirect_to_url or use_stripe_sdk.
NEXT_ACTION.use_stripe_sdk        #OBJ. When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this object to invoke authentication flows.
                                  #The shape of the contents is subject to change and is only intended to be used by Stripe.js.
PINTENT.client_secret             #string The client secret of this PaymentIntent.
                                  #Used for client-side retrieval using a publishable key.
                                  #Please refer to dynamic authentication guide on how client_secret should be handled.
PINTENT.confirm                 RC#BOOL (def: false).
                                  #If true, attempt to confirm payment.
                                  #If the payment method attached is a card, a return_url may be provided in case additional authentication is required.
PINTENT.confirmation_method      C#string Confirmation method of this PaymentIntent, one of manual or automatic.
                                  #When the confirmation method is automatic, a PaymentIntent can be confirmed using a publishable key.
                                  #After next_actions are handled, no additional confirmation is required to complete the payment.
                                  #When the confirmation method is manual, all payment attempts must be made using a secret key.
                                  #The PaymentIntent will return to the requires_confirmation state after handling next_actions, and requires your server to initiate each payment attempt with an explicit
                                  #confirmation.
PINTENT.last_payment_error       ?#Confirmation ERROR
PINTENT.canceled_at              ?#DATE_NUM
PINTENT.cancellation_reason      ?#STR among: 'duplicate', 'fraudulent', 'requested_by_customer', 'failed_invoice'.

GET /refunds[/ID]
POST /refunds[/ID]                #
STRIPE.refunds.
 list|retrieve|create|update()    #
REFUND                            #Reverting a CHARGE.
                                  #As opposed to CHARGE, do not incur a fee
                                  #  - but original CHARGE's Stripe fee is not reversed
                                  #Takes 5-10 days for customer to see credit.
                                  #Stripe send email to customer providing:
                                  #  - dashboard setting is enabled for this
                                  #  - CHARGE.customer.email is defined.
                                  #Reuses same SOURCE as CHARGE's.
                                  #Can fail:
                                  #  - e.g. if customer's SOURCE is not valid anymore.
                                  #  - refund is reversed under 30 days.
                                  #Payment-method specifics:
                                  #  - alipay: within 90 days
                                  #  - all others: within 180 days
REFUND.charge                   *C#CHARGE.id that was refunded.
?charge=CHARGE.id                 #
REFUND.amount                    C#MONEY.
                                  #Can be partial:
                                  #  - in that case, refund_application_fee|reverse_transfer will be proportional.
                                  #  - can do several REFUNDs per CHARGE, but sum cannot exceed total CHARGE amount
REFUND.balance_transaction        #BALANCE_TRANSACTION.id of the refund
REFUND.refund_application_fee   RC#BOOL (def: false). Whether should refund application_fee as well.
REFUND.reverse_transfer         RC#BOOL (def: false). Whether should reverse TRANSFER.
REFUND.source_transfer_reversal   #TRAVERSAL.id if was using Connect.
REFUND.transfer_reversal          #TRAVERSAL.id if was using Connect and used 'destination'.
REFUND.reason                   ?C#STR among 'duplicate', 'fraudulent', 'requested_by_customer'.
REFUND.description                #STR. Shown to users. Only for non-card payments.
REFUND.receipt_number             #Like CHARGE.*
REFUND.status                     #STR among:
                                  #  - 'pending'
                                  #  - 'canceled', 'succeeded' or 'failed'
                                  #     - EVENT 'charge.refunded'
                                  #Card refunds are synchronous, i.e. never 'pending' nor 'canceled'.
REFUND.failure_balance_transaction#If refund failed, BALANCE_TRANSACTION.id reversing refund itself.
REFUND.failure_reason             #If refund failed, STR among 'lost_or_stolen_card', 'expired_or_canceled_card', 'unknown'.

GET /payouts[/ID]
POST /payouts[/ID]                #
POST /payouts/ID/cancel           #Set PAYOUT.status to 'canceled'
STRIPE.payouts.list|retrieve|
 create|update|cancel()           #
PAYOUT                            #Transfer money from STRIPE_ACCOUNT to bank account / credit card
                                  #Stripe fee:
                                  #  - 'standard': $0.25
                                  #  - 'instant': 1.5% (or minimum $0.5)
PAYOUT.amount                   *C#MONEY
                                  #Minimum of around €1-2 (currency-specific) (only for EU countries).
                                  #Can be negative, in which case bank account / credit card is debited instead.
                                  #  - done to put negative BALANCE back to normal
PAYOUT.method                    C#Either:
                                  #  - 'standard':
                                  #     - takes several days (country-specific)
                                  #        - 7-10 days the first time it's done
                                  #  - 'instant':
                                  #     - takes few minutes
                                  #     - only for Connect, for debit cards and not for all banks (but most)
                                  #     - higher Stripe fee
PAYOUT.source_type               C#'bank_account' or 'card' (source)
                                  #Decides which BALANCE_SUB to pick.
PAYOUT.type                       #'bank_account' or 'card' (destination)
PAYOUT.destination               C#CARD|BANK_ACCOUNT.id. Where to send.
?destination=CARD|BANK_ACCOUNT.id #
PAYOUT.status                     #STR among:
                                  #  - 'pending': not submitted to bank yet
                                  #  - 'in_transit'
                                  #  - 'paid', 'failed' or 'canceled'
                                  #     - EVENT 'payout.paid|failed|canceled'
?status=STR                       #
PAYOUT.arrival_date               #Expected|actual DATE_NUM
?arrival_date=CMP_FILTER          #
PAYOUT.description               C#Like CHARGE.*
PAYOUT.statement_descriptor      C#Like CHARGE.*
PAYOUTS_SETTINGS.
 statement_descriptor           CU#STR prefixing statement_descriptor (same as for CHARGE.*)
PAYOUT.balance_transaction        #BALANCE_TRANSACTION.id
PAYOUT.                          ?#If failed|canceled, BALANCE_TRANSACTION.id reversing it.
 failure_balance_transaction      #Takes up to 5 days to receive money back.
PAYOUT.failure_message           ?#STR
PAYOUT.failure_code              ?#STR among:
                                  #  - 'insufficient_funds': not enough money to make payout
                                  #  - 'unsupported_card': invalid card
                                  #  - 'invalid_account_number'
                                  #  - 'incorrect_account_holder_name'
                                  #  - 'no_account': invalid bank account details.
                                  #  - 'account_closed|frozen': bank account has been closed|frozen
                                  #  - 'bank_ownership_changed': bank account no longer valid because of ownership change.
                                  #  - 'invalid_currency': bank does not handle this currency.
                                  #  - 'bank_account_restricted':
                                  #      - bank account does not handle payout type|amount.
                                  #      - usually because it's a savings account.
                                  #  - 'debit_not_authorized': bank account does not handle debit transactions.
                                  #  - 'could_not_process': generic problem with bank
                                  #  - 'declined': declined by bank.
PAYOUT.automatic                  #BOOL. True if created by an automated payout SCHEDULE.
STRIPE_ACCOUNT.settings.payouts CU#PAYOUTS_SETTINGS.
PAYOUTS_SETTINGS.schedule       CU#SCHEDULE. Automatically create PAYOUTs.
SCHEDULE.interval               CU#Automatic PAYOUTs frequency among 'manual' (never), 'daily', 'weekly', 'monthly'.
SCHEDULE.weekly_anchor          CU#STR ('monday', etc.). Day of the week if SCHEDULE.interval 'weekly'.
SCHEDULE.monthly_anchor         CU#NUM. Days of the month if SCHEDULE.interval 'monthly'.
                                  #If 29-31 and month has fewer days, send on last day.
SCHEDULE.delay_days             CU#Wait for INT days before any CHARGE is included in automatic PAYOUTs.
PAYOUTS_SETTINGS.               CU#BOOL (def: true for Express, false for Custom accounts).
 debit_negative_balances          #Automatically create negative PAYOUT if BALANCE is negative.

DISPUTE ==>                       #When a CUSTOMER questions our CHARGE. Also called "chargebacks".
                                  #Possible causes:
                                  #  - they did not authorize it (e.g. done with a stolen card)
                                  #  - they did not receive the product/service
                                  #  - wrong billing (e.g. transaction sent twice to bank)
                                  #  - technical (e.g. expired authorization)
                                  #Should prefer using the Dashboard instead of API for this.
                                  #Payment method-specific:
                                  #  - card*: provider-specific and reason-specific, but usually 120 days
                                  #  - alipay, wechat: only for problem with quality of goods
                                  #  - 'ach_credit_transfer', 'bancontact', 'eps', 'giropay', 'ideal', 'multibanco', 'p24', 'sofort': no DISPUTE possible
                                  #  - 'sepa_debit':
                                  #     - within 13 weeks
                                  #        - after 8 weeks, only fo authorization/fraud reasons
                                  #     - includes customer-side issues like account frozen or not enough funds
                                  #     - fee a little lower (10 USD instead of 15 USD)
                                  #  - 'ach_debit':
                                  #     - cannot provide EVIDENCE
                                  #     - within 60 days

DISPUTE AND REFUNDS ==>           #  - cannot create a REFUND on a disputed CHARGE
                                  #  - cannot create a DISPUTE on a refunded CHARGE
                                  #  - should avoid refunding through a different way than Stripe:
                                  #     - it would allow disputing both the refund and the charge, and losing both

HIGH DISPUTE RATE ==>             #If for one month, for >5000 USD, either:
                                  #  - dispute rate (won or lost) >1% per CHARGE count
                                  #  - dispute rate lost to fraud >8% per CHARGE money, for >10 transactions
                                  #Then:
                                  #  - Stripe (and competitors) might cancel account
                                  #  - Credit card companies might:
                                  #     - charge higher dispute fees
                                  #     - blacklist wth TMFs (Terminated Merchant Files)
                                  #        - MATCH is Mastercard's one and is commonly used
                                  #         - can happen too if:
                                  #            - failing to protect payment method data or comply to PCI

DISPUTE LIFECYCLE ==>             #Created by Stripe on CUSTOMER's request
                                  #  - EVENT 'charge.dispute.created'
                                  #  - status 'needs_response'
                                  #Money is taken from STRIPE_ACCOUNT:
                                  #  - CHARGE is provisionally refunded
                                  #  - 15 USD fee
                                  #  - EVENT 'charge.dispute.funds_withdrawn'
                                  #Should either:
                                  #  - submit DISPUTE.evidence
                                  #     - usually banks only allow one submission.
                                  #     - status 'under_review'
                                  #     - should still submit even if customer withdrew dispute
                                  #     - often takes around 10 weeks to get answer.
                                  #  - "accept" a DISPUTE
                                  #     - i.e. no submission
                                  #Either:
                                  #  - status 'lost'
                                  #  - status 'won'
                                  #     - both CHARGE refund and fee are reversed if bank resolves in favor
                                  #       (which happens only 20-40% of times)
                                  #        - fee is actually charged by credit card company, but reversed by Stripe
                                  #        - EVENT 'charge.dispute.funds_reinstated'
                                  #Email is sent with summary
                                  #  - EVENT 'charge.dispute.closed'

INQUIRIES/RETRIEVALS ==>          #  - DISPUTE early stage where money was not taken from STRIPE_ACCOUNT yet
                                  #  - only done by American Express and Discover, not Mastercard nor Visa
                                  #  - should handle like a normal DISPUTE
                                  #  - status 'warning_needs_response', 'warning_under_review' and either 'warning_closed' or 'charge_refunded'
                                  #     - equivalent of 'needs_response', 'under_review', 'won' or 'lost'

WITHDRAWAL ==>                    #Should always talk to customer, and try to fix the problem and make them withdraw the dispute.
                                  #If customer wants to withdraw, should consider approving dispute and charging them again instead
                                  #  - like this, faster process (no need to wait 10 weeks to settle the dispute)

AVOIDING DISPUTES ==>             #Billing:
                                  #  - using 3D secure makes us less liable to disputes.
                                  #  - provide a good CHARGE.statement_descriptor
                                  #  - send receipts
                                  #  - should always collect: name, email, card CVC, full billing address (including ZIP), shipping address (if different)
                                  #  - use STRIPE_ACCOUNT.settings.card_payments.decline_on.cvc_failure true
                                  #  - do not refund on a different credit card / bank account (to avoid frauds)
                                  #Fraudulent-looking payments:
                                  #  - should delay it:
                                  #     - delay payment by capturing it (CHARGE.capture)
                                  #     - delay shipping by 1-2 days
                                  #  - if already accepted, should refund it
                                  #Identification:
                                  #  - auth with social media accounts or bank services (e.g. BankID)
                                  #Communication:
                                  #  - good communication / customer service
                                  #  - clear refund and cancellation policies
                                  #     - should be agreed on (as part of terms of service)
                                  #     - should be presented in full text (not just link)
                                  #  - reach out to user through the contact information verified by bank
                                  #Shipping:
                                  #  - choose delivery service that:
                                  #     - requires signature on delivery
                                  #     - has good tracking
                                  #  - ship to the exact same address provided by customer
                                  #  - be fast to ship, and communicate delays
                                  #  - save shipping labels
                                  #  - protective packaging

TYPICAL FRAUDS ==>                #  - stolen cards
                                  #  - overpayment / payout scam:
                                  #     - using a stolen card, make a purchase
                                  #     - then ask seller to make a purchase back (e.g. pay for their favorite freight company)
                                  #     - then cancel first purchase
                                  #  - alternative refunds:
                                  #     - using a stolen card, make a purchase but pays too much
                                  #     - then ask seller to make a refund
                                  #     - then cancel first purchase
                                  #  - marketplace: when running a marketplace and one user pays another, but product/service is not delivered
                                  #  - card testing:
                                  #     - trying a stolen card on a website that allow very small purchases (e.g.  donations)
                                  #     - should prevent with CAPTCHAs or rate limiting

SIGNS OF FRAUD ==>                #  - fake information (emails, phone numbers)
                                  #  - different information across purchases (emails, payment methods, shipping|billing addresses, IP)
                                  #  - scripted communication
                                  #     - should google sentences
                                  #  - expensive or very frequent purchases
                                  #  - splitting purchases (including refunds) over several payment methods
                                  #  - asking us to process payment manually (so that IP address / responsability is ours)
                                  #  - amount higher than required
                                  #  - wrong CVC
                                  #  - addresses mismatches
                                  #     - shipping vs billing vs card|bank account's owner (AVS check)
                                  #     - often legitimate (gift purchase), but raise warnings
                                  #  - change of address after purchase
                                  #  - ask for different shipping

GET /disputes[/ID]
POST /disputes/ID                 #
POST /disputes/ID/close           #Change DISPUTE.status from 'needs_response' to 'lost'
STRIPE.disputes.
 retrieve|list|update|close()     #
DISPUTE.charge                    #CHARGE.id
DISPUTE.amount                    #PMONEY. Disputed amount.
                                  #Usually CHARGE.amount, but could be slightly different because of:
                                  #  - currency fluctuation
                                  #  - only part of charge is disputed
                                  #  - CHARGE was transmitted to bank several times (or similar)
DISPUTE.balance_transactions      #BALANCE_TRANSACTION_ARR of money taken (and potentially eventually reversed) from STRIPE_ACCOUNT.
DISPUTE.status                    #STR among:
                                  #  - '[warning_]needs_response'
                                  #  - '[warning_]under_review'
                                  #  - 'won', 'lost', 'warning_closed' or 'charge_refunded'
DISPUTE.is_charge_refundable      #BOOL. True if inquiry/retrieval and can still refund.
DISPUTE.reason                    #STR given by customer among:
                                  #  - credit_not_processed:
                                  #     - product/service was returned/canceled, but not refund was done
                                  #     - should show that refund was done, or that not eligible for refund
                                  #  - subscription_canceled:
                                  #     - same for subscription
                                  #  - duplicate:
                                  #     - charged multiple times for same product/service
                                  #     - should show that each charge was for different product/service
                                  #  - fraudulent:
                                  #     - did not authorize (e.g. card stolen)
                                  #     - should show customer was the real customer (e.g. IP address, shipping)
                                  #  - product_not_received
                                  #     - product/service was never received
                                  #     - should show product was shipped, or that service was used
                                  #  - product_unacceptable
                                  #     - product defective or not as described
                                  #     - should show product delivered as described at time of purchase
                                  #  - unrecognized: does not recognize payment on bank statement
                                  #  - general: others
                                  #  - bank_cannot_process
                                  #  - check_returned
                                  #  - customer_initiated
                                  #  - debit_not_authorized
                                  #  - incorrect_account_details
                                  #  - insufficient_funds
DISPUTE.submit                  RU#BOOL (def: true). Whether to submit DISPUTE.evidence to the bank.
DISPUTE.evidence_details          #EVIDENCE_DETAILS. Submission information.
EVIDENCE_DETAILS.submission_count #NUM of submissions.
EVIDENCE_DETAILS.has_evidence     #BOOL if DISPUTE.evidence exists.
EVIDENCE_DETAILS.due_by           #DATE_NUM. Deadline to submit. Usually 1-3 weeks.
                                  #null if bank does not allow submitting evidences at all.
EVIDENCE_DETAILS.past_due         #BOOL. True if evidence submission happened after EVIDENCE_DETAILS.due_by.
DISPUTE.evidence                 U#EVIDENCE. Evidence to solve dispute in our favor.
                                  #Best practices for evidences:
                                  #  - self-contained, i.e. no dynamic content nor external links.
                                  #     - include screenshots instead
                                  #  - contain all possible information, but not more.
                                  #     - avoid lengthy explanation.
                                  #     - only include email conversation if relevant, and redact it to only the relevant parts.
                                  #  - neutral tone.
                                  #  - highlight important info
                                  #     - e.g.  arrows, bold font
                                  #     - crop
                                  #  - should be big enough and printable in black/white because sometimes transmitted over fax
                                  #     - >=12 point font size
                                  #     - no colors highlighting
                                  #     - A4 portrait
EVIDENCE.customer_name            #STR
EVIDENCE.customer_email_address   #'EMAIL'
EVIDENCE.customer_purchase_ip     #'IP'
EVIDENCE.customer_signature       #FILE.id.
EVIDENCE.customer_communication   #FILE.id. Any relevant communication with the customer.
                                  #For example, proof customer received or liked the product/service.
EVIDENCE.access_activity_log      #STR. Server logs showing customer accessing the product/service.
                                  #Should include IP addresses, timestamps, and any activity.
EVIDENCE.receipt                  #FILE.id.
EVIDENCE.service_documentation    #FILE.id proving product/service was provided to customer, such as a contract.
EVIDENCE.service_date             #'DATE' (human-readable format) of product/service start.
EVIDENCE.product_description      #STR.
EVIDENCE.billing_address          #STR. The billing address provided by the customer.
EVIDENCE.shipping_address         #STR.
EVIDENCE.shipping_date            #'DATE' (human-readable format)
EVIDENCE.shipping_carrier         #'STR,...'. Delivery services such as 'Fedex' or 'UPS'.
EVIDENCE.shipping_documentation   #FILE.id proving product was shipped. Should show the full shipping address.
EVIDENCE.shipping_tracking_number #'STR,...'
EVIDENCE.refund_policy            #FILE.id. Our subscription refund policy, as shown to the customer.
EVIDENCE.refund_policy_disclosure #STR explaining how/when the refund policy was shown to the customer.
EVIDNCE.refund_refusal_explanation#STR explaning why customer is not entitled to a refund.
EVIDENCE.cancellation_policy      #Same as refund_policy, but for subcription cancellation.
EVIDENCE.
 cancellation_policy_disclosure   #Same as refund_* but for subscription cancellation.
EVIDENCE.cancellation_rebuttal    #STR explaining why the customer's subscription was not canceled.
EVIDENCE.duplicate_charge_id      #STR of previous CHARGE (for a charge disputed as duplicate)
EVIDENCE.
 duplicate_charge_explanation     #STR explaining why a charge is not a duplicate (for a charge disputed as duplicate)
EVIDENCE.                         #FILE.id uniquely identifying the charge, such as a receipt or shipping label.
 duplicate_charge_documentation   #Should be paired with a similar document from the disputed payment that proves the two payments are separate.
EVIDENCE.uncategorized_file       #Any other FILE.id
EVIDENCE.uncategorized_text       #Any other STR.

CUSTOMER                          #Entity/person paying.
                                  #Can be used to re-use information accross payments:
                                  #  - SOURCE (only if SOURCE.usage 'reusable')
                                  #  - email
                                  #  - addresses
                                  #  - invoice info
GET /customers[/ID]
POST /customers[/ID]
DELETE /customers/ID              #
STRIPE.customers.
 retrieve|list|create|update|del()#
POST /payment_methods/ID/attach
POST /payment_methods/ID/detach   #Set|unset CUSTOMER.sources and PAYMENT_METHOD.customer. No payload
STRIPE.paymentMethods.
 attach|detach()
CUSTOMER.sources                  #TOKEN|SOURCE|BANK_ACCOUNT|CARD_LIST
                                  #Emits EVENTs 'payment_method.attached|detached' on change.
                                  #Should only use for reusable SOURCEs. Should avoid TOKENs.
CUSTOMER.default_source          U#TOKEN|SOURCE|BANK_ACCOUNT|CARD
CUSTOMER.source                RCU#Change default_source.
                                  #Also creates the TOKEN|SOURCE|BANK_ACCOUNT|CARD.
CUSTOMER.payment_method         RC#PAYMENT_METHOD.id
                                  #Like CUSTOMER.source but for already created PAYMENT_METHOD
SOURCE.customer                  ?#CUSTOMER.id. Only if attached
CUSTOMER.email                  CU#'EMAIL'.
?email=STR                        #
CUSTOMER.description            CU#STR.
CUSTOMER.shipping               CU#BILL_DETAILS.
CUSTOMER.tax_info               CU#TAX_INFO. Shown on invoices. Verified by Stripe.
TAX_INFO.tax_id                   #Tax ID number.
TAX_INFO.type                     #Tax ID number type.
CUSTOMER.tax_info_verification    #TAX_INFO_VERIF
TAX_INFO_VERIF.status             #From 'pending' to 'verified' or 'unverified'.
TAX_INFO_VERIF.verified_name      #STR. Customer's official tax name.
CUSTOMER.account_balance        CU#MONEY to add|substract to next INVOICE.
                                  #Negative means we owe CUSTOMER, positive CUSTOMER owes us.
CUSTOMER.delinquent               #BOOL. True if latest invoice unpaid by due date, or failed (if recurring).
CUSTOMER.invoice_prefix         CU#STR prefixed to INVOICE.number
CUSTOMER.invoice_settings       CU#INVOICE_SETTINGS
INVOICE_SETTINGS.custom_fields
INVOICE_SETTINGS.footer          U#Like INVOICE.*
CUSTOMER.subscriptions            #SUBSCRIPTION_LIST
CUSTOMER.coupon                RCU#COUPON.id. Creates CUSTOMER.discount.
                                  #Only applied on recurring CHARGEs.
CUSTOMER.discount                 #DISCOUNT

GET /sources/ID
POST /sources[/ID]
STRIPE.sources.
 retrieve|create|update()         #
SOURCE                            #Payment method of a CUSTOMER.

SOURCE TYPES ==>                  #Differences between source types:
                                  #  - how customer inputs the information (SOURCE.TYPE)
                                  #     - including client-side integration
                                  #  - sync vs async CHARGEs (see CHARGE webhooks above)
                                  #  - SOURCE.flow (how customer add payment method)
                                  #  - SOURCE.usage (whether can be re-used)
                                  #  - how long payment takes
                                  #  - how refunds are done (see above)
                                  #  - how disputes are done (see above)
                                  #  - country availability (see below)
                                  #  - currencies availability (see above)
                                  #  - how testing is done
                                  #Credit card companies controlled (banks are clients):
                                  #  - 'card':
                                  #      - credit card
                                  #      - fast
                                  #      - can use CARD entity
                                  #  - 'card' with CARD.wallet.type:
                                  #      - digital wallets
                                  #      - put money on it usually with credit card
                                  #      - includes personal information and address, i.e. more convenient
                                  #      - some allow using with smartphone NFC
                                  #      - includes (CARD.wallet.type) 'visa_checkout', 'masterpass', 'amex_express_checkout'
                                  #  - 'card_present': credit card payment down from a physical terminal
                                  #Bank-consortium controlled:
                                  #  - 'bank_account':
                                  #      - generic TYPE for all bank accounts payments
                                  #      - create|update only
                                  #  - 'ach_debit', 'ach_credit_transfer':
                                  #      - US
                                  #      - with bank account number and routing number
                                  #      - can take few days
                                  #      - more automated than credit card, because do not need to re-authorize
                                  #         - i.e. more convenient but needs more trust
                                  #      - charge amount can be paid in separate/several payments
                                  #      - 'debit' vs 'credit':
                                  #         - 'debit': we pull money from customer's account
                                  #            - more automated but more trust to other account
                                  #         - 'credit': customer puts money to our account
                                  #      - 'debit' requires bank account to verified:
                                  #         - done either through:
                                  #            - using another paid tool Plaid: https://stripe.com/docs/ach#using-plaid
                                  #               - instant
                                  #            - otherwise, 2 microdeposits are made by Stripe to account
                                  #               - bank statement is "AMTS:" followed by a secret number
                                  #               - customer needs to tell us those two numbers
                                  #               - we then call POST /customers/ID/sources/ID/verify
                                  #         - can use BANK_ACCOUNT entity
                                  #  - 'sepa_debit':
                                  #     - similar to ACH but for EU
                                  #     - uses IBAN (bank account number)
                                  #     - user must fill and electronically sign a form with their information (MANDATE)
                                  #     - can take up to 14 days
                                  #  - 'sofort': Germany
                                  #  - 'giropay': Germany
                                  #  - 'eps': Austria
                                  #  - 'ideal': Netherlands (>50% market share)
                                  #  - 'bancontact': Belgium (>30% market share)
                                  #  - 'p24': Poland
                                  #  - 'multibanco': Portugal
                                  #     - requires action by customer, i.e. might take up to 7 days
                                  #Payment provider companies controlled:
                                  #  - 'stripe_account': Connect
                                  #  - 'alipay' (called 'alipay_account' on create|update): Alibab, China (>50% market share)
                                  #     - terms of service are too restrictive, should not use
                                  #  - 'wechat': China
                                  #Tech companies controlled:
                                  #  - 'card' with CARD.wallet.type: 'apple_pay', 'google_pay', 'microsoft_pay', 'samsung_pay'
                                  #Not supported:
                                  #  - wire transfer:
                                  #     - directly use bank underlying system (SWIFT)
                                  #     - instant
                                  #     - can only send payments, not receive
                                  #     - less requirements on authentication, i.e. might more anonymous, more fraud-friendly
                                  #     - no possible refunds
                                  #     - high fees
                                  #  - Western Union (and similar companies):
                                  #     - use own underlying systems, not banks
                                  #     - fast
                                  #     - withdraw at physical locations
                                  #     - more anonymous, more fraud-friendly
                                  #     - no possible refunds
                                  #     - high fees
SOURCE TYPES AVAILABILITY ==>     #Right away: 'card', 'stripe_account', 'apple_pay', 'google_pay', 'microsoft_pay', 'samsung_pay'
                                  #Must have processed payments for 30 days: 'sepa_debit'
                                  #Behind feature toggles in dashboard settings, and agree to additional terms of service:
                                  #  - 'ach*'
                                  #  - 'visa_checkout', 'masterpass', 'amex_express_checkout'
                                  #  - 'sofort', 'giropay', 'eps', 'ideal', 'bancontact', 'multibanco', 'p24'
                                  #  - 'alipay', 'wechat'
SOURCE TYPES COUNTRIES ==>        #Countries availability:
                                  #  - US (destination): 'ach*'
                                  #  - Germany|Austria|Netherlands|Belgium|Italy|Spain (customer), US/EU (destination): 'sofort'
                                  #  - Germany (customer), US/EU (destination): 'giropay'
                                  #  - Netherlands (customer), US/EU (destination): 'ideal'
                                  #  - Austria (customer), US/EU (destination): 'eps'
                                  #  - Belgium (customer), US/EU (destination): 'bancontact'
                                  #  - Poland (customer), US/EU (destination): 'p24'
                                  #  - Portugal (customer), EU (destination): 'multibanco'
                                  #  - China (customer): 'alipay'
SOURCE.type 'TYPE'              *C#Specific payment method (see values above)
SOURCE.TYPE                       #SOURCE_DETAILS. Each TYPE has its own attributes, but some are shared.
                                  #On update, should use SOURCE.* not SOURCE.TYPE.*
SOURCE.card*.number            *RC#STR. Credit card number.
SOURCE.card*.name              RCU#STR. Cardholder name.
SOURCE.card*.exp_month         *CU#INT. Card's expiration month (1-12)
SOURCE.card*.exp_year          *CU#INT. Card's expiration year.
SOURCE.card*.cvc                RC#INT. Card's CVC (back number)
SOURCE.card*.address_*         RCU#STR. Like ADDRESS.*
SOURCE.card*.address_zip       RCU#STR. ZIP or postal code.
SOURCE.card*.brand                #STR. Card brand among:
                                  #  - 'visa', 'mastercard': main two ones (75% market share)
                                  #  - 'unionpay': any Chinese credit card (15% market share)
                                  #  - 'amex' (5-10% market share)
                                  #  - 'jcb', 'diners', 'discover' (few % market share)
                                  #  - 'unknown'
SOURCE.card*.funding              #STR. Card funding type among:
                                  #  - 'debit': money is withdrawn from account
                                  #  - 'credit': money is borrowed
                                  #  - 'prepaid': money has already been prepaid. Does not require bank account.
                                  #  - 'unknown'
SOURCE.card.CHECK_TYPE_check      #Checks performed by the bank.
                                  #Even when 'failed', bank still sometimes allows payment.
                                  #  - however this might indicate fraud, so we should not use this SOURCE
                                  #Can be:
                                  #  - 'unchecked' (pending)
                                  #  - 'pass' or 'failed'
                                  #  - 'unavailable' (could not check)
                                  #CHECK_TYPE are:
                                  #  - cvc: CVC. Guarantees customer physically possesses the card.
                                  #  - address_line1 and address_postal_code ("AVS check"):
                                  #     - address matches the credit card owner's
                                  #     - does not work in every country
                                  #     - might not necessarily be an issue, e.g. when making a gift, billing address might differ. Or people might have moved.
                                  #Requires SOURCE.card*.cvc|address_line1|address_postal_code to be provided.
STRIPE_ACCOUNT.settings.
 card_payments.decline_on       CU#DECLINE_ON. Automatically declines CHARGES when SOURCE.card.*_check is 'failed'.
DECLINE_ON.avs_failure          CU#BOOL. For SOURCE.card.address_*_check
DECLINE_ON.cvc_failure          CU#BOOL. For SOURCE.card.cvc_check
SOURCE.card.three_d_secure       ?#OBJ:
                                  #  - supported BOOL
SOURCE.card.wallet               ?#WALLET. Digital wallet.
WALLET.type                       #STR. 'amex_express_checkout', 'apple_pay', 'google_pay', 'microsoft_pay', 'masterpass', 'samsung_pay', 'visa_checkout'
WALLET.dynamic_last4              #STR. Last four digits of the device account number.
WALLET.TYPE.name                  #STR. Owner's name. For 'masterpass', 'visa_checkout' only
WALLET.TYPE.email                 #STR. For 'masterpass', 'visa_checkout' only
WALLET.TYPE.billing_address       #ADDRESS. For 'masterpass', 'visa_checkout' only.
WALLET.TYPE.shipping_address      #ADDRESS. For 'masterpass', 'visa_checkout' only.
SOURCE.card_present.read_method   #STR. How card was read among:
                                  #  - 'contact_emv'
                                  #  - 'contactless_emv'
                                  #  - 'magnetic_stripe_fallback'
                                  #  - 'magnetic_stripe_track2'
                                  #  - 'contactless_magstripe_mode'
SOURCE.card_present.emv_auth_data #STR. Authorization response cryptogram.
SOURCE.card_present.receipt       #CARD_RECEIPT. Fields to print on receipts. Only required for EMV transactions.
CARD_RECEIPT.
 application_cryptogram           #STR. EMV tag 9F26, cryptogram generated by the integrated circuit
CARD_RECEIPT.
 application_preferred_name       #STR. Mnenomic of the Application Identifier.
CARD_RECEIPT.authorization_code   #STR. Identifier for this transaction.
CARD_RECEIPT.
 authorization_response_code      #STR. EMV tag 8A. A code returned by the card issuer.
CARD_RECEIPT.
 cardholder_verification_method   #STR. How the cardholder verified ownership of the card.
CARD_RECEIPT.
 dedicated_file_name              #STR. EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
CARD_RECEIPT.
 terminal_verification_results    #STR. The outcome of a series of EMV functions performed by the card reader.
CARD_RECEIPT.
 transaction_status_information   #STR. An indication of various EMV functions performed during the transaction.
SOURC.card_present.generated_card?#CARD.id
SOURCE.card*|ach_debit|sepa_debit.
 last4                            #STR. Last four digits of the bank account or card number.
SOURCE.card*|ach*|sepa_debit|
 alipay.fingerprint               #STR. Checksum|fingerprint of the bank account or card number.
SOURCE.bank_account|card*|
 ach_debit|sofort|sepa_debit.
 country                        *C#Bank account or credit card's COUNTRY.
SOURCE.bank_account.
 account_holder_name           RCU#STR. Name of the owner (person/business).
SOURCE.bank_account|ach*.
 routing_number                  C#STR. Bank account's routing transit number.
SOURCE.bank_account|ach_debit.
 account_holder_type            CU#STR. Whether bank account holder is 'individual' or 'company'.
SOURCE.bank_account|
 ach_credit_transfer.
 account_number                *RC#STR. Account number to transfer funds to.
SOURCE.ach_credit_transfer.
 swift_code                       #STR. Bank's SWIFT code.
SOURCE.
 ach*|bancontact|giropay|sofort.
 bank_name                        #STR. E.g. 'WELLS FARGO'
SOURCE.bancontact|eps|giropay|
 p24|sofort|ideal.verified_name   #STR. Owner's full name according to provider.
SOURCE.bancontact|sofort|ideal.
 iban_last4                       #STR. Last four characters of the IBAN.
SOURCE.
 bancontact|giropay|sofort|ideal.
 bic                              #STR. Bank Identifier Code.
SOURCE.bancontact|giropay|sofort|
 sepa_debit.bank_code             #STR. Code of the bank.
SOURCE.multibanco|p24.reference   #STR. Unique reference for this payment.
                                  #For multibanco, should be communicated to user as they will need it to initiate payment.
                                  #For p24, should be communicated to user as they help them finding the payment transaction.
SOURCE.multibanco.entity          #STR. Entity number.
                                  #Should be communicated to user as they will need it to initiate payment.
SOURCE.ideal.bank                C#STR. Bank name among 'abn_amro', 'asn_bank', 'bunq', 'handelsbanken', 'ing', 'knab',
                                  #'moneyou', 'rabobank', 'regiobank', 'sns_bank', 'triodos_bank', 'van_lanschot'.
                                  #If not provided, user is redirected to a page asking for it.
SOURCE.bancontact|sofort.        C#STR. Customer's preferred language among 'en', 'de', 'fr', 'nl' or (sofort only) 'es', 'it', 'pl'.
 preferred_language               #Used to redirect user to correct language.
SOURCE.sepa_debit.sofort         C#Reuse a 'sofort' SOURCE2.id
SOURCE.sepa_debit.mandate_url     #'URL' to download copy of MANDATE
SOURCE.sepa_debit.
 mandate_reference                #STR. MANDATE reference to communicate to customer.
SOURCE.alipay_account           RC#STR. A token returned by Stripe representing the user’s Alipay account details.
SOURCE.alipay.username            #STR.
SOURCE.alipay.reusable            #BOOL. False if it's one-time payment method.
SOURCE.alipay.used                #BOOL. True if it's one-time payment method and has been used.
SOURCE.alipay.payment_amount      #PMONEY if one-time payment.
SOURCE.wechat.qr_code_url         #QR code as 'URL' with weixin:// protocol, to redirect users to.
SOURCE.masterpass.cart_id       *C#Unique STR of the current purchase session
SOURC.masterpass.transaction_id *C#Passed after redirect as query variable ?oauth_verifier
SOURC.card.visa_checkout.callid *C#Passed by Visa Checkout library as FUNC callback

SOURCE.token                    RC#TOKEN.id. Use TOKEN to populate properties.
SOURCE.usage                     C#Either:
                                  #  - must be 'reusable': for SOURCE.type 'card*', 'ach*'
                                  #  - must be 'single_use': for all others SOURCE.type
                                  #  - can be either: 'alipay', 'sepa_debit'
                                  #For 'reusable', must attach SOURCE to CUSTOMER before first usage, to be able to re-use it.
SOURCE.amount                    C#PMONEY if SOURCE.usage 'single_use'
SOURCE.owner                   RCU#BILL_DETAILS
                                  #Strongly recommended to decrease DISPUTEs and faciliate payment UX flow.

SOURCE.status                     #STR among:
                                  #  - 'pending': SOURCE not ready for payment yet
                                  #  - 'chargeable': can charge SOURCE (EVENT 'source.chargeable')
                                  #  - 'failed': cannot charge SOURCE anymore (EVENT 'source.failed')
                                  #  - 'canceled':
                                  #      - if SOURCE.usage 'single_use' (EVENT 'source.canceled')
                                  #      - cannot charge SOURCE anymore
                                  #      - done if:
                                  #         - SOURCE.status takes more than 6 hours to become 'chargeable'
                                  #         - CHARGE is not created within 1 hour after being 'chargeable'
                                  #  - 'consumed': already charged, either:
                                  #      - with SOURCE.usage 'single_use'
                                  #      - with SOURCE.usage 'reusable' if not attached to a CUSTOMER
                                  #Should always use those EVENTs except for SOURCE.type 'card*'
SOURCE.flow                      C#How the SOURCE is authenticated among:
                                  #  - 'none':
                                  #      - for SOURCE.type:
                                  #         - 'card*' (no 3D secure): nothing required
                                  #         - 'sepa_debit': through a MANDATE
                                  #         - 'card' with 'amex_express_checkout': SMS code
                                  #         - 'card' with 'masterpass', 'visa_checkout': redirect
                                  #         - 'card' with 'apple_pay', 'google_pay', 'microsoft_pay', 'samsung_pay':
                                  #           either through mobile SDK or using W3C Payment Request API on web
                                  #  - 'redirect':
                                  #      - redirected to payment provider's URL, then payment provider redirects back
                                  #      - for SOURCE.type 'card*' (3D secure), 'ach_debit', 'alipay', 'bancontact', 'eps', 'giropay', 'ideal', 'p24', 'wechat', 'sofort', 'multibanco'
                                  #  - 'code_verification': a code is sent (e.g. by SMS)
                                  #      - for SOURCE.type 'ach_debit'
                                  #  - 'receiver': requires other separate action from customer, such as logging in to their account and initiate the payment
                                  #      - for SOURCE.type:
                                  #         - 'ach_credit_transfer'
                                  #         - 'multibanco' (can also use 'redirect instead')
W3C PAYMENT REQUEST API ==>       #Users save payment information in browser:
                                  #  - can be synced cross-device
                                  #Supported by all browsers but IE, Android browser.

SOURCE.redirect                  C#REDIRECT. If SOURCE.flow 'redirect'
                                  #For 'wechat', uses SOURCE.wechat.qr_code_url instead
REDIRECT.url                      #'URL' of payment provider to redirect user to.
REDIRECT.return_url              C#'URL' to redirect after successful authentication.
                                  #Will pass the following query variables:
                                  #  - client_secret STR: should be same as SOURCE.client_secret
                                  #  - source SOURCE.id
                                  #  - livemode BOOL
REDIRECT.status                   #STR among:
                                  #  - 'not_required'
                                  #  - 'pending'
                                  #  - 'succeeded' or 'failed'
REDIRECT.failure_reason           #If REDIRECT.status 'failed', STR among:
                                  #  - 'user_abort': customer aborted
                                  #  - 'declined': authentication failed
                                  #  - 'processing_error': technical error
SOURCE.client_secret              #STR. ?client_secret is added to REDIRECT.return_url redirection.
                                  #Should match SOURCE.client_secret to ensure this is the same customer.
SOURCE.code_verification          #CODE_VERIF. If SOURCE.flow 'code_verification'.
CODE_VERIF.attempts_remaining     #NUM of attempts left to authenticate SOURCE.
CODE_VERIF.status                 #STR among:
                                  #  - 'pending': code sent
                                  #  - 'succeeded' or 'failed'
SOURCE.receiver                  C#RECEIVER. If SOURCE.flow 'receiver'.
RECEIVER.address                  #STR. Destination to send funds to. Should communicate to customer.
RECEIVER.amount_*                 #Updated by Stripe using CHARGE.*
RECEIVER.amount_charged           #CHARGE.amount
RECEIVER.amount_returned          #MONEY (negative) left to be paid by CUSTOMER.
                                  #Once 0, SOURCE.status goes from 'chargeable' to 'pending' (ready for re-use)
RECEIVER.amount_received          #amount_charged + amount_returned
RECEIVR.refund_attributes_method C#How to notify CUSTOMER of refunds among:
                                  #  - 'email': sent by Stripe
                                  #  - 'manual': EVENT 'source.refund_attributes_required' then must communicate ourselves
                                  #  - 'none' (def): no EVENT and we must communicate ourselves
RECEIVER.refund_attributes_status #Refund status among:
                                  #  - 'missing': none requested
                                  #  - 'requested'
                                  #  - 'available': ready for CUSTOMER to withdraw
SOURCE.mandate                 RCU#MANDATE. Form filled and signed by CUSTOMER with their information and consent. For 'sepa_debit'
                                  #Also a standard text must be shown to CUSTOMER (seen here: https://stripe.com/docs/sources/sepa-debit#prerequisite)
MANDATE.amount                  CU#PMONEY. Defaults to full amount.
MANDATE.interval                CU#Payment recurrence among:
                                  #  - 'one_time'
                                  #  - 'scheduled' (regular interval)
                                  #  - 'variable' (variable interval)
MANDATE.notification_method     CU#How to notify CUSTOMER of payment (including recurring one):
                                  #  - 'email': email sent to CUSTOMER
                                  #  - 'manual': emit an EVENT 'source.mandate_notification' and we must communicate to CUSTOMER ourselves
                                  #  - 'none' (def): no EVENT and we must communicate ourselves
                                  #When doing 'manual'|'none':
                                  #  - should be sent within 14 days.
                                  #  - must include:
                                  #     - SOURCE.sepa_debit.last4|mandate_reference
                                  #     - MANDATE.amount
                                  #     - SEPA creditor identifier (must ask our own bank online for it)
                                  #     - contact information
MANDATE.acceptance              CU#ACCEPTANCE
ACCEPTANCE.status              *CU#Either 'accepted' or 'refused'
ACCEPTANCE.type                 CU#Whether this is done 'online' or 'offline'.
ACCEPTANCE.online|offline       CU#ACCEPTANCE_ONLINE|OFFLINE. Depends on ACCEPTANCE.type
ACCEPTANCE[_ONLINE].date       *CU#DATE_NUM
ACCEPTANCE[_ONLINE].ip         *CU#'IP'
ACCEPTANCE[_ONLINE].user_agent *CU#'USER_AGENT'
ACCEPTANCE_OFFLN.contact_email *CU#'EMAIL' to contact us if a copy is requested.

SOURCE RENEWAL ==>                #For some countries, Stripe automatically updates SOURCE.* when information is updated (e.g. new card).
                                  #EVENTs:
                                  #  - 'customer.source.updated' and 'payment_method.card_automatically_updated': emitted on change
                                  #  - 'customer.source.expiring': SOURCE will expire at end of month

SOURCE TESTING ==>                #'sepa_debit':
                                  #  - SOURCE.TYPE.iban:
                                  #     - 'DE89370400440532013000': success CHARGE
                                  #     - 'DE62370400440532013001': failed CHARGE
                                  #     - 'DE35370400440532013002': success CHARGE but creates DISPUTE
                                  #'ach_credit_transfer':
                                  #  - SOURCE.owner.email 'amount_AMOUNT@example.com'
                                  #'multibanco':
                                  #  - SOURCE.owner.email 'ANYTHING+fill_never|now@ANY_DOMAIN' (user never initiate, or does it right away)
                                  #'sofort':
                                  #  - SOURCE.owner.name: 'succeeding_charge|failing_charge'
                                  #'ach_debit':
                                  #  - SOURCE.type.routing_number: 110000000
                                  #  - SOURCE.type.account_number:
                                  #     - 000123456789: success
                                  #     - 000111111116: failure upon use
                                  #     - 000111111113: account closed
                                  #     - 000222222227: insufficient funds
                                  #     - 000333333335: debit not authorized
                                  #     - 000444444440: invalid currency
                                  #  - PAYLOAD.amounts (verify endpoint):
                                  #     - [32, 45]: success
                                  #     - [any other]: failure
                                  #'amex_express_checkout':
                                  #  - username: test_user
                                  #  - password: password
                                  #  - access code: 123456
                                  #'masterpass': https://developer.mastercard.com/page/masterpass-sandbox-testing-guidelines#new-web-experience
                                  #'visa checkout': https://developer.visa.com/capabilities/visa_checkout/docs#adding_visa_checkout_to_your_web_page

GET /payment_methods/ID
GET /payment_methods?
 customer=CUSTOMER.id&type=STR
POST /payment_methods[/ID]        #
STRIPE.paymentMethods.
 retrieve|list|create|update()    #
PAYMENT_METHOD                    #Credit card SOURCE + CUSTOMER
PAYMENT_METHOD.type             *C#Like SOURCE.*
PAYMENT_METHOD.card[_present]   CU#Like SOURCE.*
PAYMENT_METHOD.TYPE.generated_from#GENERATED
GENERATED.charge                  #CHARGE.id
GENERATED.payment_method_details  #Like SOURCE.*
PAYMENT_METHOD.billing_details   U#BILL_DETAILS
PAYMENT_METHOD.customer           #CUSTOMER.id

GET /customers/ID/sources/ID
GET /customers/ID/sources?object=
 card&customer=ID
POST /customers/ID/sources[/ID]
DELETE /customers/ID/sources/ID   #
STRIPE.sources.list|retrieve|
 create|update|deleteSource()     #
CARD                              #Similar to PAYMENT_METHOD.
CARD.*                            #Same properties as SOURCE.card
CARD.*_check                      #Same as CARD.*
CARD.tokenization_method          #Same as WALLET.type
CARD.dynamic_last4                #Same as WALLET.dynamic_last4
CARD.account                      #STRIPE_ACCOUNT.id (Connect)
CARD.customer                     #CUSTOMER.id (not Connect) (not if CARD.recipent)
CARD.recipient                    #CUSTOMER.id (not Connect) (not if CARD.customer)
CARD.available_payout_methods     #Available PAYOUT.method as STR_ARR of 'standard', 'instant'

GET /customers/ID/sources/ID
GET /customers/ID/sources?object=
 bank_account&customer=ID
POST /customers/ID/sources[/ID]
DELETE /customers/ID/sources/ID   #
POST
 /customers/ID/sources/ID/verify  #Set BANK_ACCOUNT.status to 'verified'
                                  #PAYLOAD is { amounts NUM_ARR } where NUM_ARR are the two secrets from customers (see above)
STRIPE.sources.list|retrieve|
 create|update|delete|
 verifySource()                   #
BANK_ACCOUNT                      #ach_debit SOURCE + CUSTOMER.
BANK_ACCOUNT.*                    #Same properties as SOURCE.ach_debit|bank_account
BANK_ACCOUNT.account              #STRIPE_ACCOUNT.id (Connect)
BANK_ACCOUNT.customer             #CUSTOMER.id (not Connect)
BANK_ACCOUNT.status               #STR among:
                                  #  - 'new': just created
                                  #  - 'validated': Stripe validates it exists. Next step is to verify.
                                  #  - 'verified': either Plaid validates it exists, or we manually use POST /customers/ID/sources/ID/verify
                                  #  - 'verification_failed': bank denies it exists. Will not be usable until updated.
                                  #  - 'errored': a previous transfer failed. Will not be usable until updated.
                                  #EVENT 'customer.source.updated' is emitted when 'verified' or 'verification_failed'

GET /accounts/ID/external_accounts
 /ID
GET /accounts/ID/external_accounts
 ?object=bank_account|card
POST /accounts/ID/
 external_accounts[/ID]
DELETE /accounts/ID/
 external_accounts/ID
STRIPE.accounts.retrieve|list|
 create|update|
 deleteExternalAccount()          #
EXTERNAL_ACCOUNT                  #Same as SOURCE|CARD|BANK_ACCOUNT, but for STRIPE_ACCOUNT (PAYOUT) and Connect.
                                  #BANK_ACCOUNT verification (BANK_ACCOUNT.status) not run.

GET /tokens/ID
POST /tokens
STRIPE.tokens.retrieve|create()   #
TOKEN                             #Representation of a SOURCE|CARD|BANK_ACCOUNT.
                                  #Goal is to avoid leaking those information by using a TOKEN instead.
TOKEN.used                        #BOOL. One-time usage. Expires after few minutes.
TOKEN.type                        #One of:
                                  #  - 'pii': TOKEN.pii
                                  #  - 'account': TOKEN.account
                                  #  - 'card': TOKEN.card + TOKEN.customer
                                  #  - 'bank_account': TOKEN.bank_account + TOKEN.customer
TOKEN.pii                       RC#OBJ: id_number STR
                                  #Personally Identifiable Information.
TOKEN.account                   RC#STRIPE_ACCOUNT except:
                                  #  - only business_type, company and individual
                                  #  - also tos_shown_and_accepted BOOL
                                  #  - ATTR_provided BOOL -> ATTR STR
                                  #  - no *.details|status
                                  #  - no invididual.relationship|requirements
TOKEN.card                       C#Same as SOURCE.card
TOKEN.bank_account               C#Same as SOURCE.bank_account
TOKEN.customer                  RC#CUSTOMER.id
TOKEN.client_ip                   #'IP'

GET /checkout/sessions/ID
POST /checkout/sessions           #
STRIPE.checkout.sessions.
 retrieve|create()                #
SESSION                           #Checkout session
checkout.session.completed        #'EVENT_TYPE' when a Checkout Session has been successfully completed.
SESSION.success_url             *C#string The URL the customer will be directed to after a successful payment.
SESSION.cancel_url              *C#string The URL the customer will be directed to if they decide to go back to your website.
SESSION.client_reference_id      C#string A unique string to reference the Checkout Session.
                                  #This can be a customer ID, a cart ID, or similar.
                                  #It is included in the checkout.session.completed webhook and can be used to fulfill the purchase.
SESSION.customer                 C#CUSTOMER.id
SESSION.customer_email           C#string The email address used to create the customer object.
SESSION.display_items             #DISPLAY_ITEM_ARR The line items, plans, or SKUs that were purchased by the customer.
DISPLAY_ITEM.amount               #PMONEY
DISPLAY_ITEM.quantity             #NUM
DISPLAY_ITEM.type                 #STR, including 'custom'
DISPLAY_ITEM.custom               #OBJ metadata
SESSION.line_items              RC#LINE_ITEM_ARR:
                                  #  - only amount, quantity, description
                                  #  - also attributes: name STR, images 'URL'_ARR
SESSION.locale                   C#string The IETF language tag of the locale Checkout is displayed in. If blank or auto, the browser's locale is used.
SESSION.payment_intent            #PINTENT.id Only if SKUs or line items were provided.
SESSION.payment_intent_data      C#PINTENT with only: application_fee_amount, capture_method, description, on_behalf_of, receipt_email, shipping, statement_descriptor, transfer_data
SESSION.payment_method_types    *C#array containing strings The list of payment method types (e.g. card) that this Checkout Session is allowed to use.
SESSION.subscription              #SUBSCRIPTION.id Only if one or more plans were provided.
SESSION.subscription_data        C#SUBSCRIPTION with only trial_end, trial_period_days, items SUBSCRIPTION_ITEM_ARR (with only plan|quantity)
SESSION.                        *C#Specify whether Checkout should collect the customer's billing address.
 billing_address_collection       #If set to required, Checkout will always collect the customer's billing address.
                                  #If left blank or set to auto Checkout will only collect the billing address when necessary.

GET /invoices[/ID]
POST /invoices[/ID]
DELETE /invoices/ID               #
POST /invoices/ID/finalize        #From INVOICE.status 'draft' to 'open'.
                                  #Payload: invoice, auto_advance.
POST /invoices/ID/send            #Send INVOICE by email. Noop in test mode.
POST /invoices/ID/pay             #Set INVOICE.paid true
                                  #Payload: invoice, source, forgive, paid_out_of_band
STRIPE.invoices.retrieve|list|
 create|update|del|
 finalizeInvoice|send|pay()       #
invoice.finalized                 #'EVENT_TYPE' when a draft invoice is finalized and updated to be an open invoice.
invoice.marked_uncollectible      #'EVENT_TYPE' when an invoice is marked uncollectible.
invoice.payment_failed            #'EVENT_TYPE' when an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.
invoice.payment_succeeded         #'EVENT_TYPE' when an invoice payment attempt succeeds.
invoice.sent                      #'EVENT_TYPE' when an invoice email is sent out.
invoice.upcoming                  #'EVENT_TYPE' X number of days (depends on subscription settings) before a subscription is scheduled to create an invoice that is automatically charged.
invoice.voided                    #'EVENT_TYPE' when an invoice is voided.
PAYLOAD.forgive                   #BOOL. In cases where the source used to pay the invoice has insufficient funds, passing forgive=true controls whether a charge should be attempted for the full amount
                                  #available on the source, up to the amount to fully pay the invoice.
                                  #This effectively forgives the difference between the amount available on the source and the amount due.
                                  #Passing forgive=false will fail the charge if the source hasn't been pre-funded with the right amount.
                                  #An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the
                                  #difference.
PAYLOAD.paid_out_of_band          #BOOL. representing whether an invoice is paid outside of Stripe. This will result in no charge being made.
POST /invoices/ID/void            #Set INVOICE.status to 'void'
POST /invoices/ID/
 mark_uncollectible               #Set INVOICE.status from 'open' to 'uncollectible'
STRIPE.invoices.
 void|markUncollectible()         #
INVOICE                           #Invoice, i.e. details of what a CUSTOMER should pay.
INVOICE.days_until_due         RCU#Like SUBSCRIPTION.*
INVOICE.amount_due                #integer Final amount due at this time for this invoice.
                                  #If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0.
                                  #If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account.
                                  #The charge that gets generated for the invoice will be for the amount specified in amount_due.
INVOICE.amount_paid               #integer The amount, in cents, that was paid.
INVOICE.amount_remaining          #integer The amount remaining, in cents, that is due.
INVOICE.application_fee_amount  CU#integer The fee in cents that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
INVOICE.attempt_count             #positive integer or zero Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.
                                  #Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count.
                                  #In other words, manual payment attempts after the first attempt do not affect the retry schedule.
INVOICE.attempted                 #boolean Whether an attempt has been made to pay the invoice.
                                  #An invoice is not attempted until 1 hour after the invoice.created webhook, for example, so you might not want to display that invoice as unpaid to your users.
INVOICE.auto_advance            CU#boolean Controls whether Stripe will perform automatic collection of the invoice.
                                  #When false, the invoice's state will not automatically advance without an explicit action.
INVOICE.billing                  C#string Either charge_automatically, or send_invoice.
                                  #When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer.
                                  #When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
?billing=STR                      #
INVOICE.billing_reason            #string Indicates the reason why the invoice was created.
                                  #subscription_cycle indicates an invoice created by a subscription advancing into a new period.
                                  #subscription_create indicates an invoice created due to creating a subscription.
                                  #subscription_update indicates an invoice created due to updating a subscription.
                                  #subscription is set for all old invoices to indicate either a change to a subscription or a period advancement.
                                  #manual is set for all invoices unrelated to a subscription (for example: created via the invoice editor).
                                  #The upcoming value is reserved for simulated invoices per the upcoming invoice endpoint.
                                  #subscription_threshold indicates an invoice created due to a billing threshold being reached.
INVOICE.charge                    #CHARGE.id
INVOICE.custom_fields           CU#CUSTOM_FIELD_ARR. Custom fields displayed on the invoice.
CUSTOM_FIELD.name                C#string The name of the custom field.
CUSTOM_FIELD.value               C#string The value of the custom field.
INVOICE.customer                  #CUSTOMER.id
?customer=CUSTOMER.id             #
INVOICE.default_source          CU#SOURCE|BANK_ACCOUNT|CARD.id ID of the default payment source for the invoice.
                                  #It must belong to the customer associated with the invoice and be in a chargeable state.
                                  #If not set, defaults to the subscription's default source, if any, or to the customer's default source.
INVOICE.description             CU#string An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo' in the Dashboard.
INVOICE.discount                  #DISCOUNT
INVOICE.due_date                CU#timestamp The date on which payment for this invoice is due. This value will be null for invoices where billing=charge_automatically.
?due_date=CMP_FILTER              #
INVOICE.ending_balance            #integer Ending customer balance after the invoice is finalized.
                                  #Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice.
                                  #If the invoice has not been finalized yet, this will be null.
INVOICE.footer                  CU#string Footer displayed on the invoice.
INVOICE.hosted_invoice_url        #string The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
INVOICE.invoice_pdf               #string The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
INVOICE.lines                     #LINE_ITEM_LIST The individual line items that make up the invoice.
                                  #lines is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
INVOICE.next_payment_attempt      #timestamp The time at which payment will next be attempted. This value will be null for invoices where billing=send_invoice.
INVOICE.number                    #string A unique, identifying string that appears on emails sent to the customer for this invoice.
                                  #This starts with the customer's unique invoice_prefix if it is specified.
INVOICE.paid                      #boolean Whether payment was successfully collected for this invoice.
                                  #An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
INVOICE.payment_intent            #PINTENT. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice.
                                  #Note that voiding an invoice will cancel the PaymentIntent.
INVOICE.period_end                #timestamp End of the usage period during which invoice items were added to this invoice.
INVOICE.period_start              #timestamp Start of the usage period during which invoice items were added to this invoice.
INVOICE.receipt_number            #string This is the transaction number that appears on email receipts sent for this invoice.
INVOICE.starting_balance          #integer Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
INVOICE.statement_descriptor    CU#string Extra information about an invoice for the customer's credit card statement.
INVOICE.status                    #string The status of the invoice, one of draft, open, paid, uncollectible, or void.
INVOICE.status_transitions        #STATUS_TRANSITIONS
STATUS_TRANSITIONS.finalized_at   #timestamp The time that the invoice draft was finalized.
STATUS_TRANSITIONS.
 marked_uncollectible_at          #timestamp The time that the invoice was marked uncollectible.
STATUS_TRANSITIONS.paid_at        #timestamp The time that the invoice was paid.
STATUS_TRANSITIONS.voided_at      #timestamp The time that the invoice was voided.
INVOICE.subscription             C#SUBSCRIPTION.id
?subscription=SUBSCRIPTION.id     #
INVOIC.subscription_proration_date#integer Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
INVOICE.subtotal                  #integer Total of all subscriptions, invoice items, and prorations on the invoice before any discount is applied.
INVOICE.tax_percent            RCU#The percent tax rate applied to the invoice, represented as a decimal number.
INVOICE.tax                       #integer The amount of tax included in the total, calculated from tax_percent and the subtotal. If no tax_percent is defined, this value will be null.
INVOICE.threshold_reason          #THRESHOLD_REASON. If billing_reason is set to subscription_threshold this returns more information on which threshold rules triggered the invoice.
THRESHOLD_REASON.amount_gte       #integer The total invoice amount threshold boundary if it triggered the threshold invoice.
THRESHOLD_REASON.item_reasons     #ITEM_REASON_ARR. Indicates which line items triggered a threshold invoice.
ITEM_REASON.line_item_ids         #array containing strings The IDs of the line items that triggered the threshold invoice.
ITEM_REASON.usage_gte             #integer The quantity threshold boundary that applied to the given line item.
INVOICE.total                     #integer Total after discount.
INVOICE.webhooks_delivered_at     #timestamp The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match created).
                                  #Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.

GET /invoices/ID/lines            #
STRIPE.invoices.retrieveLines()   #
LINE_ITEM                         #Single item in an INVOICE
LINE_ITEM.amount                CU#MONEY
LINE_ITEM.description           CU#string An arbitrary string attached to the object. Often useful for displaying to users.
LINE_ITEM.discountable          CU#boolean If true, discounts will apply to this line item. Always false for prorations.
LINE_ITEM.invoice_item            #INVOICE_ITEM.id
LINE_ITEM.period                CU#LINE_ITEM_PERIOD. The timespan covered by this invoice item.
LINE_ITEM_PERIOD.end            CU#integer End of the line item's billing period
LINE_ITEM_PERIOD.start          CU#integer Start of the line item's billing period
LINE_ITEM.plan                    #PLAN The plan of the subscription, if the line item is a subscription or a proration.
LINE_ITEM.proration               #boolean Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
LINE_ITEM.quantity              CU#integer Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
LINE_ITEM.subscription           C#SUBSCRIPTION.id The subscription that the invoice item pertains to, if any.
LINE_ITEM.subscription_item       #SUBSCRIPTION_ITEM.id The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
LINE_ITEM.type                    #string A string identifying the type of the source of this line item, either an invoiceitem or a subscription.

GET /customers/ID/tax_ids[/ID]
POST /customers/ID/tax_ids
DELETE /customers/ID/tax_ids/ID   #
STRIPE.taxIds.
 retrieve|list|create|del()       #
TAX_IDS                           #Tax IDs of a CUSTOMER shown on their INVOICEs
                                  #Verified by Stripe, and translated into name and address.
TAX_IDS.customer                *C#CUSTOMER.id
?customer=CUSTOMER.id             #
TAX_IDS.value                   *C#STR
TAX_IDS.country                   #COUNTRY
TAX_IDS.type                    *C#One of 'eu_vat' (EU), 'nz_gst' (New Zealand), 'au_abn' (Australia), 'unknown'.
TAX_IDS.verification              #TAX_VERIF
TAX_VERIF.status                  #From 'pending' to 'available' (success), 'unavailable' (failure) or 'unverified' (cannot check)
TAX_VERIF.verified_name           #STR
TAX_VERIF.verified_address        #STR

GET /invoices/upcoming            #See INVOICEs not created yet.
STRIPE.invoices.retrieveUpcoming()#
GET /invoices/upcoming/lines      #See LINE_ITEMs of INVOICEs not created yet.
?coupon=COUPON.id                 #
?customer=CUSTOMER.id             #
?invoice_items=OBJ_ARR            #
?invoice_items.*.amount=NUM       #
?invoice_items.*.currency=STR     #
?invoice_items.*.description=STR  #
?invoice_items.*.discountable=BOOL#
?invoice_items.*.invoiceitem=ID   #
?invoice_items.*.metadata=OBJ     #
?invoice_items.*.period.start|end
 =DATE_NUM                        #
?invoice_items.*.quantity=NUM     #
?invoice_items.*.unit_amount=NUM  #
?subscription=ID                  #
?subscription_billing_cycle_anchor
 =STR                             #
?subscription_cancel_at_period_end
 =BOOL                            #
?subscription_cancel_now=BOOL     #
?subscription_items=OBJ_ARR       #
?subscription_items.*.id=ID       #
?subscription_items.*.
 billing_thresholds.usage_gte=NUM #
?subscription_items.*.clear_usage=
 BOOL                             #
?subscription_items.*.deleted=BOOL#
?subscription_items.*.metadata=OBJ#
?subscription_items.*.plan=ID     #
?subscription_items.*.quantity=NUM#
?subscription_prorate=BOOL        #
?subscription_proration_date=
 DATE_NUM                         #
?subscription_tax_percent=BOOL    #
?subscription_trial_end=BOOL      #
?subscription_trial_from_plan=BOOL#

GET /invoiceitems[/ID]
POST /invoiceitems[/ID]
DELETE /invoiceitems/ID           #
STRIPE.invoiceItems.
 retrieve|list|create|update|del()#
INVOICE_ITEM                      #Like LINE_ITEM, but done in bulk.
INVOICE_ITEM                      #Same properties as LINE_ITEM, with extra fields:
INVOICE_ITEM.invoice             C#INVOICE.id
?invoice=INVOICE.id               #
?pending=BOOL                     #Filter by INVOICE undefined
INVOICE_ITEM.customer             #CUSTOMER.id
?customer=CUSTOMER.id             #
INVOICE_ITEM.date                 #DATE_NUM
INVOICE_ITEM.unit_amount        CU#NUM. Unit Amount (in the currency specified) of the invoice item.

GET /subscriptions[/ID]
POST /subscriptions[/ID]
DELETE /subscriptions/ID          #
STRIPE.subscriptions.
 list|retrieve|create|update|del()#
customer.
 subscription.trial_will_end      #'EVENT_TYPE' three days before a subscription's trial period is scheduled to end, or when a trial is ended immediately (using trial_end=now).
SUBSCRIPTION                      #Recurring CHARGE, either as a single PLAN, or several (using SUBSCRIPTION_ITEMs)
SUBSCRIPTION.default_source
SUBSCRIPTION.billing            CU#Like INVOICE.*
SUBSCRIPTION.customer
SUBSCRIPTION.discount             #Like INVOICE.*
?customer=CUSTOMER.id
?billing=STR                      #
SUBSCRIPTION.coupon            RCU#The code of the coupon to apply to this subscription.
                                  #A coupon applied to a subscription will only affect invoices created for that particular subscription.
SUBSCRIPTION.items              CU#SUBSCRIPTION_ITEM_LIST
                                  #On update:
                                  #  - no subscription
                                  #  - also:
                                  #     - clear_usage BOOL: Delete all usage for a given subscription item. Allowed only when deleted is set to true and the current plan's usage_type is metered.
                                  #     - deleted BOOL: delete the specified item.
SUBSCRIPTION.prorate           RCU#Boolean (defaults to true) telling us whether to credit for unused time when the billing cycle changes (e.g. when switching plans, resetting billing_cycle_anchor=now,
                                  #or starting a trial), or if an item's quantity changes. If false, the anchor period will be free (similar to a trial) and no proration adjustments will be created.
SUBSCRIPTION.proration_date     RU#If set, the proration will be calculated as though the subscription was updated at the given time.
                                  #This can be used to apply exactly the same proration that was previewed with upcoming invoice endpoint.
                                  #It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration
                                  #calculations.
SUBSCRIPTION.tax_percent       RCU#A non-negative decimal (with at most four decimal places) between 0 and 100.
                                  #This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period.
                                  #For example, a plan which charges $10/month with a tax_percent of 20.0 will charge $12 per invoice.
                                  #To unset a previously-set value, pass an empty string.
SUBSCRIPTION.latest_invoice       #INVOICE.id The most recent invoice this subscription has generated.
SUBSCRIPTION.plan                 #PLAN Only set if the subscription contains a single plan.
?plan=PLAN.id                     #
SUBSCRIPTION.quantity             #integer The quantity of the plan to which the customer is subscribed.
                                  #For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly.
                                  #Only set if the subscription contains a single plan.
SUBSCRIPTION.status               #string Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.
                                  #For billing=charge_automatically a subscription moves into incomplete if the initial payment attempt fails.
                                  #A subscription in this state can only have metadata and default_source updated.
                                  #Once the first invoice is paid, the subscription moves into an active state.
                                  #If the first invoice is not paid within 23 hours, the subscription transitions to incomplete_expired.
                                  #This is a terminal state, the open invoice will be voided and no further invoices will be generated.
                                  #A subscription that is currently in a trial period is trialing and moves to active when the trial period is over.
                                  #If subscription billing=charge_automatically it becomes past_due when payment to renew it fails and canceled or unpaid (depending on your subscriptions settings) when
                                  #Stripe has exhausted all payment retry attempts.
                                  #If subscription billing=send_invoice it becomes past_due when its invoice is not paid by the due date, and canceled or unpaid if it is still not paid by an additional
                                  #deadline after that.
                                  #Note that when a subscription has a status of unpaid, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed).
                                  #After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
?status=STR                       #
SUBSCRIPTION.                   CU#decimal A non-negative decimal between 0 and 100, with at most two decimal places.
 application_fee_percent          #This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
SUBSCRIPTION.
 billing_cycle_anchor           CU#timestamp Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.
SUBSCRIPTION.billing_thresholds CU#BILLING_THRESHOLDS. Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
BILLING_THRESHOLDS.amount_gte   CU#integer Monetary threshold that triggers the subscription to create an invoice
BILLING_THRESHOLDS.             CU#boolean Indicates if the billing_cycle_anchor should be reset when a threshold is reached.
 reset_billing_cycle_anchor       #If true, billing_cycle_anchor will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged.
                                  #This value may not be true if the subscription contains items with plans that have aggregate_usage=last_ever.
SUBSCRIPTION.start                #timestamp Date of the last substantial change to this subscription. For example, a change to the items array, or a change of status, will reset this timestamp.
SUBSCRIPTION.ended_at             #timestamp If the subscription has ended, the date the subscription ended.
SUBSCRIPTION.current_period_start #timestamp Start of the current period that the subscription has been invoiced for.
?current_period_start=CMP_FILTER  #
SUBSCRIPTION.current_period_end   #timestamp End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
?current_period_end=CMP_FILTER    #
SUBSCRIPTION.trial_start          #timestamp If the subscription has a trial, the beginning of that trial.
SUBSCRIPTION.trial_end          CU#timestamp If the subscription has a trial, the end of that trial.
SUBSCRIPTION.trial_from_plan   RCU#Indicates if a plan's trial_period_days should be applied to the subscription.
                                  #Setting trial_end per subscription is preferred, and this defaults to false.
                                  #Setting this flag to true together with trial_end is not allowed.
SUBSCRIPTION.trial_period_days  RC#Integer representing the number of trial period days before the customer is charged for the first time.
                                  #This will always overwrite any trials that might apply via a subscribed plan.
SUBSCRIPTION.days_until_due     CU#integer Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where billing=charge_automatically.
SUBSCRIPTION.                   CU#boolean If the subscription has been canceled with the at_period_end flag set to true, cancel_at_period_end on the subscription will be true.
 cancel_at_period_end             #You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
SUBSCRIPTION.canceled_at          #timestamp If the subscription has been canceled, the date of that cancellation.
                                  #If the subscription was canceled with cancel_at_period_end, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription
                                  #period when the subscription is automatically moved to a canceled state.

GET /subscription_items[/ID]
POST /subscription_items[/ID]
DELETE /subscription_items/ID     #Abstraction of one or several PLANs, used by a complex SUBSCRIPTION.
STRIPE.subscriptionItems.
 list|retrieve|create|update|del()#
SUBSCRIPTION_ITEM.subscription  *C#SUBSCRIPTION.id
?subscription=SUBSCRIPTION.id     #
SUBSCRIPTION_ITEM.plan|quantity|
 billing_thresholds             CU#Like SUBSCRIPTION.*
SUBSCRIPTION_ITEM.prorate|
 proration_date                RCU#Like SUBSCRIPTION.*

GET /plans[/ID]
POST /plans[/ID]
DELETE /plans/ID                  #
STRIPE.plans.
 list|retrieve|create|update|del()#
PLAN                              #Pricing plan|scheme.
PLAN.active                     CU#boolean Whether the plan is currently available for new subscriptions.
?active=BOOL                      #
PLAN.aggregate_usage             C#string Specifies a usage aggregation strategy for plans of usage_type=metered.
                                  #Allowed values are sum for summing up all usage during a period, last_during_period for picking the last usage record reported within a period, last_ever for picking
                                  #the last usage record ever (across period bounds) or max which picks the usage record with the maximum reported usage during a period. Defaults to sum.
PLAN.amount                      C#PMONEY to be charged on the interval specified.
PLAN.billing_scheme              C#string Describes how to compute the price per period.
                                  #Either per_unit or tiered.
                                  #per_unit indicates that the fixed amount (specified in amount) will be charged per unit in quantity (for plans with usage_type=licensed), or per unit of total usage
                                  #(for plans with usage_type=metered).
                                  #tiered indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.
PLAN.interval                   *C#string One of day, week, month or year. The frequency with which a subscription should be billed.
PLAN.interval_count              C#positive integer The number of intervals (specified in the interval property) between subscription billings.
                                  #For example, interval=month and interval_count=3 bills every 3 months.
PLAN.nickname                   CU#string A brief description of the plan, hidden from customers.
PLAN.product                   *CU#PRODUCT.id The product whose pricing this plan determines.
?product=PRODUCT.id               #
PLAN.tiers                       C#TIER_ARR. Each element represents a pricing tier. This parameter requires billing_scheme to be set to tiered. See also the documentation for billing_scheme.
TIER.flat_amount                  #integer Price for the entire tier.
TIER.unit_amount                  #integer Per unit price for units relevant to the tier.
TIER.up_to                        #integer Up to and including to this quantity will be contained in the tier.
PLAN.tiers_mode                  C#string Defines if the tiering price should be graduated or volume based.
                                  #In volume-based tiering, the maximum quantity within a period determines the per unit price, in graduated tiering pricing can successively change as the quantity grows.
PLAN.transform_usage             C#TRANSFORM_USAGE. Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with tiers.
TRANSFORM_USAGE.divide_by         #integer Divide usage by this number.
TRANSFORM_USAGE.round             #string After division, either round the result up or down.
PLAN.trial_period_days          CU#positive integer Default number of trial days when subscribing a customer to this plan using trial_from_plan=true.
PLAN.usage_type                  C#string Configures how the quantity per period should be determined, can be either metered or licensed.
                                  #licensed will automatically bill the quantity set for a plan when adding it to a subscription, metered will aggregate the total usage based on usage records.
                                  #Defaults to licensed.

POST /subscription_items/ID/
 usage_records                    #
STRIPE.usageRecords.create()      #
USAGE_RECORD                      #CUSTOMER's consumption (metered billing).
USAGE_RECORD.quantity           *C#positive integer or zero The usage quantity for the specified date.
USAGE_RECORD.subscription_item  *C#SUBSCRIPTION_ITEM.id
USAGE_RECORD.timestamp          *C#timestamp The timestamp when this usage occurred.
USAGE_RECORD.action              C#Valid values are increment (default) or set.
                                  #When using increment the specified quantity will be added to the usage at the specified timestamp.
                                  #The set action will overwrite the usage quantity at that timestamp.
                                  #If the subscription has billing thresholds, increment is the only allowed value.

GET /subscription_items/ID/
 usage_records_summaries          #
STRIPE.usageRecordSummaries.list()#
USAGE_RECORD_SUMMARY.
 subscription_item                #SUBSCRIPTION_ITEM.id
?subscription_item=ID             #
USAGE_RECORD_SUMMARY.invoice      #INVOICE.id
USAGE_RECORD_SUMMARY.total_usage  #NUM
USAGE_RECORD_SUMMARY.
 period.start|end                 #DATE_NUM

DELETE /customers|subscriptions/
 ID/discount                      #
STRIPE.customers|subscriptions.
 deleteDiscount()                 #
DISCOUNT                          #Discount|COUPON given to one CUSTOMER
DISCOUNT.coupon                   #COUPON
DISCOUNT.customer                 #CUSTOMER.id
DISCOUNT.start                    #timestamp Date that the coupon was applied.
DISCOUNT.end                      #timestamp If the coupon has a duration of repeating, the date that this discount will end. If the coupon has a duration of once or forever, this attribute will be null.
DISCOUNT.subscription             #SUBSCRIPTION.id

GET /coupons[/ID]
POST /coupons[/ID]
DELETE /coupons/ID                #
STRIPE.coupons.
 retrieve|list|create|update|del()#
COUPON                            #Discount given to many CUSTOMERs
COUPON.amount_off                C#PMONEY that will be taken off the subtotal of any invoices for this customer.
COUPON.duration                 *C#string One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
COUPON.duration_in_months        C#positive integer If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
COUPON.max_redemptions           C#positive integer Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
COUPON.name                     CU#string Name of the coupon displayed to customers on for instance invoices or receipts.
COUPON.percent_off               C#decimal Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.
                                  #For example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
COUPON.redeem_by                 C#timestamp Date after which the coupon can no longer be redeemed.
COUPON.times_redeemed             #positive integer or zero Number of times this coupon has been applied to a customer.
COUPON.valid                      #boolean Taking account of the above properties, whether this coupon can still be applied to a customer.

GET /credit_notes[/ID]
POST /credit_notes[/ID]           #
POST /credit_notes/ID/void        #Revert a CREDIT_NOTE
STRIPE.creditNodes.retrieve|list|
 create|update|voidCreditNote()   #
CREDIT_NOTE                       #Adjustment on an already done invoice (wrong quantity, has over-charged, under-charged, etc.)
                                  #For a status=open invoice, a credit note reduces its amount_due.
                                  #For a status=paid invoice, a credit note does not affect its amount_due. Instead, it can result in any combination of the following:
                                  #  - Refund: create a new refund (using refund_amount) or link an existing refund (using refund).
                                  #  - Customer balance credit: credit the customer's balance (using credit_amount) which will be automatically applied to their next invoice when it's finalized.
                                  #  - Outside of Stripe credit: any positive value from the result of amount - refund_amount - credit_amount is represented as an “outside of Stripe” credit.
                                  #You may issue multiple credit notes for an invoice.
                                  #Each credit note will increment the invoice's pre_payment_credit_notes_amount or post_payment_credit_notes_amount depending on its status at the time of credit note
                                  #creation.
CREDIT_NOTE.amount              *C#MONEY. total amount of the credit note.
CREDIT_NOTE.credit_amount       RC#MONEY. the amount to credit the customer's balance, which will be automatically applied to their next invoice.
CREDIT_NOTE.refund_amount       RC#MONEY. the amount to refund. If set, a refund will be created for the charge associated with the invoice.
CREDIT_NOTE.refund               C#REFUND.id
CREDIT_NOTE.invoice             *C#INVOICE.id
?invoice=INVOICE.id               #
CREDIT_NOTE.customer              #CUSTOMER.id
CREDIT_NOTE.memo                CU#string Customer-facing text that appears on the credit note PDF.
CREDIT_NOTE.number                #string A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
CREDIT_NOTE.pdf                   #string The link to download the PDF of the credit note.
CREDIT_NOTE.reason               C#string Reason for issuing this credit note, one of duplicate, fraudulent, order_change, or product_unsatisfactory
CREDIT_NOTE.status                #string Status of this credit note, one of issued or void. Learn more about voiding credit notes.
CREDIT_NOTE.type                  #string Type of this credit note, one of post_payment or pre_payment.
                                  #A pre_payment credit note means it was issued when the invoice was open.
                                  #A post_payment credit note means it was issued when the invoice was paid.

GET /tax_rates[/ID]
POST /tax_rates[/ID]              #
STRIPE.taxRates.
 retrieve|list|create|update()    #
TAX_RATE                          #
TAX_RATE.percentage             *C#FLOAT (0-1)
?percentage=CMP_FILTER            #
TAX_RATE.inclusive              *C#BOOL. This specifies if the tax rate is inclusive or exclusive.
?inclusive=BOOL                   #
TAX_RATE.display_name          *CU#STR. The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
TAX_RATE.description            CU#STR. An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
TAX_RATE.jurisdiction           CU#STR. The jurisdiction for the tax rate.
TAX_RATE.active                 CU#BOOL (def: true)
?active=BOOL                      #When set to false, this tax rate cannot be applied to objects in the API, but will still be applied to subscriptions and invoices that already have it set.

EXTENSIONS ==>                    #Allow apps to do things on behalf of user's STRIPE_ACCOUNT using OAuth.
                                  #Must be registered online.
POST /oauth/[express/]authorize
?client_id=CLIENT_ID
?scope=read_write
?response_type=STR                #Those are actual URL parameters
STRIPE.oauth.authorizeUrl         #Returns '/oauth/authorize' full URL. OPTS:
 ([URL_PARAMS, ][OPTS])->'URL'    #  - express BOOL
POST /oauth/token
POST /oauth/deauthorize           #
STRIPE.oauth.token|deauthorize()  #Endpoint is 'connect.stripe.com'
STRIPE.setClientId('CLIENT_ID')
STRIPE.getClientId()->'CLIENT_ID' #
account.application.authorized    #'EVENT_TYPE' when a user authorizes an application.
account.application.deauthorized  #'EVENT_TYPE' when a user deauthorizes an application.

STRIPE_ACCOUNT                    #Stripe account.
                                  #Also used with Connect.
GET /accounts[/ID]
POST /accounts[/ID]
DELETE /accounts/ID               #
POST /accounts/ID/reject          #Flag STRIPE_ACCOUNT as suspicious by setting payouts_enabled|charges_enabled to false.
                                  #Payload: account, reason
STRIPE.accounts.retrieve|list|
 create|update|del|reject()       #
PAYLOAD.reason                    #STR. The reason for rejecting the account. Can be fraud, terms_of_service, or other.
STRIPE_ACCOUNT.type             *C#Can be 'standard', 'express', or 'custom'.
STRIPE_ACCOUNT.country           C#COUNTRY. Cannot be changed.
                                  #Must match the bank account / credit card's country.
                                  #Impacts pricing and which currency are available for payouts.
STRIPE_ACCOUNT.email            CU#STR.
STRIPE_ACCOUNT.
 business_profile               CU#BUSINESS_PROFILE. Information shown to customers.
BUSINESS_PROFILE.name           CU#STR.
BUSINESS_PROFILE.url            CU#'URL'
BUSINESS_PROFILE.support_addressCU#ADDRESS.
BUSINESS_PROFILE.support_email  CU#STR.
BUSINESS_PROFILE.support_phone  CU#STR.
BUSINESS_PROFILE.support_url    CU#'URL'
BUSINESS_PROFILE.mcc            CU#STR. Four-digits ISO 18245 describing industry.
                                  #Can be used by payment providers to enforce specific rules or taxes.
BUSINESS_PROFILE.
 product_description            CU#STR. Internal-only description of the product sold. Used by Stripe for risk and underwriting purposes.
STRIPE_ACCOUNT.business_type    CU#Either 'individual' or 'company'.
STRIPE_ACCOUNT.individual       CU#PERSON. Only if business_type 'individual'.
STRIPE_ACCOUNT.company          CU#STRIPE_COMPANY. Only if business_type 'company'. Used for verification by Stripe.
STRIPE_COMPANY.name             CU#STR. Legal name.
STRIPE_COMPANY.address          CU#ADDRESS.
STRIPE_COMPANY.phone            CU#STR.
STRIPE_COMPANY.
 directors_provided             CU#BOOL. Must be set to true once all PERSONs with RELATIONSHIP.director true have been created.
STRIPE_COMPANY.owners_provided  CU#BOOL. Must be set to true once all PERSONs with RELATIONSHIP.owner true have been created.
                                  #Automatically set by Stripe if total RELATIONSHIP.percent_ownership amounts to 1.
STRIPE_COMPANY.tax_id          RCU#Country-specific company ID.
STRIPE_COMPANY.tax_id_provided    #BOOL
STRIPE_COMPANY.
 tax_id_registrar               CU#Country-specific (Germany only) company jurisdiction .
STRIPE_COMPANY.vat_id          RCU#Country-specific company VAT number.
STRIPE_COMPANY.vat_id_provided    #BOOL
STRIPE_ACCOUNT.account_token   RCU#TOKEN.id
STRIPE_ACCOUNT.                 CU#The set of capabilities you want to unlock for this account (US only).
 requested_capabilities           #Each capability will be inactive until you have provided its specific requirements and Stripe has verified them.
                                  #An account may have some of its requested capabilities be active and some be inactive.
STRIPE_ACCOUNT.capabilities       #CAPABILITIES. A hash containing the set of capabilities that was requested for this account and their associated states.
                                  #Keys may be card_payments, legacy_payments, or platform_payments. Values may be active, inactive, or pending.
CAPABILITIES.card_payments        #string The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
CAPABILITIES.legacy_payments      #string The status of the legacy payments capability of the account.
CAPABILITIES.platform_payments    #string The status of the platform payments capability of the account, or whether your platform can process charges on behalf of the account.
STRIPE_ACCOUNT.charges_enabled    #boolean Whether the account can create live charges.
STRIPE_ACCOUNT.
 default_currency               CU#string Three-letter ISO currency code representing the default currency for the account. This must be a currency that Stripe supports in the account's country.
STRIPE_ACCOUNT.details_submitted  #boolean Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
STRIPE_ACCOUNT.external_accounts  #EXTERNAL_ACCOUNT_LIST
STRIPE_ACCOUNT.
 external_account              RCU#EXTERNAL_ACCOUNT
STRIPE_ACCOUNT.payouts_enabled    #boolean Whether Stripe can send payouts to this account.
STRIPE_ACCOUNT.requirements       #REQUIREMENTS. Information about the requirements for the account, including what information needs to be collected, and by when.
REQUIREMENTS.current_deadline     #timestamp The date the fields in currently_due must be collected by to keep payouts enabled for the account.
                                  #These fields might block payouts sooner if the next threshold is reached before these fields are collected.
REQUIREMENTS.currently_due        #array containing strings The fields that need to be collected to keep the account enabled.
                                  #If not collected by the current_deadline, these fields will appear in past_due as well, and the account will be disabled.
REQUIREMENTS.disabled_reason      #string If the account is disabled, this string describes why the account can't create charges or receive payouts.
                                  #Can be requirements.past_due, requirements.pending_verification, rejected.fraud, rejected.terms_of_service, rejected.listed, rejected.other, listed, under_review, or
                                  #other.
REQUIREMENTS.eventually_due       #array containing strings The fields that need to be collected assuming all volume thresholds are reached.
                                  #As they become required, these fields will appear in currently_due as well, and the current_deadline will be set.
REQUIREMENTS.past_due             #array containing strings The fields that weren't collected by the current_deadline. These fields need to be collected to re-enable the account.
STRIPE_ACCOUNT.settings         CU#STRIPE_SETTINGS. Account options for customizing how the account functions within Stripe.
STRIPE_SETTINGS.branding        CU#BRANDING. Customize colors/logos in receipts, invoices and Checkout.
BRANDING.icon                   CU#FILE.id. Icon logo. Square and min 128x128. JPG/PNG/GIF.
BRANDING.logo                   CU#FILE.id. Full logo. Min 128x128. Max 512KB. JPG/PNG/GIF.
BRANDING.primary_color          CU#'#CSS_HEX_COLOR'
STRIPE_SETTINGS.card_payments   CU#CARD_SETTINGS. Settings specific to card charging on the account.
CARD_SETTINGS.decline_on        CU#DECLINE_ON (see above).
STRIPE_SETTINGS.dashboard         #DASHBOARD_SETTINGS. Settings used to configure the account within the Stripe dashboard.
DASHBOARD_SETTINGS.display_name   #string The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
DASHBOARD_SETTINGS.timezone       #string The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the IANA Time Zone Database.
STRIPE_SETTINGS.payments        CU#PAYMENTS_SETTINGS (see above).
STRIPE_SETTINGS.payouts         CU#PAYOUTS_SETTINGS (see above).
STRIPE_ACCOUNT.tos_acceptance   CU#TOS_ACCEPTANCE. Details on the acceptance of the Stripe Services Agreement
TOS_ACCEPTANCE.date             CU#timestamp The Unix timestamp marking when the Stripe Services Agreement was accepted by the account representative
TOS_ACCEPTANCE.ip               CU#string The IP address from which the Stripe Services Agreement was accepted by the account representative
TOS_ACCEPTANCE.user_agent       CU#string The user agent of the browser from which the Stripe Services Agreement was accepted by the account representative

PERSON                            #Persons associated with a STRIPE_ACCOUNT.
                                  #Verified by Stripe.
GET /accounts/ID/persons[/ID]
POST /accounts/ID/persons[/ID]
DELETE /accounts/ID/persons/ID    #
STRIPE.persons.
 list|retrieve|create|udpate|del()#
PERSON.account                  CU#STRIPE_ACCOUNT.id
PERSON.address                  CU#ADDRESS
PERSON.dob                      CU#DOB.
DOB.day                           #1-31
DOB.month                         #1-12
DOB.year                          #4 digits
PERSON.first_name               CU#STR
PERSON.maiden_name              CU#STR
PERSON.last_name                CU#STR
PERSON.gender                   CU#'male' or 'female'
PERSON.email                    CU#STR
PERSON.phone                    CU#STR
PERSON.id_number               RCU#Country-specific ID number. For example social security number in US.
                                  #Can also be a PII TOKEN.id
PERSON.id_number_provided         #BOOL
PERSON.ssn_last_4              RCU#Social security number last 4 digits.
PERSON.ssn_last_4_provided        #BOOL
PERSON.relationship             CU#RELATIONSHIP to the account.
RELATIONSHIP.title              CU#STR. Job title.
RELATIONSHIP.account_opener     CU#BOOL. Whether the person opened the account.
?relationship.account_opener=BOOL #
RELATIONSHIP.owner              CU#BOOL. Whether the person is an owner of the company.
?relationship.owner=BOOL          #
RELATIONSHIP.director           CU#BOOL. Whether the person is a director of the company.
                                  #Only if STRIPE_ACCOUNT.business_type is 'company'.
                                  #Required for accounts in the EU.
?relationship.director=BOOL       #
RELATIONSHIP.percent_ownership  CU#FLOAT (0-1). Company's ownership percentage.
PERSON_VERIF.status               #From 'pending' to 'verified' or 'unverified'.
PERSON.verification             CU#PERSON_VERIF
PERSON_VERIF.details              #STR. Human-friendly failure status like 'Provided identity information could not be verified'.
PERSON_VERIF.details_code         #STR. Machine-friendly failure status: 'scan_name_mismatch', 'failed_keyed_identity', 'failed_other'.
PERSON_VERIF.document           CU#VERIF_DOC. Passport or ID card.
VERIF_DOC.front|back            CU#FILE.id
VERIF_DOC.details                 #STR. Human-friendly failure status like 'Identity document is too unclear to read'.
VERIF_DOC.details_code            #STR. Machine-friendly failure status: document_corrupt, document_failed_copy, document_not_readable, document_failed_greyscale, document_not_uploaded,
                                  #document_id_type_not_supported, document_id_country_not_supported, document_failed_other, document_fraudulent, document_invalid, document_manipulated,
                                  #document_missing_back, document_missing_front, document_photo_mismatch, document_too_large, or document_failed_test_mode.
PERSON.requirements               #Like STRIPE_ACCOUNT.requirements.
PERSON.person_token            RCU#TOKEN.id used to securely provide details to the person.


POST /accounts/ID/login_links     #
STRIPE.loginLinks.create()        #
LOGIN_LINK                        #Single-use login URL for Connect Express.
LOGIN_LINK.url                    #string The URL for the login link.

GET /transfers[/ID]
POST /transfers[/ID]              #
STRIPE.transfers.
 retrieve|list|create|update()    #
transfer.failed                   #'EVENT_TYPE' when a transfer failed.
transfer.paid                     #'EVENT_TYPE' after a transfer is paid. For Instant Payouts, the event will be sent on the next business day, although the funds should be received well beforehand.
transfer.reversed                 #'EVENT_TYPE' when a transfer is reversed, including partial reversals.
TRANSFER                          #Transfer of money from a STRIPE_ACCOUNT to another one.
TRANSFER.amount                 *C#MONEY
TRANSFER.amount_reversed          #integer Amount in cents reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
TRANSFER.balance_transaction      #BALANCE_TRANSACTION.id Balance transaction that describes the impact of this transfer on your account balance.
TRANSFER.description            CU#string An arbitrary string attached to the object. Often useful for displaying to users.
TRANSFER.destination             C#STRIPE_ACCOUNT.id
?destination=STRIPE_ACCOUNT.id    #
TRANSFER.destination_payment      #CHARGE.id If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
TRANSFER.source_transaction      C#CHARGE.id ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
TRANSFER.reversals                #TRAVERSAL_LIST
TRANSFER.reversed                 #boolean Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
TRANSFER.source_type             C#string The source balance this transfer came from. One of card or bank_account.
TRANSFER.transfer_group          C#string A string that identifies this transaction as part of a group. See the Connect documentation for details.
?transfer_group=STR               #

GET /transfers/ID/reversals[/ID]
POST /transfers/ID/reversals[/ID] #Reverting a TRANSFER.
STRIPE.transferReversals.
 list|retrieve|create|update()    #
TRAVERSAL.amount                 C#PMONEY
                                  #A positive integer in cents representing how much of this transfer to reverse.
                                  #Can only reverse up to the unreversed amount remaining of the transfer.
                                  #Partial transfer reversals are only allowed for transfers to Stripe Accounts.
                                  #Defaults to the entire transfer amount.
TRAVERSAL.description           RC#An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the Dashboard. This will be unset if you POST an empty value.
TRAVERSL.refund_application_fee RC#Like REFUND.*
TRAVERSAL.balance_transaction     #BALANCE_TRANSACTION.id Balance transaction that describes the impact on your account balance.
TRAVERSAL.
 destination_payment_refund       #CHARGE.id Linked payment refund for the transfer reversal.
TRAVERSAL.source_refund           #REFUND.id
TRAVERSAL.transfer                #TRANSFER.id

GET /application_fees[/ID]        #
STRIPE.applicationFees.
 retrieve|list()                  #
FEE                               #Cut taken from CUSTOMER of a CUSTOMER-to-CUSTOMER CHARGE.
FEE.account                       #STRIPE_ACCOUNT.id
FEE.application                   #STRIPE_ACCOUNT.id
FEE.amount                        #PMONEY
FEE.amount_refunded               #PMONEY Amount in cents refunded (can be less than the amount attribute on the fee if a partial refund was issued)
FEE.balance_transaction           #BALANCE_TRANSACTION.id Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
FEE.charge                        #CHARGE.id
?charge=CHARGE.id                 #
FEE.originating_transaction       #CHARGE|TRANSFER.id ID of the corresponding charge on the platform account, if this fee was the result of a charge using the destination parameter.
FEE.refunded                      #boolean Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
FEE.refunds                       #FEE_REFUND_LIST

GET /application_feeds/ID/
 refunds[/ID]
POST /application_feeds/ID/
 refunds[/ID]                     #Reverting a FEE.
STRIPE.applicationFeeRefunds.
 retrieve|list|create|update()    #
application_fee.refunded          #'EVENT_TYPE' when an application fee is refunded, whether from refunding a charge or from refunding the application fee directly. This includes partial refunds.
FEE_REFUND.amount                C#MONEY
FEE_REFUND.balance_transaction    #BALANCE_TRANSACTION.id
FEE_REFUND.fee                    #FEE.id

GET /topups[/ID]
POST /topups[/ID]                 #
POST /topups/ID/cancel            #From TOPUP.status 'pending' to 'canceled'.
STRIPE.topups.list|retrieve|
 create|update|cancel()           #
topup.canceled                    #'EVENT_TYPE' when a top-up is canceled.
topup.failed                      #'EVENT_TYPE' when a top-up fails.
topup.reversed                    #'EVENT_TYPE' when a top-up is reversed.
topup.succeeded                   #'EVENT_TYPE' when a top-up succeeds.
TOPUP                             #Money added to STRIPE_ACCOUNT
TOPUP.amount                    *C#MONEY Amount transferred.
?amount=CMP_FILTER                #
TOPUP.balance_transaction         #BALANCE_TRANSACTION.id. May not be specified depending on status of top-up.
TOPUP.description               CU#string An arbitrary string attached to the object. Often useful for displaying to users.
TOPUP.expected_availability_date  #integer Date the funds are expected to arrive in your Stripe account for payouts.
                                  #This factors in delays like weekends or bank holidays.
                                  #May not be specified depending on status of top-up.
TOPUP.failure_code                #string Error code explaining reason for top-up failure if available (see the errors section for a list of codes).
TOPUP.failure_message             #string Message to user further explaining reason for top-up failure if available.
TOPUP.source                     C#SOURCE For most Stripe users, the source of every top-up is a bank account. This hash is then the source object describing that bank account.
TOPUP.statement_descriptor       C#string Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
TOPUP.status                      #string The status of the top-up is either canceled, failed, pending, reversed, or succeeded.
?status=STR                       #
TOPUP.transfer_group             C#string A string that identifies this top-up as part of a group.

GET /country_specs[/ID]           #
STRIPE.countrySpecs.
 retrieve|list()                  #
COUNTRY_SPEC                      #Country-specific currency and payment information.
COUNTRY_SPEC.id                   #COUNTRY
COUNTRY_SPEC.default_currency     #string The default currency for this country. This applies to both payment methods and bank accounts.
COUNTRY_SPEC.
 supported_bank_account_currencies#OBJ. Currencies that can be accepted in the specific country (for transfers).
COUNTRY_SPEC.
 supported_payment_currencies     #array containing strings Currencies that can be accepted in the specified country (for payments).
COUNTRY_SPEC.                     #array containing strings Payment methods available in the specified country.
 supported_payment_methods        #You may need to enable some payment methods (e.g., ACH) on your account before they appear in this list.
                                  #The stripe payment method refers to charging through your platform.
COUNTRY_SPEC.
 supported_transfer_countries     #array containing strings Countries that can accept transfers from the specified country.
COUNTRY_SPEC.verification_fields  #VERIF_FIELDS. Lists the types of verification data needed to keep an account open.
VERIF_FIELDS.company|individual   #V_FIELDS.
V_FIELDS.additional               #array containing strings Additional fields which are only required for some users.
V_FIELDS.minimum                  #array containing strings Fields which every account must eventually provide.

GET /reviews[/ID]
POST /reviews/ID/approve          #Set REVIEW.open to false.
STRIPE.reviews.
 retrieve|list|approve()          #
review.closed                     #'EVENT_TYPE' when a review is closed. The review's reason field indicates why: approved, disputed, refunded, or refunded_as_fraud.
review.opened                     #'EVENT_TYPE' when a review is opened.
REVIEW                            #CHARGE pending because flagged as suspicious by Stripe Radar.
REVIEW.billing_zip                #string The ZIP or postal code of the card used, if applicable.
REVIEW.charge                     #CHARGE.id
REVIEW.closed_reason              #string The reason the review was closed, or null if it has not yet been closed. One of approved, refunded, refunded_as_fraud, or disputed.
REVIEW.ip_address                 #string The IP address where the payment originated.
REVIEW.ip_address_location        #IP_LOCATION. Information related to the location of the payment.
                                  #Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
IP_LOCATION.city                  #string The city where the payment originated.
IP_LOCATION.country               #string Two-letter ISO code representing the country where the payment originated.
IP_LOCATION.latitude              #decimal The geographic latitude where the payment originated.
IP_LOCATION.longitude             #decimal The geographic longitude where the payment originated.
IP_LOCATION.region                #string The state/county/province/region where the payment originated.
REVIEW.open                       #boolean If true, the review needs action.
REVIEW.opened_reason              #string The reason the review was opened. One of rule or manual.
REVIEW.payment_intent             #PINTENT.id
REVIEW.reason                     #string The reason the review is currently open or closed. One of rule, manual, approved, refunded, refunded_as_fraud, or disputed.
REVIEW.session                    #REVIEW_SESSION. Information related to the browsing session of the user who initiated the payment.
REVIEW_SESSION.browser            #string The browser used in this browser session (e.g., Chrome).
REVIEW_SESSION.device             #string Information about the device used for the browser session (e.g., Samsung SM-G930T).
REVIEW_SESSION.platform           #string The platform for the browser session (e.g., Macintosh).
REVIEW_SESSION.version            #string The version for the browser session (e.g., 61.0.3163.100).

GET /radar/value_lists[/ID]
POST /radar/value_lists[/ID]
DELETE /radar/value_lists/ID      #
STRIPE.radar.valueLists.
 retrieve|list|create|update|del()#
REVIEW_VALUES                     #Custom Radar rules
REVIEW_VALUES.alias            *CU#string The name of the value list for use in rules.
?alias=STR                        #
REVIEW_VALUES.created_by          #string The name or email address of the user who created this value list.
REVIEW_VALUES.item_type          C#string The type of items in the value list. One of card_fingerprint, card_bin, email, ip_address, country, string, or case_sensitive_string.
REVIEW_VALUES.list_items          #REVIEW_VALUE_LIST
?contains=STR                     #Filters by REVIEW_VALUE.value
REVIEW_VALUES.name             *CU#string The name of the value list.

GET /radar/value_list_items[/ID]?
 value_list=ID
POST /radar/value_list_items
DELETE /radar/value_list_items/ID #REVIEW_VALUES single item
STRIPE.radar.valueListItems.
 retrieve|list|create|del()       #
REVIEW_VALUE.created_by           #string The name or email address of the user who added this item to the value list.
REVIEW_VALUE.value              *C#string The value of the item.
?value=STR                        #
REVIEW_VALUE.value_list         *C#REVIEW_VALUES.id

GET /issuing/cards[/ID]
POST /issuing/cards[/ID]          #
STRIPE.issuing.cards.
 retrieve|list|create|update()    #
ISSUING_CARD                      #User-created credit cards.
ISSUING_CARD.currency
ISSUING_CARD.brand
ISSUING_CARD.exp_month
ISSUING_CARD.exp_year
ISSUING_CARD.last4
ISSUING_CARD.name                 #Same as CARD.*
?exp_month=NUM                    #
?exp_year=NUM                     #
?last4=STR                        #
?name=STR                         #
?source=SOURCE.id                 #
ISSUING_CARD.cardholder         CU#CARD_HOLDER
?cardholder=CARD_HOLDER.id        #
ISSUING_CARD.shipping            C#PRECISE_SHIPPING
ISSUING_CARD.
 authorization_controls         CU#AUTH_CONTROLS. Spending rules that give you some control over how your cards can be used. Refer to our authorizations documentation for more details.
AUTH_CONTRLS.allowed_categories CU#array Array of strings containing categories of authorizations permitted on this card.
AUTH_CONTRLS.blocked_categories CU#array Array of strings containing categories of authorizations to always decline on this card.
AUTH_CONTROLS.max_amount        CU#positive integer or zero Maximum amount allowed per authorization on this card, in the currency of the card.
                                  #Authorization amounts in a different currency will be converted to the card's currency when evaluating this control.
AUTH_CONTROLS.max_approvals     CU#positive integer or zero Maximum count of approved authorizations on this card. Counts all authorizations retroactively.
AUTH_CONTROLS.spending_limits  RCU#SPENDING_LIMIT_ARR. Limit the spending with rules based on time intervals and categories.
SPENDING_LIMIT.amount          RCU#Maximum amount allowed to spend per time interval.
SPENDING_LIMIT.interval        RCU#The time interval with which to apply this spending limit towards. Allowed values are ‘per_authorization', ‘daily', ‘weekly', ‘monthly', ‘yearly', and ‘all_time'.
SPENDING_LIMIT.categories      RCU#Array of strings containing categories on which to apply the spending limit. Leave this blank to limit all charges.
ISSUING_CARD.status             CU#string One of active, inactive, canceled, lost, stolen, or pending.
?status=STR                       #
ISSUING_CARD.type                C#string One of virtual or physical.
?type=STR                         #

GET /issuing/cards/ID/details     #
STRIPE.issuing.cards.
 retrieveDetails()                #
ISSUING_CARD_DETAILS              #Like ISSUING_CARD (same properties) but with some extra fields:
ISSUING_CARD_DETAILS.card         #ISSUING_CARD
ISSUING_CARD_DETAILS.
 cvc|exp_month|exp_year           #Like CARD.*
ISSUING_CARD_DETAILS.number       #'NUM'

GET /issuing/cardholders[/ID]
POST /issuing/cardholders[/ID]    #
STRIPE.cardholders.
 retrieve|list|create|update()    #
CARD_HOLDER                       #User of a ISSUING_CARD
CARD_HOLDER.
 authorization_controls         CU#AUTH_CONTROLS, but only allowed|blocked_categories|spending_limits
CARD_HOLDER.billing            *CU#BILL_DETAILS
CARD_HOLDER.email               CU#string The cardholder's email address.
?email=STR                        #
CARD_HOLDER.is_default          CU#boolean Whether or not this cardholder is the default cardholder.
?is_default=BOOL                  #
CARD_HOLDER.name                *C#string The cardholder's name. This will be printed on cards issued to them.
CARD_HOLDER.phone_number        CU#string The cardholder's phone number.
?phone_number=STR                 #
CARD_HOLDER.status              CU#string One of active, inactive, blocked, or pending.
?status=STR                       #
CARD_HOLDER.type                *C#string One of individual or business_entity.
?type=STR                         #

GET /issuing/transactions[/ID]
POST /issuing/transactions/ID     #
STRIPE.issuing.transactions.
 retrieve|list|update()           #
ISSUING_TRANSACTION               #BALANCE_TRANSACTION made with an ISSUING_CARD
ISSUING_TRANSACTION.amount        #MONEY
ISSUING_TRANSACTION.authorization #AUTHORIZATION.id
ISSUING_TRANSACTION.
 balance_transaction              #BALANCE_TRANSACTION.id
ISSUING_TRANSACTION.card          #ISSUING_CARD.id
?card=ISSUING_CARD.id             #
ISSUING_TRANSACTION.cardholder    #CARDHOLDER.id
?cardholder=CARDHOLDER.id         #
ISSUING_TRANSACTION.dispute       #ISSUING_DISPUTE.id
?dispute=ISSUING_DISPUTE.id       #
ISSUING_TRANSACTION.type          #string One of capture, refund, cash_withdrawal, refund_reversal, dispute, or dispute_loss.
ISSUING_TRANSACTION.merchant_data #MERCHANT_DATA

GET /authorizations[/ID]
POST /authorizations/ID           #
POST /authorizations/ID/approve   #Set approved to true.
                                  #PAYLOAD: held_amount
POST /authorizations/ID/decline   #Set approved to false.
STRIPE.issuing.authorizations.
 retrieve|list|update|approve|
 decline()                        #
issuing_authorization.request     #'EVENT_TYPE' when describes an issuing authorization Represents a synchronous request for authorization.
AUTHORIZATION                     #Pending ISSUING_TRANSACTION waiting for approval.
AUTHORIZATION.approved            #boolean Whether the authorization has been approved.
AUTHORIZATION.authorization_method#string How the card details were provided. One of keyed_in, swipe, chip, contactless, or online.
AUTHORIZATION.authorized_amount   #integer The amount that has been authorized. This will be 0 when the object is created, and increase after it has been approved.
AUTHORIZATION.authorized_currency #currency The currency that was presented to the cardholder for the authorization. Three-letter ISO currency code, in lowercase. Must be a supported currency.
AUTHORIZATION.
 pending_authorized_amount        #integer The amount the user is requesting to be authorized. This field will only be non-zero during an issuing.authorization.request webhook.
AUTHORIZATION.pending_held_amount #integer The additional amount Stripe will hold if the authorization is approved. This field will only be non-zero during an issuing.authorization.request webhook.
AUTHORIZATION.held_amount         #integer The amount the authorization is expected to be in held_currency.
                                  #When Stripe holds funds from you, this is the amount reserved for the authorization.
                                  #This will be 0 when the object is created, and increase after it has been approved.
                                  #For multi-currency transactions, held_amount can be used to determine the expected exchange rate.
AUTHORIZATION.held_currency       #currency The currency of the held amount. This will always be the card currency.
AUTHORIZATION.
 is_held_amount_controllable      #boolean
AUTHORIZATION.balance_transactions#BALANCE_TRANSACTION_ARR
AUTHORIZATION.card                #ISSUING_CARD
?card=ISSUING_CARD.id             #
AUTHORIZATION.cardholder          #CARD_HOLDER
?cardholder=CARDHOLDER.id         #
AUTHORIZATION.merchant_data       #MERCHANT_DATA. More information about the user involved in the transaction.
MERCHANT_DATA.category            #string A categorization of the seller's type of business. See our merchant categories guide for a list of possible values.
MERCHANT_DATA.name                #string Name of the seller
MERCHANT_DATA.network_id          #string Identifier assigned to the seller by the card brand
MERCHANT_DATA.*                   #ADDRESS fields, except line1|line2
AUTHORIZATION.request_history     #REQUEST_HISTORY
REQUEST_HISTORY.
 approved|authorized|held*        #Same as AUTHORIZATION.*
REQUEST_HISTORY.reason            #string One of authorization_controls, card_active, card_inactive, insufficient_funds, account_compliance_disabled, account_inactive, suspected_fraud, webhook_approved,
                                  #webhook_declined, or webhook_timeout.
AUTHORIZATION.status              #string One of pending, reversed, or closed.
?status=STR                       #
AUTHORIZATION.transactions        #ISSUING_TRANSACTION_ARR
AUTHORIZATION.verification_data   #Same as SOURCE.card.*_check, except values are 'match', 'mismatch' or 'not_provided'
AUTHORIZATION.wallet_provider     #string What, if any, digital wallet was used for this authorization. One of apple_pay, google_pay, or samsung_pay.

GET /issuing/disputes[/ID]
POST /issuing/disputes[/ID]       #
STRIPE.issuing.disputes.
 retrieve|list|create|update()    #
ISSUING_DISPUTE                   #Like DISPUTE but for an ISSUING_TRANSACTION
ISSUING_DISPUTE.amount           C#MONEY Disputed amount.
                                  #Usually the amount of the disputed_transaction, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
ISSUING_DISPUTE.
 disputed_transaction           *C#ISSUING_TRANSACTION.id
?disputed_transaction=ID          #
ISSUING_DISPUTE.evidence         C#ISSUING_EVIDENCE. Evidence related to the dispute. This hash will contain exactly one non-null value, containing an evidence object that matches its reason
ISSUING_EVIDNCE.fraudulent|other C#I_EVIDENCE.
I_EVIDENCE.dispute_explanation   C#string Brief freeform text explaining why you are disputing this transaction.
I_EVIDENCE.uncategorized_file    c#FILE.id Additional file evidence supporting your dispute.
ISSUING_DISPUTE.reason          *C#string Reason for this dispute. One of other or fraudulent.
ISSUING_DISPUTE.status            #string Current status of dispute. One of unsubmitted, under_review, won, or lost.

GET /terminal/readers[/ID]
POST /terminal/readers[/ID]
DELETE /terminal/readers/ID       #
STRIPE.terminal.readers.
 retrieve|list|create|update|del()#
READER                            #Physical credit card reader.
?operator_account=
 STRIPE_ACCOUNT.id                #
READER.registration_code        *C#A code generated by the reader used for registering to an account.
READER.device_sw_version          #string The current software version of the reader.
READER.device_type                #string Type of reader, e.g., verifone_P400 or bbpos_chipper2x.
READER.ip_address                 #string The local IP address of the reader.
READER.label                    CU#string Custom label given to the reader for easier identification.
READER.operator_account        RCU#To group objects on your platform account by connected account, set this parameter to the connected account operating your application.
READER.location                  C#LOCATION.id
?location=LOCATION.id             #
READER.serial_number              #string Serial number of the reader.
READER.status                     #string The networking status of the reader.
?status=STR                       #

GET /terminal/location[/ID]
POST /terminal/location[/ID]
DELETE /terminal/location/ID      #Group of READERs
STRIPE.terminal.locations.
 retrieve|list|create|update|del()#
?operator_account=
 STRIPE_ACCOUNT.id                #
LOCATION.address               *CU#ADDRESS.
LOCATION.display_name          *CU#string The display name of the location.
LOCATION.operator_account      RCU#Like READER.*

POST /terminal/connection_tokens  #Token to connect to READER
STRIPE.terminal.connectionTokens.
 create()                         #
CONNECTION_TOKEN.
 operator_account               RC#Like READER.*
CONNECTION_TOKEN.secret           #string Your application should pass this token to the Stripe Terminal SDK.

GET /products[/ID]
POST /products[/ID]
DELETE /products/ID               #
STRIPE.products.
 list|retrieve|create|update|del()#
PRODUCT                           #Products being sold
?ids=STR_ARR                      #
PRODUCT.active                  CU#boolean Whether the product is currently available for purchase.
?active=BOOL                      #
PRODUCT.attributes              CU#array containing strings A list of up to 5 attributes that each SKU can provide values for (e.g., ["color", "size"]). Only applicable to products of type=good.
PRODUCT.caption                 CU#string A short one-line description of the product, meant to be displayable to the customer. Only applicable to products of type=good.
PRODUCT.deactivate_on           CU#array containing strings An array of connect application identifiers that cannot purchase this product. Only applicable to products of type=good.
PRODUCT.description             CU#string The product's description, meant to be displayable to the customer. Only applicable to products of type=good.
PRODUCT.images                  CU#array containing strings A list of up to 8 URLs of images for this product, meant to be displayable to the customer. Only applicable to products of type=good.
PRODUCT.name                   *CU#string The product's name, meant to be displayable to the customer. Applicable to both service and good types.
PRODUCT.package_dimensions      CU#PACKAGE_DIMENSIONS. The dimensions of this product for shipping purposes.
                                  #A SKU associated with this product can override this value by having its own package_dimensions.
                                  #Only applicable to products of type=good.
PACKAGE_DIMENSIONS.
 height|length|weight|width       #NUM (inches)
PRODUCT.shippable               CU#boolean Whether this product is a shipped good. Only applicable to products of type=good.
?shippable=BOOL                   #
PRODUCT.statement_descriptor     U#string Extra information about a product which will appear on your customer's credit card statement.
                                  #In the case that multiple products are billed at once, the first statement descriptor will be used.
                                  #Only available on products of type=service.
PRODUCT.type                    *C#string The type of the product.
                                  #The product is either of type good, which is eligible for use with Orders and SKUs, or service, which is eligible for use with Subscriptions and Plans.
?type=STR                         #
PRODUCT.unit_label               U#string A label that represents units of this product, such as seat(s), in Stripe and on customers' receipts and invoices. Only available on products of type=service.
PRODUCT.updated                   #timestamp
PRODUCT.url                     CU#string A URL of a publicly-accessible webpage for this product. Only applicable to products of type=good.
?url=STR                          #

GET /skus[/ID]
POST /skus[/ID]
DELETE /skus/ID                   #
STRIPE.skus.
 list|retrieve|create|update|del()#
SKU                               #PRODUCT with quantity, price and other attributes.
?ids=ID_ARR                       #
SKU.active
SKU.package_dimensions          CU#Like PRODUCT.*
SKU.updated                       #Like PRODUCT.*
?active=BOOL                      #
SKU.product                    *CU#PRODUCT.id The product must be currently active.
?product=PRODUCT.id               #
SKU.attributes                  CU#OBJ. A dictionary of attributes and values for the attributes defined by the product.
                                  #If, for example, a product's attributes are ["size", "gender"], a valid SKU has the following dictionary of attributes: {"size": "Medium", "gender": "Unisex"}.
?attributes=OBJ                   #
SKU.image                       CU#string The URL of an image for this SKU, meant to be displayable to the customer.
SKU.inventory                  *CU#INVENTORY. Description of the SKU's inventory.
INVENTORY.quantity              CU#positive integer or zero The count of inventory available. Will be present if and only if type is finite.
?in_stock=BOOL                    #
INVENTORY.type                  CU#string Inventory type. Possible values are finite, bucket (not quantified), and infinite.
INVENTORY.value                 CU#string An indicator of the inventory available. Possible values are in_stock, limited, and out_of_stock. Will be present if and only if type is bucket.
SKU.price                      *CU#PMONEY. The cost of the item.

GET /orders[/ID]
POST /orders[/ID]                 #
POST /orders/ID/pay               #Add a SOURCE, i.e. initiate payment.
                                  #Payload: customer, application_fee, email, source
STRIPE.orders.
 retrieve|list|create|update|pay()#
order.payment_failed              #'EVENT_TYPE' when an order payment attempt fails.
order.payment_succeeded           #'EVENT_TYPE' when an order payment attempt succeeds.
PAYLOAD.source                    #A payment source to be charged, such as a credit card.
                                  #If you also pass a customer ID, the source must be the ID of a source belonging to the customer (e.g., a saved card).
                                  #Otherwise, if you do not pass a customer ID, the source you provide must be a token, like the ones returned by Stripe.js.
ORDER                             #SKU sold to a specific CUSTOMER
?ids=ID_ARR                       #
ORDER.amount                      #PMONEY Total amount for the order.
ORDER.amount_returned             #integer
ORDER.application                 #STRIPE_ACCOUNT.id
ORDER.application_fee             #integer
ORDER.charge                      #CHARGE.id Present if the order status is paid, fulfilled, or refunded.
ORDER.customer                   C#CUSTOMER.id
?customer=CUSTOMER.id             #
ORDER.email                      C#string The email address of the customer placing the order.
ORDER.coupon                   RCU#A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order.
ORDER.external_coupon_code        #string
ORDER.items                      C#ORDER_ITEM_ARR An order can have up to 25 items.
ORDER.returns                     #RETURN_LIST
ORDER.selected_shipping_method   U#string The shipping method that is currently selected for this order, if any.
                                  #If present, it is equal to one of the ids of shipping methods in the shipping_methods array.
                                  #At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
ORDER.shipping                  CU#SHIPPING Present if the order is for goods to be shipped.
ORDER.shipping_methods            #SHIPPING_METHOD_ARR A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
SHIPPING_METHOD.id                #string Unique identifier for the object.
SHIPPING_METHOD.amount            #PMONEY Total amount for the line item.
SHIPPING_METHOD.delivery_estimate #DELIVERY_ESTIMATE. The estimated delivery date for the given shipping method. Can be either a specific date or a range.
DELIVERY_ESTIMATE.date            #string If type is "exact", date will be the expected delivery date in the format YYYY-MM-DD.
DELIVERY_ESTIMATE.earliest        #string If type is "range", earliest will be be the earliest delivery date in the format YYYY-MM-DD.
DELIVERY_ESTIMATE.latest          #string If type is "range", latest will be the latest delivery date in the format YYYY-MM-DD.
DELIVERY_ESTIMATE.type            #string The type of estimate. Must be either "range" or "exact".
SHIPPING_METHOD.description       #string An arbitrary string attached to the object. Often useful for displaying to users.
ORDER.status                     U#string Current order status. One of created, paid, canceled, fulfilled, or returned. More details in the Orders Guide.
?status=STR                       #
ORDER.status_transitions          #STATUS_TRANSITIONS. The timestamps at which the order status was updated.
STATUS_TRANSITIONS.canceled       #timestamp
STATUS_TRANSITIONS.fulfiled       #timestamp
STATUS_TRANSITIONS.paid           #timestamp
STATUS_TRANSITIONS.returned       #timestamp
?status_transitions=OBJ_ARR       #OBJ_ARR: canceled|fulfiled|paid|returned CMP_FILTER
ORDER.updated                     #timestamp
ORDER.upstream_id                 #string The user's order ID if it is different from the Stripe order ID.
?upstream_ids=ID_ARR              #

ORDER_ITEM                        #An ORDER's single item
ORDER_ITEM.amount                 #PMONEY Total amount for the line item.
ORDER_ITEM.description            #string Description of the line item, meant to be displayable to the user (e.g., "Express shipping").
ORDER_ITEM.parent                 #DISCOUNT|SKU.id
ORDER_ITEM.quantity               #positive integer A positive integer representing the number of instances of parent that are included in this order item. Applicable/present only if type is sku.
ORDER_ITEM.type                   #string The type of line item. One of sku, tax, shipping, or discount.

POST /orders/ID/returns
STRIPE.orders.returnOrder()       #
GET /order_returns[/ID]           #
STRIPE.orderReturns.
 list|retrieve()                  #
RETURN                            #Reverting an ORDER
RETURN.amount                     #PMONEY Total amount for the returned line item.
RETURN.items                      #ORDER_ITEM_ARR
RETURN.order                      #ORDER.id
?order=ORDER.id                   #
RETURN.refund                     #REFUND.id

GET /sigma/scheduled_query_runs
 [/ID]                            #
STRIPE.sigma.scheduledQueryRuns.
 retrieve|list()                  #
SCHEDULED_QUERY                   #Stripe Sigma SQL query.
SCHEDULED_QUERY.data_load_time    #timestamp When the query was run, Sigma contained a snapshot of your Stripe data at this time.
SCHEDULED_QUERY.error             #SCHEDULED_QUERY_ERROR. If the query run was not successful, this field contains information about the failure.
SCHEDULED_QUERY_ERROR.message     #string Information about the run failure.
SCHEDULED_QUERY.file              #FILE Results of the query.
SCHEDULED_QUERY.
 result_available_until           #timestamp Time at which the result expires and is no longer available for download.
SCHEDULED_QUERY.sql               #string SQL for the query.
SCHEDULED_QUERY.status            #string The query's execution status, which will be completed for successful runs, and canceled, failed, or timed_out otherwise.
SCHEDULED_QUERY.title             #string Title of the query.

GET /reporting/report_runs[/ID]
POST /reporting/report_runs
STRIPE.reporting.reportRuns.
 retrieve|list|create()           #
reporting.report_run.failed       #'EVENT_TYPE' when a requested **ReportRun** failed to complete.
reporting.report_run.succeeded    #'EVENT_TYPE' when a requested **ReportRun** completed succesfully.
REPORT_RUN                        #
REPORT_RUN.report_type          *C#REPORT_TYPE.id
REPORT_RUN.result                 #FILE with the result of the report run (populated when `status=succeeded`).
REPORT_RUN.status                 #STR. Status of this report run. This will be `pending` when the run is initially created.
                                  #When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
                                  #Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
REPORT_RUN.succeeded_at           #DATE_NUM at which this run successfully finished (populated when `status=succeeded`).
REPORT_RUN.parameters            C#REPORT_RUN_PARAMS
REPORT_RUN_PARAMS.
 interval_start|end              C#DATE_NUM Starting|Ending timestamp of data to be included in the report run (exclusive).
REPORT_RUN_PARAMS.
 reporting_category              C#STR. Category of balance transactions to be included in the report run.
                                  #One of: advance|advance_funding|charge|charge_failure|connect_collection_transfer|connect_reserved_funds|dispute|dispute_reversal|
                                  #  fee|financing_paydown|financing_paydown_reversal|financing_payout|financing_payout_reversal|issuing_authorization_hold|issuing_authorization_release|
                                  #  issuing_transaction|network_cost|other_adjustment|partial_capture_reversal|payout|payout_reversal|platform_earning|
                                  #  platform_earning_refund|refund|refund_failure|risk_reserved_funds|tax|topup|topup_reversal|transfer|transfer_reversal
REPORT_RUN_PARAMS.columns        C#STR_ARR The set of output columns requested for inclusion in the report run.
REPORT_RUN_PARAMS.payout          #PAYOUT.id
REPORT_RUN_PARAMS.
 connected_account               C#STRIPE_ACCOUNT.id

GET /reporting/report_types[/ID]
STRIPE.reporting.reportTypes.
  retrieve|list()                 #
REPORT_TYPE                       #
REPORT_TYPE.data_available_start  #DATE_NUM. Earliest time for which this Report Type is available.
REPORT_TYPE.data_available_end    #DATE_NUM. Most recent time for which this Report Type is available.
REPORT_TYPE.default_columns       #STR_ARR. List of column names that are included by default when this Report Type gets run.
                                  #If the Report Type doesn't support the `columns` parameter, this will be null.
REPORT_TYPE.name                  #STR
REPORT_TYPE.updated               #DATE_NUM
REPORT_TYPE.version               #NUM. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.

GET /events[/ID]                  #
STRIPE.events.retrieve|list()     #
EVENT                             #Either:
                                  #  - asynchronous operation results
                                  #     - can use webhooks to handle them
                                  #  - generic API events, e.g. resource creation|update|deletion
                                  #     - webhooks not needed there
EVENT.api_version                 #'VERSION'
                                  #EVENTs are not migrated on new API versions, i.e. they keep old shape.
EVENT.type                        #'EVENT_TYPE'.
                                  #Common types are:
                                  #  - 'RESOURCE.created': on any RESOURCE creation, for account.external_account|application_fee|charge.dispute|coupon|
                                  #    customer[.discount|source|subscription]|file|invoice|invoiceitem|issuing_authorization|issuing_card|issuing_cardholder|issuing_dispute|issuing_transaction|order|
                                  #    order_return|payment_intent|payout|person|plan|product|sigma.scheduled_query_run|sku|source.transaction|topup|transfer
                                  #  - 'RESOURCE.updated': on any RESOURCE update, for account[.external_account]|application_fee.refund|charge[.dispute|refund]|coupon|
                                  #    customer[.discount|source|subscription]|invoice|invoiceitem|issuing_authorization|issuing_card|issuing_cardholder|issuing_dispute|
                                  #    issuing_transaction|order|payout|person|plan|product|reporting.report_type|sku|source.transaction|transfer
                                  #  - 'RESOURCE.deleted': on any RESOURCE deletion, for account.external_account|coupon|customer[.discount|source|subscription]|invoice|invoiceitem|person|plan|product|sku
                                  #Other types are documented in each related resource.
?type=STR                         #Can contain * for subtypes
?types=STR_ARR                    #
EVENT.data                        #EVENT_DATA
EVENT_DATA.object                 #RESOURCE that has changed (all new values)
EVENT_DATA.previous_attributes   ?#RESOURCE that has changed (only old values)
EVENT.request                     #EVENT_REQUEST. API request that started the event.
                                  #Fields are null if event was triggered by Stripe itself.
                                  #Request logs are available in the dashboard, but not in the API.
EVENT_REQUEST.id                 ?#Request-Id [S]
EVENT_REQUEST.idempotency_key    ?#Idempotency-Key [C]
EVENT.application                ?#STRIPE_ACCOUNT. Only within webhook payloads, when WEBHOOK.connect true.
EVENT.pending_webhooks            #INT. Number of webhooks still ongoing.
?delivery_success=BOOL            #

GET /webhook_endpoints[/ID]
POST /webhook_endpoints[/ID]
DELETE /webhook_endpoints/ID      #
STRIPE.webhookEndpoints.
 list|retrieve|create|update|del()#
WEBHOOK                           #Webhook firing request on EVENT creation.
                                  #Does a POST request with EVENT as JSON payload.
                                  #Should respond with 200 right away, before even processing the event.
                                  #  - otherwise tries for up to 3 days, with an exponential backoff
                                  #Webhooks might sometimes be triggered twice for same EVENT, i.e. handlers should be idempotent.
                                  #Order of webhooks (when several events are related) is not guaranteed.
WEBHOOK.url                    *CU#'URL'
WEBHOOK.enabled_events         *CU#'EVENT_TYPE'_ARR that should trigger a request. Can be '*'
WEBHOOK.api_version              C#'VERSION'
WEBHOOK.secret                    #Webhook-specific 'SECRET' only returned at creation. Used to sign the request.
                                  #Can also be found in dashboard.
WEBHOOK.connect                 RC#BOOL: whether this should be a Connect endpoint.
                                  #Connect endpoints receive events from connected accounts instead of current account.
WEBHOOK.application              ?#STRIPE_ACCOUNT.id
WEBHOOK.disabled                RU#BOOL
WEBHOOK.status                    #'enabled' or 'disabled'

SIGNATURE ==>                     #Webhooks requests must be verified to make sure they are sent by Stripe.
                                  #Using SECRET and Stripe-Signature: 't=DATE_NUM,v1=HASH' [S]:
                                  #  - HASH is SHA256('DATE_NUM.REQUEST_PAYLOAD', SECRET) in hex
                                  #  - DATE_NUM is set sometime during response sending
                                  #     - should verify that it's not too far from current time to prevent replay attacks
                                  #       (intercepting a webhook request then resending it later)
                                  #     - library use a default tolerance of 5 minutes

STRIPE[-NODE].webhooks.signature. #Throw error if webhook request is invalid.
 verifyHeader(REQUEST_PAYLOAD,    #HEADER is Stripe-Signature [S]
 HEADER, SECRET, NUM)             #SECRET is webhook secret.
                                  #NUM is tolerance (def: does not check) (see above).
STRIPE[-NODE].webhooks.           #Like verifyHeader() except:
 constructEvent(REQUEST_PAYLOAD,  #  - returns JSON.parse(REQUEST_PAYLOAD)
 HEADER, SECRET, NUM)->OBJ        #  - def tolerance is 5 minutes


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STRIPE-NODE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #6.30.1

new STRIPE-NODE
 (['API_KEY'][, 'VERSION'])
 ->STRIPE                         #

STRIPE.setApiKey('API_KEY')       #Def: none
STRIPE.setApiVersion('VERSION')   #Stripe-Version [C]. Def: none

STRIPE.RESOURCE                   #SRES
SRES.*([PATH_VAL,...]             #Call REST API endpoint.
 DATA_OBJ, OPTS|'API_KEY')        #RESOURCE:
 ->PROMISE                        #  - is camelCase, in plural
                                  #  - can be checkout|issuing|radar|reporting|sigma|terminal.*
                                  #  - e.g. 'radar.valueLists'
                                  #PATH_VAL are URL variables.
                                  #DATA_OBJ:
                                  #  - request payload (including ?PARAM)
                                  #  - DATE are serialized to DATE_NUM
                                  #OPTS:
                                  #  - api_key 'API_KEY'
                                  #  - stripe_version 'VERSION'
                                  #  - idempotency_key Idempotency-Key [C]
                                  #  - stripe_account Stripe-Account [C]
                                  #PROMISE either:
                                  #  - resolved with response OBJ, with additional:
                                  #     - lastResponse RES
                                  #        - requestId STR
                                  #  - rejected with ERROR
SRES.create(...)                  #Common method for `POST /`
SRES.list(...)                    #Common method for `GET /`
SRES.retrieve(...)                #Common method for `GET /ID` (URL param 'id')
SRES.update(...)                  #Common method for `POST /ID` (URL param 'id')
SRES.del(...)                     #Common method for `DELETE /ID` (URL param 'id')
SRES.setMetadata
 ('ID', OBJ|null[, 'API_KEY'])    #Like update({ metadata: OBJ })
 ->PROMISE:                       #OBJ can also be 'VAR', VAL
SRES.getMetadata
 ('ID'[, API_KEY])->PROMISE_OBJ   #Like retrieve().metadata

PAGINATION ==>                    #For list endpoints, returned PROMISE is also an ASYNC_ITERATOR (with each OBJ model).
                                  #The following methods are also available:
SRES.autoPagingEach               #Iterates over all, in streaming mode.
 ([FUNC(OBJ)][, FUNC2([ERROR])])  #PROMISE resolved with undefined once iteration done.
 ->PROMISE                        #FUNC() is called with each model OBJ:
                                  #  - can return false to stop iteration
                                  #  - can be async
                                  #FUNC2() is called at end
SRES.autoPagingToArray            #Iterates over all at once.
 (OPTS)->PROMISE_OBJ_ARR          #OPTS:
                                  #  - limit NUM (required) (max 10000): stops if more than that (but no errors)

ERROR.type                        #Like REST API except:
                                  #  - PascalCase and prepended with 'Stripe'
                                  #  - e.g. 'StripeConnectionError' or 'StripeAPIError'
ERROR.code|param                  #Same as REST API response if set.
ERROR.detail                      #ERROR2. When there is a sub-error
ERROR.headers                     #HEADERS_OBJ
                                  #Only set when a response (event 4**|5**) was received
ERROR.requestId STR               #Request-Id [S]
                                  #Only set when a response (event 4**|5**) was received
ERROR.statusCode NUM              #Only set when a response (event 4**|5**) was received

STRIPE.on('request', FUNC(OBJ))   #OBJ:
                                  #  - method 'METHOD'
                                  #  - path '/PATH'
                                  #  - account STRIPE_ACCOUNT.id
                                  #  - idempotency_key STR
                                  #  - api_version 'VERSION'
STRIPE.on('response', FUNC(OBJ))  #Like 'request' but also:
                                  #  - status NUM
                                  #  - request_id STR
                                  #  - elapsed NUM (in ms)

STRIPE.setHost('HOST')            #Def: 'api.stripe.com'
STRIPE.setPort('PORT')            #Def: 443
STRIPE.setProtocol('SCHEME')      #Def: 'https'

STRIPE.setMaxNetworkRetries(NUM)  #Def: 0
                                  #Retry on 409 (any method) or 5** (not POST)
                                  #If not 0, defaults Idempotency-Key [C] to a UUIDv4
                                  #Uses exponential backoff
STRIPE.setTimeout(NUM)            #Def: 2 mins (like Node.js core)
STRIPE.setAgent(AGENT)            #Def: AGENT with keepAlive true

User-Agent: Stripe/v1
 NodeBindings/{PACKAG.version} [C]#
X-Stripe-Client-User-Agent:       #Set with analytics. JSON of OBJ:
 JSON [C]                         #  - bindings_version PACKAGE.version
                                  #  - lang 'node'
                                  #  - lang_version: process.version
                                  #  - platform: process.platform
                                  #  - publisher 'stripe'
                                  #  - uname `uname -a`
                                  #  - application APPINFO
STRIPE.setAppInfo(APPINFO)        #Analytics info used in:
                                  #  - User-Agent [C] as 'NAME[/VERSION] [(URL)]' at end
                                  #  - X-Stripe-Client-User-Agent [C]
                                  #APPINFO: name, version, url, partner_id
                                  #Meant for Stripe plugins.
STRIPE.setTelemetryEnabled(true)  #Send X-Stripe-Client-Telemetry: JSON [C] of OBJ:
                                  #  - last_request_metrics OBJ_ARR:
                                  #     - request_id STR: Request-Id [S]
                                  #     - request_duration_ms NUM
                                  #Def: disabled


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FRONT-END           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STRIPE.JS ==>                     #Client-side library.
                                  #Should be loaded from Stripe CDN, not bundled, to remain PCI-compliant.
                                  #Should be on every page, as Stripe tracks user behavior for Radar fraud detection.

STRIPE ELEMENTS ==>               #Part of Stripe.js
                                  #UI inputs to:
                                  #  - retrieve payment information for several payment methods
                                  #  - translate it into a TOKEN|SOURCE|CARD|BANK_ACCOUNT (doing API calls under hood)
                                  #  - this TOKEN|SOURCE|CARD|BANK_ACCOUNT can then be used, e.g. with POST /charges
                                  #Available as React components too.
                                  #Localized.
                                  #Mobile-friendly.
                                  #Customizable UI.
                                  #Input validation and error handling.
                                  #a11y.
                                  #Browser autofill.
<card>                            #Credit card payment method
<iban>                            #bank_account or sepa_debit payment methods.
                                  #Only EU countries.
                                  #Stripe account must have processed card payments already.
<ideal>                           #iDEAL payment method.
<paymentRequestButton>            #Apple Pay + Google Pay + Microsoft Pay + Payment request API payment methods.
                                  #Hidden if none is supported by browser/device.

MOBILE SDK ==>                    #Like Stripe elements, but for native mobile

STRIPE CHECKOUT ==>               #Full payment forms/flow (including Stripe elements).

STRIPE TERMINAL ==>               #In-person mobile terminal.
