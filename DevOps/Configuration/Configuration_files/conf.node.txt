
        
   CONF  
        



ALTERNATIVES ==>                  #  - conf (preferred): more features
                                  #  - configstore

VERSION ==>                       #6.2.0

new Conf(OPTS)                    #

CONF.store                        #Arbitrary OBJ with application config data.
                                  #Is a getter/setter that persists to config file with sync I/O.
                                  #Throws on access errors
OPTS.defaultValues                #Initial OBJ for CONF.store

CONFIG LOCATION ==>               #File is at '{OPTS.cwd}/{OPTS.configName}.{OPTS.fileExtension}':
                                  #I.e. def is:
                                  #  - Linux: ~/.config/PROJECT_NAME/config.json
                                  #  - Mac: ~/Library/Preferences/PROJECT_NAME/config.json
                                  #  - Windows: ~/AppData/Roaming/PROJECT_NAME/Config/config.json
OPTS.cwd                          #STR
                                  #Def: ENV-PATHS(OPTS.projectName, {suffix: OPTS.projectSuffix}).config (see its doc)
OPTS.projectName                  #'PROJECT_NAME'.
                                  #Def: does PKG-UP (see its doc) on MODULE.parent.filename (i.e. file was called CONF) then use PACKAGE.name
OPTS.projectSuffix                #STR (def: 'nodejs')
OPTS.configName                   #'FILENAME' (def: 'config')
OPTS.fileExtension                #'EXT' (def: 'json')

CONF.size                         #Object.keys(CONFIGSTORE.all).length

CONF.get('VARR'[, VAL2])->VAL
                                  #VAL2 is default value
CONF.set('VARR', VAL)
CONF.has('VARR')->BOOL
CONF.reset('VARR',...)
CONF.delete('VARR')
CONF.clear()                      #Get|set CONF.store
CONF.set(OBJ)                     #Shallow merge. However keys can be 'VARR'

for (const [KEY, VAL] of CONF)    #CONF is ASYNC_ITERATOR

OPTS.serialize                    #FUNC(VAL)->STR (def: JSON.stringify()) used on CONF.store set
OPTS.deserialize                  #FUNC(STR)->VAL (def: JSON.parse()) used on CONF.store get

OPTS.schema                       #{ 'VAR': JSON_SCHEMA, ... }
                                  #Validates values on get|set, with AJV (see its doc) and throw error if issue.
                                  #Uses AJV useDefaults true, i.e. assigns defaults

OPTS.encryptionKey                #STDBUFFER.
                                  #Encrypt data with CRYPTO.createCipheriv('aes-256-cbc', 'PASSWORD', RANDOM)
                                  #  - RANDOM is CRYPTO.pbkdf2(STDBUFFER, RANDOM, 1e4, 32, 'sha512')

CONF.handleChange                 #Sets a listener FUNC(NEW_VAL, OLD_VAL) fired on CONF.store set, when !deepEqual(NEW_VAL, OLD_VAL)
 (FUNC2()->VAL, FUNC())->FUNC3()  #FUNC2() returns the VAL being used.
                                  #FUNC3() removes listener.
CONF.onDidAnyChange(FUNC())       #Like CONF.handleChange but triggered when any value in CONF.store changes
CONF.onDidChange('VARR', FUNC())  #Same but for specific 'VARR'

OPTS.clearInvalidConfig           #BOOL. What to do when CONF.store is syntactically invalid:
                                  #  - true (def): sets to empty object
                                  #  - false: throw

OPTS.accessPropertiesByDotNotation#BOOL (def: true)
OPTS.watch                        #BOOL
OPTS.migrations                   #
OPTS.projectVersion               #
