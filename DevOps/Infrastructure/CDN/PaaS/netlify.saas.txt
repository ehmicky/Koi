
           
   NETLIFY  
           



Site                              #Repository/project with a specific deploy configuration
Function                          #AWS Lambda function file for a specific Site


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #Either (by priority):
                                  #  - CLI flags
                                  #  - PACKAGE_ROOT/netlify.toml
                                  #  - settings through web UI at app.netlify.com, for all Sites
                                  #All paths are relative to PACKAGE_ROOT
BUILDCONF                         #Merge of CONF.build.* and CONF.context.CONTEXT.* (using ENVVAR CONTEXT|BRANCH)

WEB UI ==>                        #Allow doing that CLI is doing

~/.netlify/config.json            #STATE. Stateful config for all Sites

PACKAGE_ROOT/.netlify             #Should not be committed
PACKAGE_ROOT/.netlify/state.json  #SSTATE. Stateful config for a specific Site


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STATE.users                       #OBJ. Set by netlify login
STATE.users.USER_ID               #USER_STATE
USER_STATE.id
STATE.userId                      #USER_ID
USER_STATE.name                   #STR
USER_STATE.email                  #'EMAIL'

netlify * --auth=AUTH_TOKEN
ENVVAR NETLIFY_AUTH_TOKEN         #STR. OAuth token for authentication
USER_STATE.auth.token             #Can be generated from web UI

USER_STATE.auth.github            #Connection with GitHub (for CI)
USER_STATE.auth.github.token      #STR. OAuth token for GitHub connection
USER_STATE.auth.github.user       #STR
USER_STATE.auth.github.provider   #'github'

netlify login                     #By default, open browser to get OAuth token
--new                             #Logout first

netlify logout                    #

netlify switch                    #Login to a different account (multiple login)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SITES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.name                      #Must be defined

netlify init                      #Either:
                                  #  - netlify sites:create
                                  #  - netlify link
-m|--manual                       #Like netlify sites:create
-w|--watch                        #Wait for first deploy to complete
--force                           #Re-initialize CI hooks even if already setup

netlify sites:create              #Create a new Site
                                  #Asks for:
                                  #  - team
                                  #  - Site name
                                  #  - GitHub OAuth token
                                  #  - CONF.build.command|publish
-m|--manual                       #Instead of GitHub OAuth token, use:
                                  #  - SSH keys: for read access to repository
                                  #  - webhook URL: that git provider should POST to on change
-n|--name SITE_NAME               #
-a|--account-slug=NAME/REPO       #
-c|--with-ci                      #Initializes CI hooks

netlify sites:delete SITE_ID      #
--force                           #No confirmation prompt

netlify sites:list                #Show all Sites: name|id|url, repo, team

netlify link                      #Communicate which Site the current project is.
                                  #Def: asks between:
                                  #  - guessing from git URL
                                  #  - dropdown from list of options
                                  #  - explicit --id|--name
--id SITE_ID
--name SITE_NAME                  #

netlify unlink                    #

ENVVAR NETLIFY_SITE_ID
SSTATE.siteId                     #Set by netlify link


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              DNS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DOMAIN REGISTRATION ==>           #Done via Web UI
                                  #Can set automatic renewal (def: true)
                                  #Netlify is the WHOIS contact (i.e. privacy)

SITE_NAME.netlify.com             #Always available

CUSTOM DOMAIN NAME ==>            #Done via Web UI. Requires either:
                                  #  - using Netlify as a registrar
                                  #  - using another registrar and changing nameservers

PRIMARY DOMAIN NAME ==>           #The one used for production. Done via Web UI
                                  #Domain aliases can be created via Web UI too.

MANAGED DNS SERVER ==>            #Done via Web UI.
                                  #Allows:
                                  #  - www.* redirection
                                  #  - branch subdomains (subdomains for branch deploys)
                                  #Can add DNS records
                                  #Built on top of NS1 provider
                                  #Optional. If not managed, must either:
                                  #  - (prefered) add a CNAME from www.* to SITE_NAME.netlify.com
                                  #  - add a A record to Netlify load balancer (104.198.14.52)

www.*                             #Automatically redirects to *

SECONDARY DNS NETWORK ==>         #Backup if main DNS network fails, for resilient|redundancy. Cost extra money (must contact sales)

IPV6 ==>                          #Can be enabled (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              SSL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


METHODS ==>                       #  - "managed": automatic SSL using letsencrypt under the hood
                                  #  - "custom":
                                  #     - upload a SNI certificate
                                  #     - must manually renew
                                  #  - "dedicated IP":
                                  #     - upload a non-SNI certificate (for old browsers). Must contact sales.
                                  #     - must manually renew
                                  #Done with web UI

HTTP/2 ==>                        #Enabled


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CI TRIGGER           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



TRIGGERS ==>                      #  - on git provider new commit
                                  #  - with CLI
                                  #  - with web UI
                                  #     - including drag-drop a directory
                                  #  - with incoming webhook

netlify deploy                    #Deploy
-s|--site SITE_ID                 #
-d|--dir DIR                      #CONF.build.publish
-f|--functions DIR                #CONF.build.functions
-m|--message STR                  #Deploy custom message, shown in web UI
--timeout=NUM                     #
-o|--open                         #Open Site URL after deploy
-p|--prod                         #Unless set, do not deploy to production URL, only to temporary URL

netlify watch                     #Show last deploy, or wait for it to finish

INCOMING WEBHOOK ==>              #URL to POST to trigger a new build on a specific BRANCH
                                  #Created through Web UI
                                  #Have a title and URL (created by Netlify)
ENVVAR INCOMING_HOOK_TITLE        #STR
ENVVAR INCOMING_HOOK_URL          #'URL'
ENVVAR INCOMING_HOOK_BODY         #'JSON' of the request body

SKIP BUILD ==>                    #Either:
                                  #  - any, by locking a specific deploy (from web UI)
                                  #  - specific one with '[skip ci]' in commit message


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CI/CD             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PROGRAMMING LANGUAGES ==>         #Node.js, Ruby, Python

CONF.build.base                   #$PWD (def: PACKAGE_ROOT). Useful for monorepos
CONF.build.command                #'BASH_COMMAND' to run
                                  #PATH includes PACKAGE_ROOT/node_modules/.bin
                                  #Always install dependencies first (npm install)

ENVVAR NODE_VERSION               #Can be set to tell nvm which Node.js version to use
                                  #Can also use .nvmrc
                                  #Can be read too

CD ==>                            #Deploy automatically
CONF.build.publish                #'DIR' to deploy

STATUS BADGES ==>                 #[![Netlify Status](https://api.netlify.com/api/v1/badges/SITE_ID/deploy-status)](https://app.netlify.com/sites/USER/deploys)

netlify open --site
netlify open:site                 #Open browser URL for deployed Site
netlify open --admin
netlify open:admin                #Open browser URL for Site in app.netlify.com

CONTEXT ==>                       #Can be:
                                  #  - production: when `master`, deploy to URL
                                  #  - when other BRANCH ("branch deploy"): deploy to `BRANCH---URL` or (if using branch subdomains) `BRANCH.URL` instead
                                  #  - when PR: deploy to `deploy-preview-NUM---URL|deploy-preview-NUM.URL`
                                  #Can toggle branch deploy and deploy preview, or select specific BRANCHs, from the web UI
                                  #Each individual deploy is also available at BUILD_ID---USER.netlify.com
CONF.context.CONTEXT.*            #Like CONF.build.* but for specific CONTEXT among:
                                  #  - production
                                  #  - branch-deploy, BRANCH
                                  #  - deploy-preview


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PROCESSING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.headers                      #HEADERS_ARR
                                  #Group of response headers to set for specific URLs
HEADERS.for                       #'/PATH'. Can contain ':VAR' and '*'
HEADERS.headers.values.HEADER     #STR

CONF.build.processing             #PROCESSING. Post-processing of files
PROCESSING.skip_processing        #BOOL (def: false): ignore all PROCESSING.*
PROCESSING.js.minify              #BOOL (def: false). Minify JS
PROCESSING.js.bundle              #BOOL (def: false). Bundle JS as single file
PROCESSING.css.minify             #BOOL (def: false). Minify CSS
PROCESSING.css.bundle             #BOOL (def: false). Bundle CSS as single file
PROCESSING.images.compress        #BOOL (def: false). Minify images

SNIPPET INJECTION ==>             #Append custom HTML before either </head> or </body> on each page
                                  #From Web UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REDIRECTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.redirects                    #REDIRECT_ARR
                                  #First rules have higher priority
                                  #'URL' is relative to Site's domain, i.e. can use '/PATH'
REDIRECT.from                     #'URL'
                                  #Trailing slashes non-significant
REDIRECT.to                       #'URL'
                                  #Can contain ':VAR' expanded from REDIRECT.from|query.VAR if they use:
                                  #  - ':VAR'
                                  #  - '*', expanded as ':splat'
                                  #Can be omitted, e.g. not a redirect but want REDIRECT.conditions
REDIRECT.query.VAR                #STR. Only redirect if ?VAR=STR used
                                  #Also passes ?VAR=STR to redirected URL (otherwise no query params is passed)
REDIRECT.status                   #NUM (def: 301)
                                  #If 200, "rewrite":
                                  #  - server-side redirect, instead of client-side|HTTP redirect
                                  #  - can only redirect once
REDIRECT.redirects.headers.VAR    #'VAL'. Request headers after redirection
REDIRECT.signed                   #'ENVVAR'. Use the value to sign requests.
REDIRECT.force                    #If false (def), do not redirect if REDIRECT.from URL exists
                                  #Useful when using '*', i.e. redirects when '*' matches non-existing files only
REDIRECT.conditions.TYPE          #STR. Redirects depending on the request properties.
                                  #TYPE can be:
                                  #  - Language 'LANG'_ARR (def: 'en')
                                  #     - use cookie `nf_lang` (can be set)
                                  #  - Country 'COUNTRY'_ARR (def: 'US'):
                                  #     - use cookie `nf_country` (can be set)
                                  #     - based on IP
                                  #  - Role STR_ARR (e.g. 'admin')

PACKAGE_ROOT/_redirects           #Alternative to CONF.redirects
                                  #File with:
                                  #  - one REDIRECT per line
                                  #  - whitespace-separated fields for each REDIRECT:
                                  #      from [QUERY=VAL ...] to status[!] CONDITION_TYPE=VAL
                                  #    ! is REDIRECT.force
                                  #  - can #COMMENT

PROCESSING.html.pretty_urls       #BOOL (def: false). Remove .EXT and `index` from URLs (using redirects)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SPLIT TESTING         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



SPLIT TESTING ==>                 #Random DNS redirection towards different deploys.
                                  #Use a cookie to identify browser and redirect to same deploy on reload.
                                  #  - cookie `nf_country` 0-1
                                  #Only one test at once.
                                  #Done from web UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ENVVAR             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.build.environment.ENVVAR     #STR

ENVVAR REPOSITORY_URL             #E.g. 'git@github.com:ehmicky/cv-website'
ENVVAR BRANCH                     #E.g. 'master'
ENVVAR HEAD                       #E.g. 'master'
ENVVAR COMMIT_REF                 #E.g. '95e47764310101a004d58f9ed00a2fad59e939b6'
ENVVAR PULL_REQUEST               #E.g. 'false'

ENVVAR BUILD_ID                   #E.g. '5d6bdcdbfc2c13000c9aa18c'
ENVVAR DEPLOY_ID                  #E.g. '5d6bdcdbfc2c13000c9aa18b'

ENVVAR CONTEXT                    #'production', 'branch-deploy', 'BRANCH' or 'deploy-preview'
ENVVAR REVIEW_ID                  #'NUM' if PR
ENVVAR URL                        #Production URL
ENVVAR DEPLOY_PRIME_URL           #CONTEXT--URL
ENVVAR DEPLOY_URL                 #DEPLOY_ID---URL
ENVVAR NETLIFY_IMAGES_CDN_DOMAIN  #E.g. 'd33wubrfki0l68.cloudfront.net'

ENVVAR NETLIFY_BUILD_BASE         #E.g. '/opt/build'
ENVVAR PWD                        #E.g. '/opt/build/repo'
ENVVAR HOME                       #E.g. '/opt/buildhome'

ENVVAR NETLIFY                    #'true'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FUNCTIONS ==>                     #Deployed on AWS Lambda
                                  #Can be in Node.js or Go

FILE LOCATION ==>                 #Can be:
                                  #  - FUNCTIONS_DIR[/...]/FNAME.js:
                                  #     - PACKAGE_ROOT is found, then node_modules are bundled with their FILE.js as zip files
                                  #     - those zip files are uploaded to AWS Lambda
                                  #  - already zipped
                                  #When nested entry point filename must be directory name (not `index.js`)
                                  #Function is accessed on DOMAIN/.netlify/functions[/...]/FILE.js
CONF.build.functions              #FUNCTIONS_DIR

FUNC(EVENT, CONTEXT
 [, FUNC2(ERROR, RESULT)])        #Must be name export `handler`.
 ->PROMISE_RESULT                 #EVENT|CONTEXT|RESULT are like in AWS Lambda

EVENTS ==>                        #Run functions on events instead of HTTP requests.
                                  #FNAME must be event name.
                                  #Events:
                                  #  - deploy-building: start CI build
                                  #  - deploy-succeeded|failed: end CI build
                                  #  - deploy-[un]locked: lock|unlock builds
                                  #  - split-test-[de]activated: split test enabled|disabled
                                  #  - split-test-modified
                                  #  - submission-created: form submitted and verified
                                  #  - identity-validate|signup: start|end signup with Netlify Identity (only for email+password, not OAuth)
                                  #  - identity-login: login with Netlify Identity
                                  #Request payload is OBJ:
                                  #  - payload OBJ: event-specific
                                  #  - site OBJ: Site-specific
                                  #Cannot be called externally, thanks to JSON web signature

LOGS ==>                          #Seen in web UI

ENVVAR AWS_LAMBDA_JS_RUNTIME      #Can be get|set for Node.js version of AWS Lambda
                                  #Either 'nodejs6.10', 'nodejs8.10' (def) or 'nodejs10.x'
ENVVAR AWS_GO_IMPORT_PATH         #Can be get|set for Go import path.

netlify functions:create FNAME    #Create file for a Function at FUNCTIONS_DIR/[FNAME/]FILE, using a template
-n|--name FNAME                   #
-u|--url URL                      #Template URL. Def: interactive

netlify functions:build           #Zips source older to build folder
-s|--src DIR                      #Source folder
-f|--functions FUNCTIONS_DIR      #Build folder

netlify functions:invoke FNAME    #Fire a Function file
-n|--name FNAME                   #
-f|--functions FUNCTIONS_DIR      #
-q|--querystring STR              #
-p|--payload 'JSON'[_PATH]        #Request payload, POST method
--[no-]identity                   #Netlify Identity JWT???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        NETLIFY LAMBDA         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #1.6.3

netlify-lambda build DIR          #Build source function files to dist (at BUILDCONF.functions) with Webpack.
                                  #Use Babel.
                                  #Sets up ENVVARs (from BUILDCONF.environment)
                                  #Run webpack using webpack config:
                                  #  - context DIR
                                  #  - entry.FILENAME_NO_EXT: './FILENAME.EXT'
                                  #     - for each DIR/*.mjs|js|ts (except *.test|spec*)
                                  #  - output:
                                  #     - path BUILDCONF.functions
                                  #     - filename '[name].js'
                                  #     - libraryTarget 'commonjs'
                                  #  - resolve:
                                  #     - extensions ['.wasm', '.mjs', '.js', '.json', '.ts']
                                  #     - mainFields ['modules', 'main']
                                  #  - mode 'development', 'production' (def) or 'none' (if others) using NODE_ENV
                                  #  - module:
                                  #     - rules OBJ_ARR (single element):
                                  #        - test REGEXP matching *.mjs|js|ts
                                  #        - exclude REGEXP matching node_modules|bower_components|*.test|spec*
                                  #        - use:
                                  #           - loader require('babel-loader')
                                  #           - options:
                                  #              - cacheDirectory true
                                  #              - babelrc BOOL (if --babelrc)
                                  #              (if no babel config)
                                  #              - presets ['@babel/preset-env', {targets:{node:'6.10.3|8.10.0'}}]
                                  #                 - version is based on ENVVAR AWS_LAMBDA_JS_RUNTIME (including in BUILDCONF.environment)
                                  #              - plugins @babel/plugin-proposal-class-properties|transform-object-assign|proposal-object-rest-spread
                                  #  - target 'node'
                                  #  - plugins:
                                  #     - DEFINE-PLUGIN: using BUILDCONF.environment, i.e. sets up same ENVVARs
                                  #     - IGNORE-PLUGIN: with REGEXP /vertx/
                                  #  - optimization:
                                  #     - nodeEnv ENVVAR NODE_ENV (def: 'production')
                                  #  - bail true
                                  #  - devtool false
                                  #Can merge a custom one using --config, with higher priority
-c|--config PATH                  #PATH to additional webpack config
-b|--babelrc                      #BOOL (def: true)

netlify-lambda serve DIR          #Run netlify-lambda build in watch mode
                                  #Then spawn a static server serving DIR at localhost:PORT/.netlify/functions/FNAME
                                  #  - emulates AWS lambda request parameters
-c|--config PATH
-b|--babelrc                      #Like netlify-lambda build
-t|--timeout NUM                  #Def: 10 (in secs). Request timeout
-p|--port NUM                     #Def: 9000
-s|--static                       #Only spawn static server. Do not build webpack in watch mode

netlify-lambda install [DIR]      #Run `npm install` inside each PACKAGE_ROOT found in DIR (def: BUILDCONF.functions)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


netlify *                         #
--json
--silent                          #Output

netlify status                    #Prints:
                                  #  - current user name|email|team
                                  #  - site name|id|url
                                  #  - CONF path
                                  #  - admin URL
--verbose                         #Also print environment info (OS, CPU, node|npm|yarn|browsers versions)

netlify status:hooks              #???

netlify dev                       #???
                                  #https://cli.netlify.com/netlify-dev

netlify plugins                   #Show plugins
--core                            #Show core plugins: netlify-cli, @oclif/plugin-help|plugins|not-found

netlify plugins:install PKG,...   #npm install PKG for a plugin
-f|--force                        #No confirmation flag

netlify plugins:uninstall PKG,... #

netlify plugins:update            #npm update

netlify plugins:link [PKGNAME|DIR]#npm link

netlify api ENDPOINT_NAME         #HTTP call to Netlify API
-d|--date 'JSON'                  #Request body
--list                            #Show all ENDPOINT_NAME

STATE.telemetryDisabled           #BOOL (def: false). Do not send analytics.
netlify --telemetry-disable|enable#Modify STATE.telemetryDisabled
