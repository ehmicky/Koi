
           
   NETLIFY  
           



PACKAGE.name                      #Must be defined

ENVVAR NODE_VERSION               #Can be set to tell nvm which Node.js version to use
                                  #Can also use .nvmrc
                                  #Can be read too

CONF                              #Either (by priority):
                                  #  - CLI flags
                                  #  - PACKAGE_ROOT/netlify.toml
                                  #  - settings through web UI at app.netlify.com, for all Sites
                                  #All paths are relative to PACKAGE_ROOT

WEB UI ==>                        #Allow doing that CLI is doing

~/.netlify/config.json            #STATE. Stateful config for all Sites

PACKAGE_ROOT/.netlify             #Should not be committed
PACKAGE_ROOT/.netlify/state.json  #SSTATE. Stateful Site-specific config

STATE.users                       #OBJ. Set by netlify login
STATE.users.USER_ID               #USER_STATE
USER_STATE.id
STATE.userId                      #USER_ID
USER_STATE.name                   #STR
USER_STATE.email                  #'EMAIL'
ENVVAR NETLIFY_AUTH_TOKEN         #STR. OAuth token for authentication
USER_STATE.auth.token             #Can be generated from web UI
USER_STATE.auth.github            #Connection with GitHub (for CI)
USER_STATE.auth.github.token      #STR. OAuth token for GitHub connection
USER_STATE.auth.github.user       #STR
USER_STATE.auth.github.provider   #'github'

ENVVAR NETLIFY_SITE_ID
SSTATE.siteId                     #Set by netlify link

Site                              #Repository/project with a specific deploy configuration
Function                          #AWS Lambda function file for a specific Site

netlify *                         #
--auth=OAUTH_TOKEN                #
--json
--silent                          #Output

netlify login                     #By default, open browser to get OAuth token
--new                             #Logout first

netlify logout                    #

netlify switch                    #Login to a different account (multiple login)

netlify init                      #Either:
                                  #  - netlify sites:create
                                  #  - netlify link
-m|--manual                       #Like netlify sites:create
-w|--watch                        #Wait for first deploy to complete
--force                           #Re-initialize CI hooks even if already setup

netlify sites:create              #Create a new Site
                                  #Asks for:
                                  #  - team
                                  #  - Site name
                                  #  - GitHub OAuth token
                                  #  - CONF.build.command|publish
-m|--manual                       #Instead of GitHub OAuth token, use:
                                  #  - SSH keys: for read access to repository
                                  #  - webhook URL: that git provider should POST to on change
-n|--name SITE_NAME               #
-a|--account-slug=NAME/REPO       #
-c|--with-ci                      #Initializes CI hooks

netlify sites:delete SITE_ID      #
--force                           #No confirmation prompt

netlify sites:list                #Show all Sites: name|id|url, repo, team

netlify link                      #Communicate which Site the current project is.
                                  #Def: asks between:
                                  #  - guessing from git URL
                                  #  - dropdown from list of options
                                  #  - explicit --id|--name
--id SITE_ID
--name SITE_NAME                  #

netlify unlink                    #

netlify status                    #Prints:
                                  #  - current user name|email|team
                                  #  - site name|id|url
                                  #  - CONF path
                                  #  - admin URL
--verbose                         #Also print environment info (OS, CPU, node|npm|yarn|browsers versions)

netlify status:hooks              #???

netlify open --site
netlify open:site                 #Open browser URL for deployed Site
netlify open --admin
netlify open:admin                #Open browser URL for Site in app.netlify.com

netlify deploy                    #Deploy
-s|--site SITE_ID                 #
-d|--dir DIR                      #CONF.build.publish
-f|--functions DIR                #CONF.build.functions
-m|--message STR                  #Deploy custom message, shown in web UI
--timeout=NUM                     #
-o|--open                         #Open Site URL after deploy
-p|--prod                         #Unless set, do not deploy to production URL, only to temporary URL

netlify watch                     #Show last deploy, or wait for it to finish

netlify functions:create FNAME    #Create file for a Function at FUNCTIONS_DIR/[FNAME/]FILE, using a template
-n|--name FNAME                   #
-u|--url URL                      #Template URL. Def: interactive

netlify functions:build           #Zips source older to build folder
-s|--src DIR                      #Source folder
-f|--functions FUNCTIONS_DIR      #Build folder

netlify functions:invoke FNAME    #Fire a Function file
-n|--name FNAME                   #
-f|--functions FUNCTIONS_DIR      #
-q|--querystring STR              #
-p|--payload 'JSON'[_PATH]        #Request payload, POST method
--[no-]identity                   #Netlify Identity JWT???

netlify plugins                   #Show plugins
--core                            #Show core plugins: netlify-cli, @oclif/plugin-help|plugins|not-found

netlify plugins:install PKG,...   #npm install PKG for a plugin
-f|--force                        #No confirmation flag

netlify plugins:uninstall PKG,... #

netlify plugins:update            #npm update

netlify plugins:link [PKGNAME|DIR]#npm link

netlify dev                       #???
                                  #https://cli.netlify.com/netlify-dev

netlify api ENDPOINT_NAME         #HTTP call to Netlify API
-d|--date 'JSON'                  #Request body
--list                            #Show all ENDPOINT_NAME

STATE.telemetryDisabled           #BOOL (def: false). Do not send analytics.
netlify --telemetry-disable|enable#Modify STATE.telemetryDisabled

CONF.build.functions              #FUNCTIONS_DIR

LOCATION ==>                      #Can be:
                                  #  - FUNCTIONS_DIR[/...]/FILE.js:
                                  #     - PACKAGE_ROOT is found, then node_modules are bundled with their FILE.js as zip files
                                  #     - those zip files are uploaded to AWS Lambda
                                  #  - already zipped
                                  #When nested entry point filename must be directory name (not `index.js`)

CI ==>                            #Automatically run CI build on git provider new commit
                                  #Can skip with '[skip ci]' in commit message
                                  #Can manually deploy also:
                                  #  - with CLI
                                  #  - with web UI
                                  #     - including drag-drop a directory
CONF.build.base                   #$PWD (def: PACKAGE_ROOT). Useful for monorepos
CONF.build.command                #'BASH_COMMAND' to run
                                  #PATH includes PACKAGE_ROOT/node_modules/.bin
                                  #Always install dependencies first (npm install)

CONF.build.processing             #PROCESSING. Post-processing of files
PROCESSING.skip_processing        #BOOL (def: false): ignore all PROCESSING.*
PROCESSING.js.minify              #BOOL (def: false). Minify JS
PROCESSING.js.bundle              #BOOL (def: false). Bundle JS as single file
PROCESSING.css.minify             #BOOL (def: false). Minify CSS
PROCESSING.css.bundle             #BOOL (def: false). Bundle CSS as single file
PROCESSING.html.pretty_urls       #BOOL (def: false). Remove .EXT and `index` from URLs
PROCESSING.images.compress        #BOOL (def: false). Minify images

PROGRAMMING LANGUAGES ==>         #Only Node.js documented, but also supported: Ruby, Python

STATUS BADGES ==>                 #[![Netlify Status](https://api.netlify.com/api/v1/badges/SITE_ID/deploy-status)](https://app.netlify.com/sites/USER/deploys)

CD ==>                            #Deploy automatically
CONF.build.publish                #'DIR' to deploy

CONTEXT ==>                       #Can be:
                                  #  - production: when `master`, deploy to URL
                                  #  - when other BRANCH ("branch deploy"): deploy to `BRANCH---URL` or (if using Netlify DNS) `BRANCH.URL` instead
                                  #  - when PR: deploy to `deploy-preview-NUM---URL|deploy-preview-NUM.URL`
                                  #Can toggle branch deploy and deploy preview, or select specific BRANCHs, from the web UI
                                  #Each individual deploy is also available at BUILD_ID---USER.netlify.com
CONF.context.CONTEXT.*            #Like CONF.build.* but for specific CONTEXT among:
                                  #  - production
                                  #  - branch-deploy, BRANCH
                                  #  - deploy-preview

CONF.headers                      #HEADERS_ARR
                                  #Group of response headers to set for specific URLs
HEADERS.for                       #'/PATH'. Can contain ':VAR' and '*'
HEADERS.headers.values.HEADER     #STR

CONF.redirect                     #REDIRECT_ARR
REDIRECT.from                     #'/PATH'
REDIRECT.to                       #'/PATH'. Can contain ':VAR' expanded from REDIRECT.from|query.VAR if they use:
                                  #  - ':VAR'
                                  #  - '*', expanded as ':splat'
                                  #Can be omitted, i.e. not a redirect must only applies REDIRECT.conditions
REDIRECT.query.VAR                #STR. Only redirect if ?VAR=STR used
REDIRECT.status                   #NUM (def: 301)
REDIRECT.redirects.headers.VAR    #'VAL'. Request headers after redirection
REDIRECT.signed                   #'ENVVAR'. Use the value to sign requests.
REDIRECT.force                    #BOOL (def: false). Allow REDIRECT.from to be PATH of an existing file
REDIRECT.conditions.TYPE          #STR. Redirects depending on the request properties. TYPE can be:
                                  #  - Language 'LANG'_ARR (def: 'en')
                                  #  - Country 'COUNTRY'_ARR (def: 'US')
                                  #  - Role STR_ARR (e.g. 'admin')

CONF.build.environment.ENVVAR     #STR

ENVVAR REPOSITORY_URL             #E.g. 'git@github.com:ehmicky/cv-website'
ENVVAR BRANCH                     #E.g. 'master'
ENVVAR HEAD                       #E.g. 'master'
ENVVAR COMMIT_REF                 #E.g. '95e47764310101a004d58f9ed00a2fad59e939b6'
ENVVAR PULL_REQUEST               #E.g. 'false'

ENVVAR BUILD_ID                   #E.g. '5d6bdcdbfc2c13000c9aa18c'
ENVVAR DEPLOY_ID                  #E.g. '5d6bdcdbfc2c13000c9aa18b'

ENVVAR CONTEXT                    #'production', 'branch-deploy', 'BRANCH' or 'deploy-preview'
ENVVAR REVIEW_ID                  #'NUM' if PR
ENVVAR URL                        #Production URL
ENVVAR DEPLOY_PRIME_URL           #CONTEXT--URL
ENVVAR DEPLOY_URL                 #DEPLOY_ID---URL
ENVVAR NETLIFY_IMAGES_CDN_DOMAIN  #E.g. 'd33wubrfki0l68.cloudfront.net'

ENVVAR NETLIFY_BUILD_BASE         #E.g. '/opt/build'
ENVVAR PWD                        #E.g. '/opt/build/repo'
ENVVAR HOME                       #E.g. '/opt/buildhome'

ENVVAR NETLIFY                    #'true'

INCOMING WEBHOOK ==>              #URL to POST to trigger a new build on a specific BRANCH
                                  #Created through Web UI
                                  #Have a title and URL (created by Netlify)
ENVVAR INCOMING_HOOK_TITLE        #STR
ENVVAR INCOMING_HOOK_URL          #'URL'
ENVVAR INCOMING_HOOK_BODY         #'JSON' of the request body
