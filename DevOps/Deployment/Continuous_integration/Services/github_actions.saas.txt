
                  
   GITHUB_ACTIONS  
                  



TODO:
https://github.com/actions
https://github.com/actions/checkout
https://github.com/marketplace?type=actions
https://github.com/sdras/awesome-actions


WORKFLOW                          #.github/workflows/WORKFLOW.y[a]ml
                                  #There can be several per repository

LIMITS ==>                        #  - 20 runs in parallel at once
                                  #  - 20 jobs in parallel at once per repository
                                  #  - 1000 API requests per hour per repository

ORDER ==>                         #  - run: set of jobs in parallel (can orchestrate order with JOB.needs)
                                  #  - job: set of steps serially. Each run in own environment
                                  #  - step: set of commands|actions serially

WORKFLOW.name                     #'WORKFLOW_NAME'. Shown in Web UI.
                                  #Def: filename

WORKFLOW.on                       #EVENT[_TYPE][_ARR] triggering this workflow.
                                  #Not recursive, i.e. workflow cannot trigger another workflow.
EVENT                             #{ EVENT_TYPE: OPTS,... }
                                  #OPTS:
                                  #  - types STR_ARR:
                                  #     - filter to only those sub-types
                                  #     - def to all sub-types unless indicated otherwise
                                  #  (push|pull_request only)
                                  #  (can use globbing including globstar and '!...')
                                  #  - branches[-ignore] 'LBRANCH'_ARR
                                  #  - tags[-ignore] 'TAG'_ARR
                                  #  - paths[-ignore] 'PATH'_ARR (relative to root directory): only for for files
                                  #Possible EVENT_TYPEs:
                                  #  - push: new commit
                                  #  - pull_request:
                                  #     - types (def: opened synchronize reopened):
                                  #        - [re]opened edited closed
                                  #        - [un]locked
                                  #        - [un]assigned
                                  #        - [un]labeled
                                  #        - synchronize
                                  #        - ready_for_review review_requested review_request_removed
                                  #  - pull_request_review:
                                  #     - types: submitted edited dismissed
                                  #  - pull_request_review_comment:
                                  #     - types: created edited deleted
                                  #  - commit_comment: comment on a commit
                                  #  - issues:
                                  #     - types:
                                  #        - [re]opened edited deleted closed
                                  #        - [un]locked
                                  #        - [un]pinned
                                  #        - [un]assigned
                                  #        - [un]labeled
                                  #        - [de]milestoned
                                  #        - transferred (to another repo)
                                  #  - issue_comment: each comment in an issue
                                  #     - types: created edited deleted
                                  #  - label: list of possible issue labels in the repository
                                  #     - types: created edited deleted
                                  #  - milestone:
                                  #     - types: created opened edited deleted closed
                                  #  - project: GitHub project
                                  #     - types: created|reopened updated|edited deleted closed
                                  #  - project_column: GitHub project column of cards
                                  #     - types: created updated deleted moved
                                  #  - project_card: GitHub project card
                                  #     - types: created edited deleted moved converted (to an issue)
                                  #  - watch: starred (not starting watching)
                                  #     - types: started
                                  #  - fork: someone forked repo
                                  #  - release: GitHub release
                                  #     - types: created edited deleted prereleased|[un]published
                                  #  - deployment:
                                  #     - deploy code to remote server
                                  #     - must be handled by external providers
                                  #  - deployment_status: deployment status changed
                                  #  - status: commit status
                                  #  - check_suite: group of checks (automatic CI actions)
                                  #     - types: [re]requested completed
                                  #  - check_run: single check
                                  #     - types: created|rerequested completed requested_action (button to ask user for additional action)
                                  #  - public: make private repository public
                                  #  - create|delete: a branch|tag
                                  #  - member: collaborators|admins
                                  #     - types: added edited deleted
                                  #  - page_build: GitHub Pages build
                                  #  - gollum: wiki update
                                  #Special EVENT_TYPEs (with different OPTS):
                                  #  - repository_dispatch: custom event to trigger a workflow
                                  #  - schedule:
                                  #     - regular intervals
                                  #     - OPTS_ARR:
                                  #        - cron '0-59 0-23 1-31 1-12 0-6'
                                  #           - hour minute dayOfMonth month dayOfWeek
                                  #           - each FIELD can be:
                                  #              - *: every
                                  #              - FIELD,...: and
                                  #              - FIELD-FIELD: from-to
                                  #              - NUM/NUM2: from NUM, then every NUM2

FORKED REPOSITORY ==>             #Do not trigger any workflows, unless enabled in web UI.
                                  #If enabled, GITHUB_TOKEN only allow read actions, not write
                                  #Never trigger any workflows for private repositories.

WORKFLOW|JOB|STEP|CONTAINER.env   #OBJ of ENVVARs

WORKFLOW.jobs.JOB_ID              #JOB
                                  #JOB_ID must be [:alnum:]-_
JOB.name                          #'JOB_NAME'. Displayed in web UI
JOB.needs                         #'JOB_ID'[_ARR]. Wait for those jobs first.

JOB.runs-on                       #Host OS among:
                                  #  - ubuntu-VERSION (latest|18.04|16.04)
                                  #  - macOS-VERSION (latest|10.14)
                                  #  - windows-VERSION (latest|2019|2016)
JOB.container                     #Docker CONTAINER to run every STEP that uses STEP.run (instead of STEP.uses)
CONTAINER.image                   #'IMAGE[:TAG]'
CONTAINER.ports                   #NUM_ARR to expose
CONTAINER.volumes                 #ARR of Docker volumes '[HOST_DIR:]CONTAINER_DIR'
CONTAINER.options                 #'--OPT ...' passed to docker create

JOB.strategy.matrix               #Build matrix: repeat JOB once for each cartesian product
                                  #OBJ:
                                  #  - VAR: ARR
                                  #  - include OBJ:
                                  #     - add additional VAR: VAL to a specific dimension
                                  #     - specific VAR: VAL of that dimension must be specified
                                  #     - that dimension must already exist, i.e.:
                                  #        - those VAR: VAL must already be specified top-level
                                  #        - this does not add new dimension
                                  #  - exclude OBJ:
                                  #     - remove a dimension
                                  #     - specific VAR: VAL of that dimension must be specified
                                  #Each value is then accessed through ${{VARR}}
JOB.strategy.fail-fast            #BOOL (def: true). Cancels whole matrix if any JOB fails.
JOB.strategy.max-parallel         #NUM (def: max available)

JOB.steps                         #STEP_ARR
STEP.id                           #'STEP_ID'
STEP.name                         #'STEP_NAME' (def: STEP.run|uses). Displayed in web UI
STEP.working-directory            #'PATH' for PWD
STEP.continue-on-error            #BOOL. If true (def), exits whole JOB once any STEP.run|uses has exit code non-0
JOB|STEP.timeout-minutes          #NUM (max|def: 6)

STEP.run                          #'SHELL_COMMAND'
                                  #Can use several commands with newline separators.
STEP.shell                        #Shell to use with STEP.run:
                                  #  - 'bash': bash --noprofile --norc -eo pipefail ...
                                  #     - def on Unix
                                  #     - uses msys on Windows
                                  #  - 'sh': sh -e ...
                                  #     - not supported on Windows
                                  #  - 'cmd': %ComSpec% /D /E:ON /V:OFF /S /C "CALL "...""
                                  #     - def on Windows
                                  #     - only supported on Windows
                                  #  - 'pwsh': pwsh -command "& '...'"
                                  #     - core PowerShell
                                  #  - 'powershell': powershell -command "& '...'"
                                  #     - only supported on Windows
                                  #     - desktop PowerShell
                                  #  - 'python': python ...
                                  #  - 'COMMAND ...': custom
                                  #     - {0} is replaced with command

STEP.uses                         #ACTION to use among:
                                  #  - 'USER/REPO[/PATH][@REF]':
                                  #      - REF can be:
                                  #         - BRANCH
                                  #         - VERSION: vX (X.*.*) or vX.Y (X.Y.*)
                                  #         - COMMIT
                                  #      - repository with a top-level action.yml
                                  #      - not private repository
                                  #  - 'PATH' to a DIR with an action.yml. Relative to root directory.
                                  #  - 'docker://[HOST/]IMAGE[:TAG]': public Docker image
STEP.with                         #{ VAR: STR, ... }
                                  #Options for the ACTION
                                  #Set as ENVVAR INPUT_VAR=STR (VAR converted to uppercase)
STEP.with.entrypoint              #'SHELL_COMMAND'. Sets|overrides ACTION's docker ENTRYPOINT, i.e. main command to run.
STEP.with.args                    #STR. Sets|overrides ACTION's docker CMD, i.e. arguments to ENTRYPOINT.

ACTION                            #Command to execute within a STEP, delivered as a plugin

${{VARR}}                         #Can be used inside:
                                  #  - STEP.run
                                  #  - STEP.runs-on
                                  #VARR can be:
                                  #  - steps.STEP_ID.**
                                  #  - matrix.VAR
JOB|STEP.if ???
  https://help.github.com/en/articles/workflow-syntax-for-github-actions#jobsjob_idif
  https://help.github.com/en/articles/workflow-syntax-for-github-actions#jobsjob_idstepsif

STATUS BADGE ==>                  #https://github.com/USER/REPO/workflows/WORKFLOW_NAME|FILENAME/badge.svg

CANCEL|RE-RUN ==>                 #Done through web UI

LOGS ==>                          #Can be seen through web UI
SECRET ACTIONS_RUNNER_DEBUG=true  #Add debug information about environment and execution order
SECRET ACTIONS_STEP_DEBUG=true    #Add debug information about jobs

DOWNLOAD ARTIFACTS ==>            #Done through web UI
