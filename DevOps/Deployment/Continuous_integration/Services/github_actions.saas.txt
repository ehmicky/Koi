
                  
   GITHUB_ACTIONS  
                  



TODO:
https://github.com/actions/toolkit
  - including docs/*.md
https://help.github.com/en/articles/persisting-workflow-data-using-artifacts
Solve all the ??? in this doc
https://github.com/actions/checkout
https://github.com/actions/cache and https://help.github.com/en/github/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows
https://github.com/actions
https://github.com/marketplace?type=actions
https://github.com/sdras/awesome-actions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LIMITS ==>                        #  - 20 workflows in parallel at once per repository
                                  #  - 20 jobs in parallel at once for all repositories
                                  #     - 5 for MacOS
                                  #     - 40 for Pro, 60 for Team
                                  #  - 1000 API requests per hour per repository

FORKED REPOSITORY ==>             #Do not trigger any workflows:
                                  #  - unless enabled in web UI
                                  #  - not for private repositories

STATUS BADGE ==>                  #https://github.com/USER/REPO/workflows/WORKFLOW_NAME/badge.svg


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HOST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB.runs-on                       #Host OS among:
                                  #  - ubuntu-VERSION (latest|18.04|16.04)
                                  #  - macOS-VERSION (latest|10.15)
                                  #  - windows-VERSION (latest|2019|2016)
                                  #Each JOB runs in own virtual machine instance.

SOFTWARE ==>                      #Passwordless sudo on Linux|Mac, no admin prompt for Windows
                                  #See https://help.github.com/en/articles/software-in-virtual-environments-for-github-actions
                                  #for list of global dependencies but this includes:
                                  #  - Node.js 10.16.3
                                  #  - nvm on Mac, n on Linux|Windows
                                  #  - Bash, powershell
                                  #  - Git
                                  #  - gulp, grunt
                                  #  - yarn, bower
                                  #  - typescript
                                  #  - wget, curl
                                  #  - python, ruby, php, rust, go

HARDWARE ==>                      #Hosted on Azure Standard_DS2_v2 for Windows|Linux:
                                  #  - 2 CPUs
                                  #  - 7GB RAM
                                  #  - 14GB SSD temporary storage
                                  #  - max I/O: 8000 IOPS and 8MB/s
                                  #  - max network: 200MB/s
                                  #Hosted on MacStadium for Mac

JOB.container                     #Docker CONTAINER to run every STEP that uses STEP.run (not STEP.uses)

JOB.services.SERVICE_ID           #Docker SERVICE, i.e. container started in background before all STEPs and closed after all.
CONTAINER|SERVICE.image           #'IMAGE[:TAG]'
CONTAINER|SERVICE.ports           #NUM_ARR to expose
CONTAINER|SERVICE.volumes         #ARR of Docker volumes '[HOST_DIR:]CONTAINER_DIR'
CONTAINER|SERVICE.options         #'--OPT ...' passed to docker create
CONTEXT.job.container|services.
 SERVICE.id                       #CONTAINER|SERVICE's ID
CONTEXT.job.container|services.
 network                          #CONTAINER|SERVICE's NETWORK ID
CONTEXT.job.container|services.
 ports                            #OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WORKFLOW.on                       #EVENT[_NAME][_ARR] triggering this workflow.
                                  #Not recursive, i.e. workflow cannot trigger another workflow.

EVENT                             #{ EVENT_NAME: OPTS,... }
                                  #OPTS:
                                  #  - types STR_ARR:
                                  #     - filter to only those sub-types
                                  #     - def to all sub-types unless indicated otherwise
                                  #  (push|pull_request only)
                                  #  (can use globbing including globstar and '!...')
                                  #  - branches[-ignore] 'LBRANCH'_ARR
                                  #  - tags[-ignore] 'TAG'_ARR
                                  #  - paths[-ignore] 'PATH'_ARR
                                  #     - only for those files
                                  #     - relative to root directory
                                  #     - no starting slash

EVENT_NAME repository_dispatch    #Custom event to trigger a workflow
EVENT_NAME schedule               #Regular intervals
                                  #OPTS_ARR:
                                  #  - cron '0-59 0-23 1-31 1-12 0-6'
                                  #     - hour minute dayOfMonth month dayOfWeek
                                  #     - each FIELD can be:
                                  #        - *: every
                                  #        - FIELD,...: and
                                  #        - FIELD-FIELD: from-to
                                  #        - NUM/NUM2: from NUM, then every NUM2
EVENT_NAME push                   #New commit (including inside pull requests)
EVENT_NAME pull_request           #Types (def: opened synchronize reopened):
                                  #  - [re]opened edited closed
                                  #  - [un]locked
                                  #  - [un]assigned
                                  #  - [un]labeled
                                  #  - synchronize
                                  #  - ready_for_review review_requested review_request_removed
EVENT_NAME pull_request_review    #Types: submitted edited dismissed
EVENT_NAME
 pull_request_review_comment      #Types: created edited deleted
EVENT_NAME commit_comment         #Comment on a commit
EVENT_NAME issues                 #Types:
                                  #  - [re]opened edited deleted closed
                                  #  - [un]locked
                                  #  - [un]pinned
                                  #  - [un]assigned
                                  #  - [un]labeled
                                  #  - [de]milestoned
                                  #  - transferred (to another repo)
EVENT_NAME issue_comment          #Each comment in an issue
                                  #Types: created edited deleted
EVENT_NAME label                  #List of possible issue labels in the repository
                                  #Types: created edited deleted
EVENT_NAME milestone              #Types: created opened edited deleted closed
EVENT_NAME project                #GitHub project
                                  #Types: created|reopened updated|edited deleted closed
EVENT_NAME project_column         #GitHub project column of cards
                                  #Types: created updated deleted moved
EVENT_NAME project_card           #GitHub project card
                                  #Types: created edited deleted moved converted (to an issue)
EVENT_NAME watch                  #Starred (not starting watching)
                                  #Types: started
EVENT_NAME fork                   #Someone forked repo
EVENT_NAME release                #GitHub release
                                  #Types: created edited deleted prereleased|[un]published
EVENT_NAME deployment             #Deploy code to remote server
                                  #Must be handled by external providers
EVENT_NAME deployment_status      #Deployment status changed
EVENT_NAME status                 #Commit status
EVENT_NAME check_suite            #Group of checks (automatic CI actions)
                                  #Types: [re]requested completed
EVENT_NAME check_run              #Single check
                                  #Types: created|rerequested completed requested_action (button to ask user for additional action)
EVENT_NAME public                 #Make private repository public
EVENT_NAME create|delete          #A branch|tag
EVENT_NAME member                 #Collaborators|admins
                                  #Types: added edited deleted
EVENT_NAME page_build             #GitHub Pages build
EVENT_NAME gollum                 #Wiki update

CONTEXT.github.event_name
ENVVAR GITHUB_EVENT_NAME          #'EVENT_NAME' that triggered the WORKFLOW
CONTEXT.github.actor
ENVVAR GITHUB_ACTOR               #STR. Username or app that triggered the WORKFLOW
CONTEXT.github.event              #OBJ of the GitHub event payload
                                  #See GitHub API documentation online for those payloads
ENVVAR GITHUB_EVENT_PATH          #'PATH' to a JSON file containing CONTEXT.github.event


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORCHESTRATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WORKFLOW                          #.github/workflows/WORKFLOW.y[a]ml
                                  #There can be several per repository
WORKFLOW.name                     #'WORKFLOW_NAME'. Shown in Web UI.
                                  #Def: filename
CONTEXT.github.workflow
ENVVAR GITHUB_WORKFLOW            #WORKFLOW.name

WORKFLOW.jobs.JOB_ID              #JOB. Run in parallel (unless JOB.needs)
                                  #JOB_ID must be [:alnum:]-_
JOB.name                          #'JOB_NAME'. Displayed in web UI
JOB.needs                         #'JOB_ID'[_ARR]. Wait for those jobs first.

JOB.steps                         #STEP_ARR. Run serially.
STEP.id                           #'STEP_ID'
STEP.name                         #'STEP_NAME' (def: STEP.run|uses). Displayed in web UI

CONTEXT.job.status                #Current JOB's status among 'success', 'failure' and 'cancelled'
STEP.continue-on-error            #BOOL. If true (def), exits whole JOB once any STEP.run|uses has exit code non-0

JOB|STEP.if                       #BOOL. If false, skips this JOB|STEP
                                  #Usually used with ${{EXPR}} but ${{ }} can be omitted
                                  #EXPR can use the additional following functions:
success|failure()->BOOL           #Whether previous STEP failed
cancelled()->BOOL                 #Whether previous STEP was cancelled
always()->BOOL                    #Always returns true

JOB|STEP.timeout-minutes          #NUM (max|def: 6)

CANCEL|RE-RUN ==>                 #Done through web UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MATRIX             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JOB.strategy.matrix               #Build matrix: repeat JOB once for each cartesian product
                                  #OBJ:
                                  #  - VAR: ARR
                                  #  - include OBJ:
                                  #     - add additional VAR: VAL to a specific dimension
                                  #     - specific VAR: VAL of that dimension must be specified
                                  #     - that dimension must already exist, i.e.:
                                  #        - those VAR: VAL must already be specified top-level
                                  #        - this does not add new dimension
                                  #  - exclude OBJ_ARR:
                                  #     - remove a dimension
                                  #     - specific VAR: VAL of that dimension must be specified

CONTEXT.matrix.VAR                #Access each dimension's values
CONTEXT.strategy.job-index        #NUM of current dimension
CONTEXT.strategy.job-total        #NUM of dimensions

JOB.strategy.fail-fast            #BOOL (def: true). Cancels whole matrix if any JOB fails.
CONTEXT.strategy.fail-fast        #
JOB.strategy.max-parallel         #NUM (def: max available)
CONTEXT.strategy.max-parallel     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMMAND            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STEP.run                          #'SHELL_COMMAND'
                                  #Can use several commands with newline separators.
STEP.shell                        #Shell to use with STEP.run:
                                  #  - 'bash': bash --noprofile --norc -eo pipefail ...
                                  #     - def on Unix
                                  #     - uses msys on Windows
                                  #  - 'sh': sh -e ...
                                  #     - not supported on Windows
                                  #  - 'cmd': %ComSpec% /D /E:ON /V:OFF /S /C "CALL "...""
                                  #     - def on Windows
                                  #     - only supported on Windows
                                  #  - 'pwsh': pwsh -command "& '...'"
                                  #     - core PowerShell
                                  #  - 'powershell': powershell -command "& '...'"
                                  #     - only supported on Windows
                                  #     - desktop PowerShell
                                  #  - 'python': python ...
                                  #  - 'COMMAND ...': custom
                                  #     - {0} is replaced with command

ACTION                            #Command to execute within a STEP, delivered as a plugin.
                                  #Alternative to STEP.run
STEP.uses                         #ACTION_REF (see below)
STEP.with.INPUT_ID                #STR (see ACTION.inputs.INPUT_ID)
STEP.with.entrypoint|args         #Override ACTION.entrypoint|args (see below)
ENVVAR GITHUB_ACTION              #ACTION_ID


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LOGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOGS ==>                          #Can be seen through web UI

ACTIONS_RUNNER_DEBUG=true         #SECRET_ENVVAR. Add debug information about environment and execution order
ACTIONS_STEP_DEBUG=true           #SECRET_ENVVAR. Add debug information about jobs (see ACTION_COMMAND debug below)

DOWNLOAD ARTIFACTS ==>            #Done through web UI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ENVVAR             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WORKFLOW|JOB|STEP|CONTAINER.env   #OBJ of ENVVARs

SECRET_ENVVAR                     #Set in web UI
                                  #Cannot be used in forked repositories (except GITHUB_TOKEN)
                                  #Limits:
                                  #  - 100 per repository
                                  #  - 64KB value
CONTEXT.secrets.VAR               #Use a SECRET_ENVVAR

GITHUB_TOKEN                      #SECRET_ENVVAR with a GitHub token:
                                  #  - scoped to current repository
                                  #  - read|write on most endpoints
                                  #     - read-only in forked repositories
                                  #Can create one token if not enough permissions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONTEXT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENVVAR GITHUB_WORKSPACE           #'DIR' used as PWD for ACTIONs
                                  #This will be most likely where repository root directory will be checked out by ACTIONs
                                  #Cannot be used if inside an ACTION that uses USER Dockerfile instruction
STEP.working-directory            #'PATH' for PWD
ENVVAR HOME                       #Can be used

CONTEXT.github.repository
ENVVAR GITHUB_REPOSITORY          #'USER/REPO'
CONTEXT.github.sha
ENVVAR GITHUB_SHA                 #'HASH'
CONTEXT.github.ref
ENVVAR GITHUB_REF                 #'refs/heads/BRANCH|TAG'
CONTEXT.github.head_ref
ENVVAR GITHUB_HEAD_REF            #Same but for head if forked repository
CONTEXT.github.base_ref
ENVVAR GITHUB_BASE_REF            #Same but for base repository if forked repository

CONTEXT.runner OBJ???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


${{EXPR}}                         #Template variable to use anywhere.
                                  #Can use:
                                  #  - 'STR'|"STR"|BOOL|NUM|null
                                  #  - operators: () [] ! && || < <= > >= == !=
                                  #     - does type coercion (STR -> BOOL|NUM, BOOL -> 0|1|'BOOL', NUM -> 'NUM', null -> 0|'')
                                  #  - VARR from CONTEXT.**
                                  #     - can use ARR.*...
                                  #     - can use either OBJ.VAR or OBJ['VAR']
                                  #     - VAR must be [:alnum:]-_
                                  #  - one of the FUNC() below
CONTEXT                           #Values that can be used as VARR inside ${{EXPR}}

contains(STR, STR2)->BOOL         #Like STR.includes(), case-insensitive
contains(ARR, VAL)->BOOL          #Like ARR.includes(), case-insensitive
startsWith(STR, STR2)->BOOL       #Like STR.startsWith(), case-insensitive
endsWith(STR, STR2)->BOOL         #Like STR.endsWith(), case-insensitive
format(STR, VAL...)->STR          #Replace {NUM} placeholders in STR. {{}} for escaping {}
join(STR[_ARR], STR2)->STR        #Like [...STR_ARR, STR2].join(' ')
toJson(VAL)->STR                  #Like VAL.toJson()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACTION MAIN          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION_REF                        #'[USER/REPO][/PATH]@REF'
                                  #Path to DIR with action.yml
                                  #Def USER/REPO: current one
                                  #Def PATH: /
                                  #REF can be:
                                  #  - BRANCH
                                  #  - VERSION (GitHub release): vX (X.*.*) or vX.Y (X.Y.*)
                                  #  - COMMIT
                                  #Only public repository
                                  #If not meant to be published, recommend to put in .github/actions/ACTION_ID
                                  #Can also be 'docker://[HOST/]IMAGE[:TAG]' (public Docker image)
action.yml                        #ACTION.* file

ACTION.name                       #'ACTION_NAME'. Displayed in web UI
ACTION.description                #STR
ACTION.author                     #STR
ACTION.branding                   #BRANDING. Badge shown in GitHub marketplace
BRANDING.color                    #'white|gray-dark|yellow|blue|green|orange|red|purple'
BRANDING.icon                     #STR (feathers library icon name)

ACTION.runs                       #RUNS. Main command execution
RUNS.using                        #Either:
                                  #  - 'node12' (NODE_RUNS): run in child process
                                  #  - 'docker' (DOCKER_RUNS)
                                  #     - only on Linux hosts
                                  #     - slower than 'node12'
NODE_RUNS.main                    #'PATH' to file to execute
NODE_RUNS.post                    #'PATH' to file to execute after NODE_RUNS.main, whether it was successful or not
DOCKER_RUNS.image                 #'PATH', 'docker://[HOST/]IMAGE[:TAG]' or 'USER/REPO' to Dockerfile

@actions/toolkit                  #Monorepo with @actions/core|io|exec|github|tool-cache
CORE                              #Package '@actions/core' (1.2.0)
IO                                #Package '@actions/io' (1.0.1):
                                  #  - cp|copyFile|cpDirRecursive(...): like CP-FILE|CPY (see their docs) but not as good
                                  #  - mv(...): like MV-FILE (see its docs) but not as good
                                  #  - rmRF(...): like RIMRAF|DEL (see their docs) but not as good
                                  #  - mkdirP(...): like MAKE-DIR (see its docs) but not as good
                                  #  - which(...)
                                  #     - check if file exists and:
                                  #        - Unix: u+x g+x or o+x (depending on process.getgid|uid())
                                  #        - Windows: file extension among ENVVAR PATHEXT (case-insensitive)
                                  #     - for Windows, try with each extension from ENVVAR PATHEXT (case-insensitive) too
                                  #     - if absolute path, does single check
                                  #     - if relative path, fail
                                  #     - otherwise try each in ENVVAR PATH


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ACTION STATUS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STATUS ==>                        #'success' if exit code 0, 'failure' otherwise

CORE.setFailed(STR)               #Sets process.exitCode = 1 + CORE.error(STR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACTION IPC           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION_COMMAND                    #IPC mechanism between ACTION and GitHub actions runner.
 ({ATTR: STR,...}[, STR2])        #Printed to stdout as ::ACTION_COMMAND [ATTR=STR],...::[STR2]
                                  #Must percent-encode:
                                  #  - STR|STR2: \r \n
                                  #  - STR: ] ;
                                  #ACTION_COMMAND|ATTR are case-insensitive
                                  #Must use OS-specific newline.
ACTION_COMMAND stop-commands      #Pauses IPC mechanism.
 ('ACTION_COMMAND2')              #Should be done before printing user-supplied string.
                                  #Resume with ACTION_COMMAND2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       ACTION I/O DOCKER       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DOCKER_RUNS.entrypoint            #'SHELL_COMMAND'. Sets|overrides ACTION's Dockerfile ENTRYPOINT, i.e. main command to run.
DOCKER_RUNS.args                  #STR. Sets|overrides Dockerfile CMD, i.e. arguments to ENTRYPOINT.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    ACTION I/O DECLARATIVE     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION.inputs.INPUT_ID            #INPUT. ENVVAR used as arguments
                                  #INPUT_ID is case-sensitive when matching STEP.with
                                  #It is passed as ENVVAR INPUT_{INPUT_ID.toUpperCase()}=STR
                                  #INPUT_ID must be [:alnum:]-_
INPUT.required                    #BOOL (def: false)
INPUT.default                     #STR
INPUT.description                 #STR
CORE.getInput('INPUT_ID'[, OPTS]) #Retrieve ENVVAR INPUT_{INPUT_ID.toUpperCase()}
 ->STR                            #Trims value
                                  #If OPTS.required true (def: false), throw if STR empty string (before trimming)

ACTION.outputs.OUTPUT_ID          #OUTPUT.
                                  #OUTPUT_ID must be [:alnum:]-_ (lowercase-only)
OUTPUT.description                #STR
ACTION_COMMAND set-output
 ({name: 'OUTPUT_ID'}, STR)
CORE.setOutput('OUTPUT_ID', STR)  #Set OUTPUT
CONTEXT.steps.STEP_ID.outputs.VAR #Get OUTPUT of previous STEPs' ACTIONs
                                  #Can only be used in the following STEPs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      ACTION I/O ENVVARS       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RUNS.env                          #OBJ of ENVVARs

ACTION_COMMAND set-env
 ({name: 'VAR'}, 'VAL')           #Set ENVVAR VAR=VAL in parent process and following STEPs (not current one)
CORE.exportVariable('VAR', 'VAL') #Do ACTION_COMMAND set-env + set process.env.VAR

ACTION_COMMAND add-path('DIR')    #Prepend to PATH ENVVAR in parent process and following STEPs (not current one)
CORE.addPath('DIR')               #Do ACTION_COMMAND add-path + set process.env.PATH (not process.env.Path)

ACTION_COMMAND save-state
 ('VAR', 'VAL')                   #Set ENVVAR STATE_VAR=VAL. Only within current action
CORE.saveState('VAR', 'VAL')      #Meant for communication between NODE_RUNS.main and NODE_RUNS.post
CORE.getState('VAR')->'VAL'       #Retrieve ENVVAR STATE_VAR ('' if not set)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ACTION LOGS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACTION_COMMAND debug|warning|error#Print message
 (OBJ, STR)                       #OBJ (all optional): file 'FILENAME', line NUM, col NUM
CORE.debug|warning|error(STR)     #If debug, only printed if SECRET_ENVVAR ACTIONS_STEP_DEBUG is 'true'

ACTION_COMMAND group('GROUP')
CORE.startGroup('GROUP')          #Start foldable group
ACTION_COMMAND endgroup()
CORE.endGroup()                   #Stop last foldable group
CORE.group
 ('GROUP', FUNC()[->PROMISE])
 ->PROMISE                        #Call ACTION_COMMAND group|endgroup before|after FUNC()

ACTION_COMMAND add-mask(STR)      #Replace any STR in logs by *
CORE.setSecret(STR)               #Meant for confidential values
