
            
   PROTOBUF  
            



VERSION ==>                       #3.14.0

STATEMENT;                        #Always ; at end, for each line except ones ending with {}
;                                 #Empty statement

BOOL                              #true|false
INT                               #Can be:
                                  #  - N... (decimal)
                                  #  - 0N... (octal)
                                  #  - 0xN... 0X... (hex)
                                  #Can be prefixed with +|-
FLOAT                             #Can be:
                                  #  - [N...][.N...][e|E[+|-]N...]
                                  #  - inf
                                  #  - nan
                                  #Can be prefixed with +|-
STR                               #"..." or '...' (same behavior)
                                  #Can use:
                                  #  - any Unicode characters as is, except \0 \n \ and (depending on quote) ' "
                                  #  - \a \b \f \n \r \t \v \\ \' \"
                                  #  - \NNN (codepoint as octal)
                                  #  - \xNN or \XNN (codepoint as hex)

VAR                               #Must use [a-zA-Z0-9_] and start with [a-zA-Z]
VARR                              #Dot-delimited VAR
VAL                               #VARR|BOOL|INT|FLOAT|STR

TYPE                              #One of the following:
bool                              #BOOL
[s|u]int32|64                     #INT 32|64 bits, signed|unsigned|both
float|double                      #Floating point FLOAT 32|64 bits
[s]fixed32|64                     #Fixed point FLOAT 32|64 bits, signed|both
string                            #STR
bytes                             #???
MESSAGE_TYPE                      #[.]VARR
MTYPE                             #([stream] MESSAGE_TYPE)
ENUM_TYPE                         #[.]VARR

syntax = STR                      #Declare protobuf version
                                  #Must be "proto3"

import [weak|public] "NAME.proto" #
package "VARR"                    #

service VAR { ... }               #Can include: option, rpc VAR
rpc VAR MTYPE returns MTYPE2
 [{ ... }]                        #Can include: option

message VAR { ... }               #Can include: option, type, enum VAR, oneof VAR, map VAR, reserved INT|VAR
                                  #Can be nested.

option VARR[.VAR] = VAL           #
[VARR=VAL],...                    #OPTS (uses [] brackets)
                                  #VARR can be (VARR)

[repeated] TYPE VAR = INT [OPTS]  #Type declaration
oneof VAR { ... }                 #Can include: option, type declaration

map<KEY_TYPE, VAL_TYPE> VAR = INT
 [OPTS]                           #KEY_TYPE cannot be float|double|bytes|[.]VARR

reserved INT [to INT2|max],...    #
reserved VAR,...                  #

enum VAR { ... }                  #Can include: option, enum field declaration
VAR = INT [OPTS]                  #Enum field declaration
