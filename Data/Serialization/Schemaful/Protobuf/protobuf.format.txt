
            
   PROTOBUF  
            



VERSION ==>                       #3.14.0

FILE EXTENSION ==>                #.proto

https://developers.google.com/protocol-buffers/docs/proto3#default
https://developers.google.com/protocol-buffers/docs/reference/javascript-generated


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TYPES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TYPE                              #Data type

VAL                               #VARR|BOOL|INT|NUM|STR

VAR                               #Must use [a-zA-Z0-9_] and start with [a-zA-Z]
                                  #Case convention:
                                  #  - CamelCase for aggregates|types (service|rpc|message|enum type)
                                  #  - snake_case for fields (normal|oneof|map|option|enum values), package, files, builtin types
VARR                              #Dot-delimited VAR

BOOL                              #true|false
bool                              #TYPE

INT                               #Can be:
                                  #  - N... (decimal)
                                  #  - 0N... (octal)
                                  #  - 0xN... 0X... (hex)
                                  #Can be prefixed with +|-
[s|u]int32|64                     #TYPE. 32|64 bits, signed|unsigned
                                  #sint* is like int*, but more efficient
ID                                #INT32 used as identifier in the binary format
                                  #1 to 15 take one byte, 16 to 2047 two bytes, etc., so should give more frequent types smaller number
                                  #Max 2**29. Cannot use 19000-19999

NUM                               #Can be:
                                  #  - [N...][.N...][e|E[+|-]N...]
                                  #  - inf
                                  #  - nan
                                  #Can be prefixed with +|-
float|double                      #TYPE. Floating point NUM 32|64 bits
[s]fixed32|64                     #TYPE. Fixed point NUM 32|64 bits, signed|both

STR                               #"..." or '...' (same behavior)
                                  #Can use:
                                  #  - any Unicode characters as is, except \0 \n \ and (depending on quote) ' "
                                  #  - \a \b \f \n \r \t \v \\ \' \"
                                  #  - \NNN (codepoint as octal)
                                  #  - \xNN or \XNN (codepoint as hex)
string                            #TYPE for human STR
bytes                             #TYPE for machine STR

TRANSTYPING ==>                   #The following TYPEs are automatically transtyped:
                                  #  - when server|client are using different *.proto
                                  #  - i.e. allows backward compatibility
                                  #List of transtyping groups:
                                  #  - [u]int32|64|bool
                                  #  - sint32|64
                                  #  - string|bytes, providing valid UTF-8
                                  #  - [s]fixed32
                                  #  - [s]fixed64


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STATEMENTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STATEMENT;                        #Always ; at end, for each line except ones ending with {}
;                                 #Empty statement. Can be placed mostly anywhere.

// COMMENT
/* COMMENT */                     #

syntax = STR                      #Declare protobuf version
                                  #Must be "proto2|proto3"
                                  #  - only proto3 documented here
                                  #  - proto2 can be imported from proto3, but not other way around
                                  #Required. Must be first statement.

import [weak|public] "PATH.proto" #Include another *.proto file
                                  #Can use TYPEs of PATH.proto, but not ones imported by it
                                  #  - unless "public" (only for one depth level)
package "VARR"                    #When imported, this file's TYPEs must be namespaced by VARR
                                  #Implementation is language-dependent and influenced by OPTs:
                                  #  - go_package STR (e.g. 'google.golang.org/protobuf/types/known/anypb')
                                  #  - java_package STR (e.g. 'com.google.protobuf')
                                  #  - csharp_namespace STR (e.g. 'Google.Protobuf.WellKnownTypes')

service VAR { ... }               #A client|server.
rpc VAR MTYPE returns MTYPE2      #An endpoint. Child of service
 [{ ... }]                        #MTYPE is ([stream] MESSAGE_TYPE)

message VAR { ... }               #Like an OBJ. Can be nested.
                                  #VAR is the TYPE
                                  #If a TYPE is declared inside message and used outside of it:
                                  #  - must namespace it: VAR.TYPE
                                  #  - for TYPEs of: nested message, enum

option OPT_VARR = VAL             #Top-level or child of service|rpc|message|enum|oneof
                                  #OPT_VARR can be (OPT_VARR)
                                  #Declare options.
OPTS                              #[OPT_VARR=VAL],... (uses [] brackets)
                                  #Use options.

enum VAR { ... }                  #Enum type. Top-level or child of message
                                  #VAR is the TYPE
VAR = ID [OPTS]                   #Enum field declaration. Child of enum.
                                  #There must be at least one enum field with ID 0 (used as default value)
                                  #Two fields cannot have same ID unless ENUM_OPT.allow_alias true

oneof VAR { ... }                 #Child of message
                                  #Declares that at most one of several fields is declared at once.
                                  #Allows serializing only one of them, i.e. more memory efficient.
                                  #Cannot use ARRs nor MAPs
                                  #Backward compatible changes:
                                  #  - creating new oneof
                                  #  - removing oneof fields
                                  #  - but not adding oneof fields to existing oneof

[repeated] TYPE VAR = ID [OPTS]   #Field declaration. Child of message|oneof.
                                  #"repeated" is for ordered ARR
                                  #Always optional
                                  #  - the default value is the empty value (0, false, "", [], enum value with ID 0)
                                  #  - the default value is always assigned

map<KEY_TYPE, VAL_TYPE> VAR = ID  #Key/value unordered map. Child of message
 [OPTS]                           #KEY_TYPE cannot be float|double|bytes|message|map|enum
                                  #VAL_TYPE cannot be map nor ARR

reserved ID [to ID2|max],...      #Child of message|enum
reserved VAR,...                  #List of previously defined ID|VAR that have been deleted.
                                  #Forbids re-using those, to keep backward compatibility.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        GOOGLE.PROTOBUF        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


package "google.protobuf"         #MESSAGE_TYPEs and ENUM_TYPEs always available.
                                  #Mostly for reflection, i.e. protobuf to represent protobuf itself.
                                  #Also define:
                                  #  - null|timestamp|duration
                                  #  - service versions, mixins
import                            #NAME is:
 "google/protobuf/NAME.proto"     #  - wrappers (*Value)
                                  #  - struct (NullValue|ListValue|Struct|Value)
                                  #  - empty
                                  #  - any
                                  #  - type (Field.*|Syntax|Type|Option|Enum|EnumValue)
                                  #  - source_context
                                  #  - api (Api|Method|Mixin)
                                  #  - field_mask
                                  #  - duration
                                  #  - timestamp

BoolValue|[U]Int32|64Value|
 FloatValue|DoubleValue|          #Protobuf builtin type
 StringValue|BytesValue           #Has a single field: value BOOL|[U]INT32|64|FLOAT|DOUBLE|STR|BYTES

NullValue                         #null (not present in protobuf). ENUM_TYPE with single value: NULL_VALUE

ListValue                         #Protobuf ARR
LIST_VALUE.values                 #VALUE_ARR

Empty                             #MESSAGE with no fields.

Struct                            #Protobuf OBJ (service|message|map)
STRUCT.fields                     #MAP<STR,VALUE>

Value                             #Protobuf VAL (i.e. any type).
                                  #If a union of one of the following.
VALUE.bool_value                  #BOOL
VALUE.number_value                #DOUBLE, excluding inf|nan
VALUE.string_value                #STR
VALUE.null_value                  #NULL_VALUE
VALUE.list_value                  #LIST_VALUE
VALUE.struct_value                #STRUCT

Any                               #Protobuf VAL (i.e. any type)
ANY.value                         #BYTES
ANY.type_url                      #"URL" to a Type

Field.Kind                        #Protobuf type. ENUM_TYPE
                                  #Can be: TYPE_BOOL|[S|U]INT32|64|DOUBLE|FLOAT|[S]FIXED32|64|STRING|BYTES|MESSAGE|ENUM|UNKNOWN

Field.Cardinality                 #Protobuf type optionality|repeatedness. ENUM_TYPE
                                  #Can be: CARDINALITY_OPTIONAL|REPEATED|UNKNOWN

Syntax                            #Protobuf syntax. ENUM_TYPE
                                  #Can be: SYNTAX_PROTO2|3

SourceContext                     #Information about the *.proto file
SOURCE_CONTEXT.file_name          #"*.proto"

Api                               #Protobuf service
API.name                          #"VAR"
API.methods                       #METHOD_ARR
API.options                       #OPTION_ARR
API.source_context                #SOURCE_CONTEXT
API.syntax                        #SYNTAX
API.version                       #Semver "MAJOR[.MINOR]"
API.mixins                        #MIXIN_ARR

Mixin                             #protobuf service within another service
MIXIN.name                        #"VAR" of the other service
MIXIN.root                        #"PATH" where service is embedded

Method                            #Protobuf rpc
METHOD.request|response_streaming #BOOL
METHOD.request|response_type_url  #"URL" to a Type
METHOD.options                    #OPTION_ARR
METHOD.syntax                     #SYNTAX

Type                              #Protobuf message
TYPE.name                         #"MESSAGE_TYPE"
TYPE.fields                       #FIELD_ARR
TYPE.options                      #OPTION_ARR
TYPE.oneofs                       #"VAR"_ARR of fields in oneofs
TYPE.source_context               #SOURCE_CONTEXT
TYPE.syntax                       #SYNTAX

Field                             #Protobuf field
FIELD.name                        #"VAR"
FIELD.json_name                   #"VAR", for JSON
FIELD.number                      #ID
FIELD.kind                        #KIND representing the type
FIELD.type_url                    #"URL" to a Type
FIELD.cardinality                 #CARDINALITY
FIELD.oneof_index                 #INT32. 0 if in oneof. Otherwise 1-based index.
FIELD.packed                      #BOOL.
FIELD.options                     #OPTION_ARR

FieldMask                         #Protobuf field "VARR" path.
                                  #ARR fields can only be specified as last VAR.
                                  #Usually used for selection.
                                  #When serializing FIELD_MASK_ARR, usually join with ","
FIELD_MASK.paths                  #"VARR"_ARR

Option                            #Protobuf options
OPTION.name                       #"OPT_VARR"
OPTION.value                      #ANY

Enum                              #Protobuf enum type
ENUM.name                         #"VAR"
ENUM.enumvalue                    #ENUMVALUE_ARR
ENUM.options                      #OPTION_ARR
ENUM.source_context               #SOURCE_CONTEXT
ENUM.syntax                       #SYNTAX

EnumValue                         #Protobuf enum value
ENUMVALUE.name                    #"VAR"
ENUMVALUE.number                  #ID
ENUMVALUE.options                 #OPTION_ARR

Timestamp                         #
TIMESTAMP.seconds                 #INT64. Unix time.
TIMESTAMP.nanos                   #INT32. Min 0, max 1e9

Duration                          #
DURATION.seconds                  #INT64. Min|max +|-1e4 years
DURATION.nanos                    #INT32. Min|max +|-1e9


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMPILER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-I|--proto_path DIR               #To resolve "import" statements.
                                  #Def: "."
                                  #Should be set to repository root.
