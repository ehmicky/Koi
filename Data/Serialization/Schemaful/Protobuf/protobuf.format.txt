
            
   PROTOBUF  
            



VERSION ==>                       #3.14.0
                                  #Serialization format.
                                  #Fairly schemaful, yet somewhat cross-language.
                                  #Generates code stub for many languages to parse/serialize data.
                                  #Optimized for network payload with low size.

FILE EXTENSION ==>                #.proto

Continue:
  - finish going through compiler options
  - https://developers.google.com/protocol-buffers/docs/style
  - https://developers.google.com/protocol-buffers/docs/encoding
  - https://developers.google.com/protocol-buffers/docs/techniques
  - https://github.com/protocolbuffers/protobuf/tree/master/docs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TYPES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TYPE                              #Data type

VAL                               #VARR|BOOL|INT|NUM|STR

VAR                               #Must use [a-zA-Z0-9_] and start with [a-zA-Z]
                                  #Case convention:
                                  #  - CamelCase for aggregates|types (service|rpc|message|enum type)
                                  #  - snake_case for fields (normal|oneof|map|option|enum values), package, files, builtin types
VARR                              #Dot-delimited VAR

BOOL                              #true|false
bool                              #TYPE

INT                               #Can be:
                                  #  - N... (decimal)
                                  #  - 0N... (octal)
                                  #  - 0xN... 0X... (hex)
                                  #Can be prefixed with +|-
[s|u]int32|64                     #TYPE. 32|64 bits, signed|unsigned
                                  #sint* is like int*, but more efficient
ID                                #INT32 used as identifier in the binary format
                                  #1 to 15 take one byte, 16 to 2047 two bytes, etc., so should give more frequent types smaller number
                                  #Max 2**29. Cannot use 19000-19999

NUM                               #Can be:
                                  #  - [N...][.N...][e|E[+|-]N...]
                                  #  - inf
                                  #  - nan
                                  #Can be prefixed with +|-
float|double                      #TYPE. Floating point NUM 32|64 bits
[s]fixed32|64                     #TYPE. Fixed point NUM 32|64 bits, signed|both

STR                               #"..." or '...' (same behavior)
                                  #Can use:
                                  #  - any Unicode characters as is, except \0 \n \ and (depending on quote) ' "
                                  #  - \a \b \f \n \r \t \v \\ \' \"
                                  #  - \NNN (codepoint as octal)
                                  #  - \xNN or \XNN (codepoint as hex)
string                            #TYPE for human STR
bytes                             #TYPE for machine STR

TRANSTYPING ==>                   #The following TYPEs are automatically transtyped:
                                  #  - when server|client are using different *.proto
                                  #  - i.e. allows backward compatibility
                                  #List of transtyping groups:
                                  #  - [u]int32|64|bool
                                  #  - sint32|64
                                  #  - string|bytes, providing valid UTF-8
                                  #  - [s]fixed32
                                  #  - [s]fixed64


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STATEMENTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STATEMENT;                        #Always ; at end, for each line except ones ending with {}
;                                 #Empty statement. Can be placed mostly anywhere.

// COMMENT
/* COMMENT */                     #

syntax = STR                      #Declare protobuf version
                                  #Must be "proto2|proto3"
                                  #  - only proto3 documented here
                                  #  - proto2 can be imported from proto3, but not other way around
                                  #Required. Must be first statement.

import [weak|public] "PATH.proto" #Include another *.proto file
                                  #Can use TYPEs of PATH.proto, but not ones imported by it
                                  #  - unless "public" (only for one depth level)
                                  #If "weak", does not fail if "PATH.proto" does not exist
package "VARR"                    #When imported, this file's TYPEs must be namespaced by VARR
                                  #Implementation is language-dependent.
                                  #VARR can be overridden for specific language using top-level OPTs:
                                  #  - go_package STR (e.g. 'google.golang.org/protobuf/types/known/anypb')
                                  #  - java_package STR (e.g. 'com.google.protobuf')
                                  #  - csharp_namespace STR (e.g. 'Google.Protobuf.WellKnownTypes')

service VAR { ... }               #A client|server.
rpc VAR MTYPE returns MTYPE2      #An endpoint. Child of service
 [{ ... }]                        #MTYPE is ([stream] MESSAGE_TYPE)

message VAR { ... }               #Like an OBJ. Can be nested.
                                  #VAR is the TYPE
                                  #If a TYPE is declared inside message and used outside of it:
                                  #  - must namespace it: VAR.TYPE
                                  #  - for TYPEs of: nested message, enum

option OPT_VARR = VAL             #Top-level or child of service|rpc|message|enum|oneof
                                  #Declare options for a specific file|service|rpc|message|enum|oneof
                                  #It is possible to define custom options, but hard.
                                  #Core OPTs documented here.
                                  #OPT_VARR can be (OPT_VARR)
OPTS                              #[OPT_VARR=VAL],... (uses [] brackets)
                                  #Same but for fields|map|enum values

enum VAR { ... }                  #Enum type. Top-level or child of message
                                  #VAR is the TYPE
VAR = ID [OPTS]                   #Enum field declaration. Child of enum.
                                  #There must be at least one enum field with ID 0 (used as default value)
                                  #Two fields cannot have same ID unless ENUM_OPT.allow_alias true

oneof VAR { ... }                 #Child of message
                                  #Declares that at most one of several fields is declared at once.
                                  #Allows serializing only one of them, i.e. more memory efficient.
                                  #Cannot use ARRs nor MAPs
                                  #Backward compatible changes:
                                  #  - creating new oneof
                                  #  - removing oneof fields
                                  #  - but not adding oneof fields to existing oneof

[repeated] TYPE VAR = ID [OPTS]   #Field declaration. Child of message|oneof.
                                  #"repeated" is for ordered ARR
                                  #Always optional
                                  #  - the default value is the empty value (0, false, "", [], enum value with ID 0)
                                  #  - the default value is always assigned
FIELD_OPT.deprecated              #BOOL (def: false). Document as deprecated and|or print warnings.

map<KEY_TYPE, VAL_TYPE> VAR = ID  #Key/value unordered map. Child of message
 [OPTS]                           #KEY_TYPE cannot be float|double|bytes|message|map|enum
                                  #VAL_TYPE cannot be map nor ARR

reserved ID [to ID2|max],...      #Child of message|enum
reserved VAR,...                  #List of previously defined ID|VAR that have been deleted.
                                  #Forbids re-using those, to keep backward compatibility.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        GOOGLE.PROTOBUF        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


package "google.protobuf"         #MESSAGE_TYPEs and ENUM_TYPEs always available.
                                  #Mostly for reflection, i.e. protobuf to represent protobuf itself.
                                  #Also define:
                                  #  - null|timestamp|duration
                                  #  - service versions, mixins
import                            #NAME is:
 "google/protobuf/NAME.proto"     #  - wrappers (*Value)
                                  #  - struct (NullValue|ListValue|Struct|Value)
                                  #  - empty
                                  #  - any
                                  #  - type (Field.*|Syntax|Type|Option|Enum|EnumValue)
                                  #  - source_context
                                  #  - api (Api|Method|Mixin)
                                  #  - field_mask
                                  #  - duration
                                  #  - timestamp

BoolValue|[U]Int32|64Value|
 FloatValue|DoubleValue|          #Protobuf builtin type
 StringValue|BytesValue           #Has a single field: value BOOL|[U]INT32|64|FLOAT|DOUBLE|STR|BYTES

NullValue                         #null (not present in protobuf). ENUM_TYPE with single value: NULL_VALUE

ListValue                         #Protobuf ARR
LIST_VALUE.values                 #VALUE_ARR

Empty                             #MESSAGE with no fields.

Struct                            #Protobuf OBJ (service|message|map)
STRUCT.fields                     #MAP<STR,VALUE>

Value                             #Protobuf VAL (i.e. any type).
                                  #If a union of one of the following.
VALUE.bool_value                  #BOOL
VALUE.number_value                #DOUBLE, excluding inf|nan
VALUE.string_value                #STR
VALUE.null_value                  #NULL_VALUE
VALUE.list_value                  #LIST_VALUE
VALUE.struct_value                #STRUCT

Any                               #Protobuf VAL (i.e. any type)
ANY.value                         #BYTES
ANY.type_url                      #"URL" to a Type

Field.Kind                        #Protobuf type. ENUM_TYPE
                                  #Can be: TYPE_BOOL|[S|U]INT32|64|DOUBLE|FLOAT|[S]FIXED32|64|STRING|BYTES|MESSAGE|ENUM|UNKNOWN

Field.Cardinality                 #Protobuf type optionality|repeatedness. ENUM_TYPE
                                  #Can be: CARDINALITY_OPTIONAL|REPEATED|UNKNOWN

Syntax                            #Protobuf syntax. ENUM_TYPE
                                  #Can be: SYNTAX_PROTO2|3

SourceContext                     #Information about the *.proto file
SOURCE_CONTEXT.file_name          #"*.proto"

Api                               #Protobuf service
API.name                          #"VAR"
API.methods                       #METHOD_ARR
API.options                       #OPTION_ARR
API.source_context                #SOURCE_CONTEXT
API.syntax                        #SYNTAX
API.version                       #Semver "MAJOR[.MINOR]"
API.mixins                        #MIXIN_ARR

Mixin                             #protobuf service within another service
MIXIN.name                        #"VAR" of the other service
MIXIN.root                        #"PATH" where service is embedded

Method                            #Protobuf rpc
METHOD.request|response_streaming #BOOL
METHOD.request|response_type_url  #"URL" to a Type
METHOD.options                    #OPTION_ARR
METHOD.syntax                     #SYNTAX

Type                              #Protobuf message
TYPE.name                         #"MESSAGE_TYPE"
TYPE.fields                       #FIELD_ARR
TYPE.options                      #OPTION_ARR
TYPE.oneofs                       #"VAR"_ARR of fields in oneofs
TYPE.source_context               #SOURCE_CONTEXT
TYPE.syntax                       #SYNTAX

Field                             #Protobuf field
FIELD.name                        #"VAR"
FIELD.json_name                   #OPT.json_name
FIELD.number                      #ID
FIELD.kind                        #KIND representing the type
FIELD.type_url                    #"URL" to a Type
FIELD.cardinality                 #CARDINALITY
FIELD.oneof_index                 #INT32. 0 if in oneof. Otherwise 1-based index.
FIELD.packed                      #BOOL.
FIELD.options                     #OPTION_ARR

FieldMask                         #Protobuf field "VARR" path.
                                  #ARR fields can only be specified as last VAR.
                                  #Usually used for selection.
FIELD_MASK.paths                  #"VARR"_ARR

Option                            #Protobuf options
OPTION.name                       #"OPT_VARR"
OPTION.value                      #ANY

Enum                              #Protobuf enum type
ENUM.name                         #"VAR"
ENUM.enumvalue                    #ENUMVALUE_ARR
ENUM.options                      #OPTION_ARR
ENUM.source_context               #SOURCE_CONTEXT
ENUM.syntax                       #SYNTAX

EnumValue                         #Protobuf enum value
ENUMVALUE.name                    #"VAR"
ENUMVALUE.number                  #ID
ENUMVALUE.options                 #OPTION_ARR

Timestamp                         #
TIMESTAMP.seconds                 #INT64. Unix time.
TIMESTAMP.nanos                   #INT32. Min 0, max 1e9

Duration                          #
DURATION.seconds                  #INT64. Min|max +|-1e4 years
DURATION.nanos                    #INT32. Min|max +|-1e9


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             JSON              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JSON SERIALIZATION ==>            #  - bool -> BOOL
                                  #  - [u]int|fixed32 -> NUM
                                  #  - [u]int|fixed64 -> "NUM"
                                  #  - float|double -> NUM|"NaN"|"[-]Infinity"
                                  #  - string -> STR
                                  #  - bytes -> standard base64 STR with padding
                                  #  - message -> OBJ
                                  #     - key is lowerCamelCase'd
                                  #     - key can be set using OPT.json_name
                                  #  - repeated -> ARR
                                  #  - enum -> "VAR"
                                  #  - map -> OBJ
                                  #  - TYPE default value -> undefined
                                  #  - *Value -> same as underlying type
                                  #  - NullValue -> null
                                  #  - EMPTY -> OBJ
                                  #  - STRUCT -> OBJ
                                  #  - ANY -> OBJ, with @type instead of type_url
                                  #  - FIELD_MASK -> "VARR,..."
                                  #  - TIMESTAMP -> "YYYY-MM-DDTHH:MM:SS[.SSS[SSS[SSS]]]Z"
                                  #  - DURATION -> "N...[.N...]s"

JSON PARSING ==>                  #  - BOOL -> bool
                                  #  - NUM|"NUM" -> [u]int|fixed32|64
                                  #  - NUM|"NUM[e...]"|"NaN"|"[-]Infinity" -> float|double
                                  #  - STR -> string
                                  #  - standard|url-safe base64 STR with|without padding -> bytes
                                  #  - undefined|null -> TYPE default value
                                  #  - OBJ -> message
                                  #     - key is either lowerCamelCase, protobuf name or OPT.json_name
                                  #  - "VAR"|ID_NUM -> enum
                                  #  - ARR -> repeated
                                  #     - [] or null -> empty repeated
                                  #  - OBJ -> map
                                  #  - same as underlying type -> *Value
                                  #  - null -> NullValue
                                  #  - OBJ -> EMPTY
                                  #  - OBJ -> STRUCT
                                  #  - OBJ, with @type instead of type_url -> ANY
                                  #  - "VARR,..." -> FIELD_MASK
                                  #  - "YYYY-MM-DDTHH:MM:SS[.SSS[SSS[SSS]]][TZ]" -> TIMESTAMP
                                  #  - "N...[.N...]s" -> DURATION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMPILER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


protoc FILE.proto...              #Convert FILE.proto to generated code.
                                  #The generated code usually needs some runtime library.
                                  #Does not convert SERVICE|RPC.

--js|objc|php|python|ruby|cpp|
 csharp|java_out
 [LANG_OPT[=STR],...]OUT_DIR      #Where to output generated code, and for which language

--decode MESSAGE_TYPE             #Take message in binary format in stdin and outputs it in debug text format to stdout
                                  #Not compatible with --*_out
--encode MESSAGE_TYPE             #Inverse
--decode_raw                      #Same as --decode but automatically guesses MESSAGE_TYPE

-I|--proto_path DIR               #To resolve "import" statements.
                                  #Def: "."
                                  #Should be set to repository root.
                                  #Can be specified several times.

  --descriptor_set_in FILES   Specifies a delimited list of FILES each containing a FileDescriptorSet (a protocol buffer defined in descriptor.proto).
                              The FileDescriptor for each of the PROTO_FILES provided will be loaded from these FileDescriptorSets.
                              If a FileDescriptor appears multiple times, the first occurrence will be used.
  -oFILE, --descriptor_set_out FILE
                              Writes a FileDescriptorSet (a protocol buffer, defined in descriptor.proto) containing all of the input files to FILE.
  --include_imports           When using --descriptor_set_out, also include all dependencies of the input files in the set, so that the set is self-contained.
  --include_source_info       When using --descriptor_set_out, do not strip SourceCodeInfo from the FileDescriptorProto.
                              This results in vastly larger descriptors that include information about the original location of each decl in the source file as well as surrounding comments.
  --dependency_out FILE       Write a dependency output file in the format expected by make.
                              This writes the transitive set of input file paths to FILE
  --error_format FORMAT       Set the format in which to print errors.
                              FORMAT may be 'gcc' (the default) or 'msvs' (Microsoft Visual Studio format).
  --print_free_field_numbers  Print the free field numbers of the messages defined in the given proto files.
                              Groups share the same field number space with the parent message.
                              Extension ranges are counted as occupied fields numbers.
  --plugin EXECUTABLE         Specifies a plugin executable to use.
                              Normally, protoc searches the PATH for plugins, but you may specify additional executables not in the path using this flag.
                              Additionally, EXECUTABLE may be of the form NAME=PATH, in which case the given plugin name is mapped to the given executable even if the executable's own name differs.
  @<filename>                 Read options and filenames from file.
                              If a relative file path is specified, the file will be searched in the working directory.
                              The --proto_path option will not affect how this argument file is searched.
                              Content of the file will be expanded in the position of @<filename> as in the argument list.
                              Note that shell expansion is not applied to the content of the file (i.e., you cannot use quotes, wildcards, escapes, commands, etc.).
                              Each line corresponds to a single argument, even if it contains spaces.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NODE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


google-protobuf                   #Runtime npm package.
                                  #Required by the generated code.

LANG_OPT.import_style=STR         #Can be:
                                  #  - 'closure' (def)
                                  #  - 'commonjs_strict':
                                  #     - filename is "FILE_pb.js"
                                  #     - --proto_path is OUT_DIR
                                  #  - 'browser': global object
                                  #  - 'commonjs': same as commonjs_strict + browser
                                  #  - 'es6': ES modules
LANG_OPT.error_on_name_conflict   #BOOL (def: false). Fail if two TYPEs with same name
LANG_OPT.binary                   #BOOL (def: true). Enables *Binary()

EXPORT ==>                        #Output file exports top-level message|enum, namespaced by package

CASE ==>                          #  - kept as is: package, message, enum
                                  #  - converted to UpperCase: fields, oneof, map
                                  #  - converted to UPPERCASE: enum fields, oneof cases
                                  #  - converted to lowercase: toObject()

VARR|PACKAGE                      #Just plain OBJ

new Message()                     #"Message" is the Message name
MESSAGE.toObject()->OBJ           #
MESSAGE.cloneMessage()->MESSAGE2  #

MESSAGE.getFIELD()->VAL           #
MESSAGE.setFIELD(VAL)->MESSAGE    #

ARR_FIELD                         #Uses the following methods instead.
MESSAGE.getFIELDList()->ARR
MESSAGE.setFIELDList(ARR)->MESSAGE
MESSAGE.clearFIELDList(ARR)
 ->MESSAGE
MESSAGE.addFIELD(VAL[,INDEX])
 ->MESSAGE                        #Def INDEX: last

NESTED_MESSAGE_FIELD              #undefined if not set
                                  #Also have the following additional methods.
MESSAGE.clearFIELD()->MESSAGE
MESSAGE.hasFIELD()->BOOL          #Only if nested message field

BYTES_FIELD                       #Use BUFFER|BASE64_STR
                                  #Converted to BASE64_STR in toObject()
                                  #Also have the following additional methods.
MESSAGE.getFIELD_asB64()
 ->'BASE64_STR'
MESSAGE.getFIELD_asU8()->UINT8_ARR#

MAP_FIELD                         #Uses the following methods instead.
MESSAGE.getFIELDMap()->MAP        #
MESSAGE.clearFIELDMap()->MESSAGE  #

MESSAGE.ONEOFCase                 #OBJ:
                                  #  - value is ID_INT
                                  #  - key is either:
                                  #     - field name
                                  #     - {ONEOF}_NOT_SET (value 0)
MESSAGE.getONEOFCase()->ID_INT    #

ENUM                              #Just plain OBJ

MESSAGE.serializeBinary
 ()->UINT8_ARR
Message.deserializeBinary
 (UINT8_ARR)->MESSAGE             #Protobuf binary format

new BinaryWriter()
MESSAGE.serializeBinaryToWriter
 (MESSAGE, BINARY_WRITER)
BINARY_WRITER.getResultBuffer()
 ->UINT8_ARR
new BinaryReader()
Message.
 deserializeBinaryFromReader
 (MESSAGE, BINARY_READER)->MESSAGE#Same but more advanced


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    LANGUAGE-SPECIFIC OPTS     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LANGUAGE-SPECIFIC OPTS ==>        #Top-level OPTs for specific languages.

OPT.java_outer_classname          #"Class". For outermost Java class name.
                                  #Def: filename, CamelCased
OPT.java_multiple_files           #BOOL (def: false). For Java. Split generated code into several files.
OPT.cc_enable_arenas              #BOOL (def: false). For C++. Memory optimization.
OPT.optimize_for                  #For C++|Java. How to optimize generated code. Can be:
                                  #  - "SPEED" (def)
                                  #  - "LITE_RUNTIME": like SPEED but uses libprotobuf-lite instead of libprotobuf, which
                                  #    has fewer features (no reflection nor descriptors)
                                  #  - "CODE_SIZE"
OPT.objc_class_prefix             #STR. Objective-C class prefix.

