
              
   PROTOBUFJS  
              



VERSION ==>                       #6.10.2
                                  #Node/browser

protobufjs/light|minimal???

https://github.com/protobufjs/protobuf.js#valid-message

load('PATH')->PROMISE_FILE        #

FILE.lookupType('MESSAGE_TYPE')
 ->MESSAGE_TYPE                   #

FILE_DESCRIPTOR                   #OBJ reflection representation of a FILE.proto
Root.fromJSON
 (['PATH',]FILE_DESCRIPTOR)->FILE #
FILE.toJSON()->FILE_DESCRIPTOR    #
Root|Type|Field(...)              #Create FILE_DESCRIPTOR dynamically.
                                  #Not documented here since using FILE.proto is usually better.
                                  #TypeScript decorators also available.

MESSAGE_TYPE.verify(OBJ)[->'ERR'] #Validate OBJ

MESSAGE_TYPE.create(OBJ)->MESSAGE #Convert OBJ to MESSAGE
MESSAGE_TYPE.fromObject(OBJ)
 ->MESSAGE                        #Same but also converts???
MESSAGE_TYPE.toObject             #OPTS:
 (MESSAGE[, OPTS])->OBJ           #  - enums STR???
                                  #  - longs STR???
                                  #  - bytes STR???
                                  #  - defaults BOOL: leave default values, instead of undefined
                                  #  - array BOOL???
                                  #  - objects BOOL???
                                  #  - oneofs BOOL???

MESSAGE_TYPE.encode[Delimited]    #Serialize
 (OBJ|MESSAGE[, WRITER])->WRITER  #If "Delimited", also serialize the length of the message, allowing multiple messages to be written.
MESSAGE_TYPE.decode[Delimited]
 (READER|UINT8_ARR)->MESSAGE      #Parse

SERVICE_TYPE.create
 (FUNC(RPC, REQ_OBJ,
 FUNC2(ERROR, RES_OBJ))[()])->SERVICE #
                                  #If streaming, use STREAMS
SERVICE.RPC(REQ_OBJ)->PROMISE_RES_OBJ
