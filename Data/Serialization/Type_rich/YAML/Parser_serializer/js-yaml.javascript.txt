
           
   JS-YAML  
           



ALTERNATIVES ==>                  #  - js-yaml: more features, more support
                                  #  - yaml.js
                                  #Prefer js-yaml

VERSION ==>                       #3.13.1
                                  #YAML parser|serializer
                                  #Supports YAML 1.2, and custom types
                                  #CLI, browser or Node.js


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


YAML.[safe]Load                   #Parses YAML to JavaScript
 ('YAML'[_BUFFER][, OPTS])        #Multi-documents files will throw error
 ->VAL                            #OPTS:
                                  #  - schema VAL: YAML schema among:
                                  #     - YAML.FAILSAFE_SCHEMA: !!map !!seq !!str
                                  #     - YAML.JSON_SCHEMA: as opposed to spec, is actually same as CORE_SCHEMA
                                  #     - YAML.CORE_SCHEMA: all JSON types
                                  #     - YAML.DEFAULT_SAFE_SCHEMA (def with safeLoad()): all standard YAML types
                                  #     - YAML.DEFAULT_FULL_SCHEMA (def with load()): also !!js/undefined|regexp|function
                                  #    Has impact on performance, in order: 100%, 110%, 110%, 140%, 150%
                                  #  - json BOOL (def: false): ignore duplicate keys instead of throwing error (last one wins)
                                  #  - listener('open|close', TOKEN): called by parser on new token
                                  #Error handling:
                                  #  - either:
                                  #     - on warnings:
                                  #        - calls OPTS.onWarning(ERROR) or (if not defined) ignores
                                  #        - can be: wrong YAML version, wrong directive, weird Unicode chars
                                  #     - on errors: throw ERROR
                                  #  - ERROR is YAMLException:
                                  #     - name 'YAMLException'
                                  #     - message STR:
                                  #        - uses OPTS.filename 'FILE'
                                  #        - includes where error was in 'YAML' document
                                  #     - stack
YAML.[safe]LoadAll('YAML'[_BUFFER]
 [, FUNC(VAL)][, OPTS])->ARR      #Same but allows multi-documents file, and FUNC fired for each

YAML.[safe]Dump(VAL[, OPTS])      #Serializes JavaScript to YAML
 ->'YAML'                         #OPTS:
                                  #  - schema VAL: like [safe]Load()
                                  #  - skipInvalid BOOL (def: false): whether to ignore invalid types, or throw error
                                  #  - noRefs BOOL: if false (def), adds &REF when two objects are ===
                                  #  - styles.!!TYPE 'STYLE':
                                  #     - how to serialize types that have several possible representations
                                  #     - possible STYLE:
                                  #        - "lowercase|uppercase|camelcase": for !!null, !!bool, !!float (NaN, Inf)
                                  #        - "canonical": for !!null (~)
                                  #        - "binary|octal|decimal|hexadecimal": for INT
                                  #  - noCompatMode BOOL:
                                  #     - if false (def), tries to be YAML 1.1 compatible
                                  #     - at the moment, only: serialize "on|off|yes|no|y|n" as quoted STR instead of unquoted
                                  #  - indent NUM (def: 2)
                                  #  - lineWidth NUM (def: 80): does not break inside words, i.e. might be more than lineWidth
                                  #  - flowLevel NUM:
                                  #     - uses "flow style" at NUMth depth level (0 is root), "block style" otherwise
                                  #     - -1 (def) means no "flow style"
                                  #  - condenseFlow BOOL (def: false): no whitespaces between elements in "flow style"
                                  #  - noArrayIndent (def: false): do not add extra indentation on ARR elements
                                  #  - sortKeys BOOL (def: false) or FUNC('VAR', 'VAR2')->-1|0|1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CUSTOM TYPES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


YAML.Schema.create(YAML_TYPE_ARR)
 ->SCHEMA                         #SCHEMA can be used in OPTS.schema
new YAML.Type('!TYPE', OPTS)      #OPTS:
                                  #  (check if type applies)
                                  #    (parsing)
                                  #      - kind 'mapping' (OBJ-like), 'sequence' (ARR-like) or 'scalar'
                                  #      - resolve(YAML_VAL)->BOOL (def: always true)
                                  #    (serialization)
                                  #      - predicate(JS_VAL)->BOOL (def: always true)
                                  #      - instanceof FUNC (def: always true)
                                  #  (transformation)
                                  #    (parsing)
                                  #      - construct(YAML_VAL)->JS_VAL
                                  #    (serialization)
                                  #      - represent[.STYLE](JS_VAL)->YAML_VAL (def: identity function)
                                  #      - defaultStyle 'STYLE'
                                  #      - styleAliases.STYLE 'STYLE2'_ARR
                                  #Note:
                                  #  - JS_VAL:
                                  #     - is what is load() output, dump() input
                                  #  - YAML_VAL:
                                  #     - is JavaScript, not STR
                                  #     - i.e. will be serialized further by dump(), and has already been parsed by load()
                                  #     - might be null if YAML value is "nothing"
                                  #     - will be OBJ if kind 'mapping', ARR if 'sequence'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


js-yaml YAML_FILE                 #Prints result of parsing to JavaScript
--compact                         #Display errors in compact mode
--trace                           #Show stack trace on errors

GULP-YAML([OPTS])->IOSTREAM      ##YAML to JSON
                                 ##OPTS:
                                 ##  - schema STR, safe BOOL (def: true), filename STR, json BOOL, onWarning:
                                 ##    passed to YAML.[safe]Load()
                                 ##  - replacer (def: null), space (def: null): passed to JSON.stringify()
                                 ##  - ext STR (def: '.json')
                                 ##Version 2.0.4


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BROWSER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SUPPORT ==>                       #Browserify might not work
                                  #Must load esprima for !!js/functions to work
                                  #!!binary parsed as INT_ARRAY (0-255) not BUFFER
