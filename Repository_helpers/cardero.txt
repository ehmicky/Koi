*Done*

_Messages upload_
  - Feature is done!
  - The only missing thing is doing a security scan on file content during upload. I'll check providers in-between two features later and add this then.
  - Fix bugs:
     - when uploading files during integration tests
     - wrong validation of messageId on `updateAttachment`
     - missing input validation of attachment `filename` max size
  - Final round of manual + automated testing
     - there are now 53 tests covering this feature
  - Fix documentation missing `attachments` for `ResourceNotFound` errors

_Dependencies_
  - upgrade `@sentry/node`
  - upgrade `aws-sdk`
  - upgrade `gulp-shared-tasks`
  - upgrade `libphonenumber-js`
  - upgrade `log-process-errors`

*Plans*
  - First I would like to fix the current API to make it easier to onboard new front-end developers.
    Starting with adding Docker and updating how to build the API.
  - Then I can jump on the next feature. From last discussion, it seems that Subscriptions/payouts were the next priority item?

To do:
  - 'winston-mongodb: preconnected object support is deprecated and will be removed in v5'
  - issues with gulp dev
     - also watching does not work
  - add UUID/slug `x-example` to all OpenAPI route parameters
  - remove all /* eslint-disable max-lines */ comments by splitting files
  - Dockerfile
  - Calendars: wait for front-end to merge, do database migration and deploy
  - Rebase calendar branch
  - x-oneOf does not work
     - in Thread.userData.lastReadMessage and User.calendar.link
     - unskip tests
  - x-dependencies does not work
     - unskip test
  - checkDuplicate() for Tags should be case-insensitive
  - try to force tests to pass:
     - when merging to master branch
     - when deploying to production
  - security in messages uploads:
     - Add Referrer Policy on whole bucket
     - Use pre-signed URL for `Attachment`
     - perform a security scan on payload during POST /attachments?message=ID
  - Stripe subscriptions and payouts
  - Pending front-end features:
     - User tags
     - Location search
     - Calendars (new endpoints and possibility to have several calendars per user)
     - Expert listings
     - User reviews
     - Messages file uploads
  - OpenAPI/normalization:
     - improve validation error messages
     - replace authorization middleware
     - replace routes
     - response validation
     - enforce CRUD endpoints by passing only the model names, then core provides with routes
     - remove controllers, enforcing using always the same services methods
  - why is createUser so slow locally?
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for: filter, aggregation, pagination, sorting, population
  - check missing tests (test coverage)
  - check Stripe API doc
  - add some queries to check for data integrity (e.g. slugs are ok)
  - improve body parsing:
     - e.g. errors (payload too large) trigger 500
  - automated system that syncs staging database with production database
  - yamllint
  - upgrade helmet
  - learn latest MongoDB and upgrade it
  - improve populateMany()
  - populatedev either:
     - use declarative way (with JSON-SCHEMA-MOCKER) instead of current approach
     - generate from OpenAPI
  - analytics:
     - add more graphs to MongoDB Atlas:
        - including based on `logs` collection
        - use views for mongodb charts to allow for aggregated queries
     - see bottom of this file for more ideas
  - document sanitize-html library
  - add DNSSEC
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
  - add API documentation about `isAdmin` check

Analytics:
  Acquisition
    Number of new users, but abandoned (Didn't e-mail verify)
    Number of new users per day (E-mail Verified)
    Number of new phone verifications per day
    Number of first "selling" transaction per day (someone who received funds for the first time)
    Number of first "buying" transactions per day (someone who completed a transaction for the first time - not only visa confirmation, but funds transferred to someone else)
    Tracking against time (So we can understand behaviour and learn how to optimize the experience)
  Date and time user signed up (corelated with their user ID)
    Just want to make sure we can track an activity metric and also understand how long it took a user to do something. Then we can look at thinks like:
    Average time to first e-mail message
    Average time to first transaction
    Time to filling out a profile
    User demographics
  Country (presumably from web activity data, or phone verification?)
    Age, (#, and "undefined" for those who haven't shared it)
    Gender (M/F/Other and "undefined" for those who haven't shared it)
    Transactions
  Total number of transactions per day (All users)
    Total amount of $ (USD) spent by users per day
    Total amount of Income earned by users per day
    Total amount of Revenue for Prismlink per day
    Churn
  Number of users without a login/activity in 7 days
    Number of users without a login/activity in 14 days
    Number of users without a login/activity in 21 days
    Number of users without a login/activity in 28 days
    Platform activity
  Active connection categories sorted by popularity, and with average asking price
    Daily Snapshot of Total number of users "available to be contacted"
    Daily Snapshot of Total number of users "Not available to be contacted"
    Daily Snapshot of users with a profile picture loaded
    Number of platform e-mail messages sent (or received) per day
