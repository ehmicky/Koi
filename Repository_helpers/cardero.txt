*Done today*

_Bugs_
  - Fix `updateTerm()` resetting some attributes to `null` when not specified
  - Fix `getTerm()` and `getTerms()` failing when user is not logged in

_Tests_
  - `createUser()`:
     - check for default `terms` during user creation
  - `updateUser()`:
     - fix `user.terms` update tests
     - fix HTML sanitization test on `user.longDescription`
  - `createTerm()`:
     - check default `Term` attributes
     - check `user.terms` is updated with new term
     - better validation of `Term` creation (do a separate `GET` request)
     - check that new `Term` has `term.thread` `undefined`
  - `updateTerm()`:
     - cannot be done with another user
     - wrong ID results in `404`
     - invalid `term.title`
     - invalid `term.description`
  - `getTerm()`:
     - check normal request
     - wrong ID results in `404`
  - `getTerms()`:
     - check normal request
     - does not return threads terms
     - only return current user's terms
     - `?isEnabled` parameter success
     - `?q` parameter success
     - invalid `?isEnabled` parameter
     - invalid `?q` parameter
  - `deleteTerm()`:
     - check normal request
     - check term is deleted from `Term` collection
     - check term is removed from `user.terms`
     - not allowed for non-logged in users
     - only allowed for terms of current user
     - invalid `termId` results in `404`
  - Simplify several tests

_API documentation_
  - Add `terms` to `404` error description

_Helpers_
  - Add database helper to filter nested children

To do:
  - check tasks
     - add missing tasks
  - /users/me/terms -> /terms:
     - POST|PUT|DELETE only allow for current user
     - POST use current user
     - GET allow for any user
     - getTerms() has ?user=USER_ID|SLUG
  - fix `GET /users?countBy`
  - add `GET /users/USER._id|slug/terms[/TERM._id]` (right now can only `GET /users/me`)
     - same for all other methods, except they will fail with other users (see `checkTerm()`)
     - at the moment, USER is always `me`, even for anonymous users, i.e. it crashes then
  - add `GET /users/USER/terms?ids`
  - add `GET /users/USER/terms?charities`
  - add `GET /users/USER/terms?price`
  - remove `GET /users/USER/terms?enabled`?
  - `term.isEnabled` -> `term.disabled` (with `undefined` counting as `false`)
  - `user.calendarLink[Public]` -> `user.calendar.link|public`
  - to decline a thread with message: do `POST /messages` with `{ status: 'declined' }` instead of doing a `PUT /thread` with `{ message }`
     - no need for `thread` `getUpdateAttributes` to be async anymore
     - make sure notification still works
  - add sorting to `GET /users/USER/terms`
  - add pagination to `GET /users/USER/terms`
  - add `?countBy=title` and `?items` to `GET /users/USER/terms`
  - `GET /users/me/termTitles` -> `GET /users/USER/terms?countBy=title`
  - try to remove `GET /threads?termTitles`:
     - it forces doing `thread.terms` populating before filtering and paginating
     - it forces doing `countThreads` differently
  - `user.terms` is limited to 8, but not the right way: it's done through `maxItems` validation on `updateUser()` `{ terms }`
    instead of being on `createTerm()`
  - check diff a50dde4 again
  - forbid `term.title` with only whitespaces
     - and trim whitespaces

To do:
  - fix this document
  - put max line length to 80 instead
  - document sanitize-html library
  - improve populateMany()
  - shut down Apifini:
     - DNS redirection
     - make DB backup then remove MongoDB Atlas
     - remove Heroku machines (or just turn them off?)
     - shut down paid services
     - remove my bookmarks
     - comment out in edprof
     - remove VS code workspaces
  - Upgrade:
     - joi 14.3.0
     - node latest
     - `winston-transport` `4.3.0`
     - `mongoose` `5.4.1` (including using Types.Map instead of Map)
     - check npm outdated
  - OpenAPI:
     - add validate() to all routes (git stashed)
        - make sure it does not break client (some error shapes have changed)
        - stop using joi
     - replace authorization middleware
     - replace routes
     - response validation
  - API normalization:
     - enforce CRUD endpoints by passing only the model names, then core provides with routes
     - remove controllers, enforcing using always the same services methods
  - Experts feature: https://docs.google.com/document/d/1zEmLtPb45rR90eZbLekOItpuymLmkjiTFwNYndY0bCw/edit#heading=h.iseiddwkxewg
  - add better limit for `max` integers (e.g. for credits)
  - update favicon
  - check missing tests
  - check Stripe API doc
  - `hasMessagesFromMe|Others` won't work anymore once messages can be sent with a thread rejection
  - abstract common logic into shared repository, and use that
  - replace requestId by eventId (i.e. not only for requests, also for any log event)
  - add more Redash queries to check for data integrity (e.g. slugs are ok)
     - setup alerts
     - Analytics (see bottom of this file)
  - upgrade helmet
  - https://trello.com/c/QRQiUJAB/174-individual-ratings-do-not-reflect-the-proper-value-when-admin-sets-a-custom-rating
  - on `Sheet|Post.description` create|update: HTML sanitization
     - run against current posts to make sure it does not modify them
  - on-going: tests, API documentation and refactoring for `/icos` endpoints
     - should sanitize ICO private notes' HTML
  - Feed:
     - current Feed vs Post|Sheet division is not right:
        - not being able to filter|sort by Feed.content.* or Post|Sheet.feedItem.* is too restrictive, e.g.:
           - fetch popular posts for a given ICO
           - Feed text search on Post description
           - do not show unlisted/private Posts|Sheets in `GET /posts|sheets`
     - do not populate `Post.icos[*].ico` on `GET /posts` (but do it on `GET /posts/:id`)
        - need to do client changes as well
     - fix `populateMany()` helper so that it preserves sorting order
        - fix the places that use it and currently have to re-sort
     - allow filtering feed by ICO
  - `Sheet` automatic adding feature
     - should perform database migrations to re-actively do it on current users
  - Feed text search
  - `ico owner` role:
     - on user creation, `User.roles` should default to an empty array
     - when an ICO is requested, its owner gets the `User.roles` `ICO_OWNER` (unless already one)
     - when an ICO is deleted, its owner loses the `User.roles` `ICO_OWNER`
     - front-end should not use `ICO_OWNER` role in any fashion at the moment, i.e. those should be removed
     - current users should be migrated to display the correct `User.roles` depending on whether they own an ICO or not
  - fix deleted ICOs still showing up: https://trello.com/c/rQuTpeyV/86-deleted-icos-are-still-available-in-the-ico-details-page-url. Proposal:
     - `ICO.state` can be set to `draft`, `public`, `hidden` or `deleted` with `PUT /icos/:icoId`
        - when an `ICO` is created, `ICO.state` defaults to `draft`
        - it is eventually published by setting `ICO.state` to `public`
        - it can then be deleted or hidden by setting `ICO.state` to `deleted|hidden`
     - updating `ICO.state` can only be done by Admins
        - ICO owners can make an ICO edit request though
     - neither the `ICO` nor any of its related data is never removed from the database.
     - modifying an ICO (`PUT`, `POST`, `DELETE`, `PATCH`) should return `400` (i.e. read-only) if `ICO.state` is `deleted`. Other `ICO.state` do not have that restriction
     - `GET` a deleted/draft/hidden `ICO` by ID/slug should return `404` unless `?state=["draft|public|hidden|deleted", ...]` query parameter is used (default: `['public']`)
     - `GET` several `ICO`s should skip deleted/draft/hidden ICOs unless `?state=["draft|public|hidden|deleted", ...]` query parameter is used (default: `['public']`)
     - this is for any ICOs requests, whether being top-level on `/icos` or as a nested attribute within another route/model.
     - When it comes to the front-end, it should use `?state` parameter depending on the use case:
        - ICO lists vs calendar vs main listing page vs etc.
        - front-end app vs admin app
        - etc. (edited)
  - add API documentation about `isAdmin` check on `/tags`, `/metrics` `/users` endpoints
  - why is `GET /users?q` test randomly failing? Seems like index is not properly built by Mongoose
  - slugs:
     - use slugify from Sindresorhus instead
     - generate new slugs on database
  - learn latest MongoDB and upgrade it
  - finish branch feature/errors_v2
     - also fix errors in API documentation
     - do not report local errors to Sentry, only stage and production
  - improve body parsing:
     - e.g. errors (payload too large) trigger 500
  - blog post about test-openapi
  - integration testing
     - also test middleware (not only endpoints)
  - refactoring:
     - make status codes more consistent and hide behind a common interface
     - refactor authentication to simplify it
  - migrations:
     - check production database matches our data model (perform live queries to fix it otherwise)
     - automated system that syncs staging database with production database
     - system to perform and test migrations against production database
  - add a model layer between controller and Mongoose:
     - provide caching invalidation functionality
     - provide ICO slug update functionality
     - make any DELETE flag the model as deleted, but not removed from database
  - upgrade node.bcrypt.js to fix security vulnerability (when they release a version)
  - Gulp buildwatch crashes (does not watch anymore) after the first OpenAPI error
  - switch Jasmine to Jest, like in front-end
  - add Flow
  - RSS/Atom
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
 Â - replace current dependency REQUEST by CROSS-FETCH
  - lint-staged currently does not allow committing only half of a file
  - use declarative way (with JSON-SCHEMA-MOCKER) instead of current approach for populating scripts
  - create fake|test database from OpenAPI:
     - can maybe specify in OpenAPI if a specific type of data is prefered
        - e.g. at least one user should be admin
        - can use faker, etc.
     - can replace populating scripts
     - can be merged with the test populating task at beginning of integration tests
  - use JSON schema instead of joi:
     - probably using SWAY.validateRequest|Response()
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
     - also validate response
     - also parse request parameters
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - deleting users
  - generate Mongoose models from OpenAPI specification
  - add GraphQL:
     - swagger-to-graphql would allow automating it while still supporting REST
     - I estimated it at 2 days of work
  - other possible uses of OpenAPI:
     - server-side routing
     - web automation
     - mock server
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged

Analytics:
  Acquisition
    Number of new users, but abandoned (Didn't e-mail verify)
    Number of new users per day (E-mail Verified)
    Number of new phone verifications per day
    Number of first "selling" transaction per day (someone who received funds for the first time)
    Number of first "buying" transactions per day (someone who completed a transaction for the first time - not only visa confirmation, but funds transferred to someone else)
    Tracking against time (So we can understand behaviour and learn how to optimize the experience)
  Date and time user signed up (corelated with their user ID)
    Just want to make sure we can track an activity metric and also understand how long it took a user to do something. Then we can look at thinks like:
    Average time to first e-mail message
    Average time to first transaction
    Time to filling out a profile
    User demographics
  Country (presumably from web activity data, or phone verification?)
    Age, (#, and "undefined" for those who haven't shared it)
    Gender (M/F/Other and "undefined" for those who haven't shared it)
    Transactions
  Total number of transactions per day (All users)
    Total amount of $ (USD) spent by users per day
    Total amount of Income earned by users per day
    Total amount of Revenue for Prismlink per day
    Churn
  Number of users without a login/activity in 7 days
    Number of users without a login/activity in 14 days
    Number of users without a login/activity in 21 days
    Number of users without a login/activity in 28 days
    Platform activity
  Active connection categories sorted by popularity, and with average asking price
    Daily Snapshot of Total number of users "available to be contacted"
    Daily Snapshot of Total number of users "Not available to be contacted"
    Daily Snapshot of users with a profile picture loaded
    Number of platform e-mail messages sent (or received) per day
