To do:
  - try to remove `categoryTitles`:
     - `GET /users/me/categoryTitles`:
        - get list of filtering `category.title` on the thread list
        - API:
           - find all unique `category.title` for all threads
              - after applying thread filters, including "current user is receiver or sender"
           - sort by most recently used
     - `GET /threads?categoryTitles=[title...]`
        - filter by `category.title` on the thread list
        - API filters by `thread.category.title`
     - replacement:
        - `GET /categories?thread=me&countBy=["title"]`
           - `countBy` should always sort by biggest value
     - problems:
        - it forces doing `thread.categories` populating before filtering and paginating
        - it forces doing `countThreads` differently
        - it forces `getThreads()` controller to export `getDbFilter()`
     - maybe `GET /categories?countBy=title`?
  - fix this document
  - put max line length to 80 instead
  - document sanitize-html library
  - improve populateMany()
  - shut down Apifini:
     - DNS redirection
     - make DB backup then remove MongoDB Atlas
     - remove Heroku machines (or just turn them off?)
     - shut down paid services
     - remove my bookmarks
     - comment out in edprof
     - remove VS code workspaces
     - remove robomongo connections
  - Upgrade:
     - joi 14.3.0
     - node latest
     - `winston-transport` `4.3.0`
     - `mongoose` `5.4.1` (including using Types.Map instead of Map)
     - check npm outdated
  - VS Code:
     - during snippet filling, there is no possibility to autocomplete other snippets or to autocomplete words
  - OpenAPI:
     - add validate() to all routes (git stashed)
        - make sure it does not break client (some error shapes have changed)
        - stop using joi
     - replace authorization middleware
     - replace routes
     - response validation
  - API normalization:
     - enforce CRUD endpoints by passing only the model names, then core provides with routes
     - remove controllers, enforcing using always the same services methods
  - Experts feature: https://docs.google.com/document/d/1zEmLtPb45rR90eZbLekOItpuymLmkjiTFwNYndY0bCw/edit#heading=h.iseiddwkxewg
  - add better limit for `max` integers (e.g. for credits)
  - update favicon
  - check missing tests (test coverage)
  - check Stripe API doc
  - `hasMessagesFromMe|Others` won't work anymore once messages can be sent with a thread rejection
  - replace requestId by eventId (i.e. not only for requests, also for any log event)
  - add more Redash queries to check for data integrity (e.g. slugs are ok)
     - setup alerts
     - Analytics (see bottom of this file)
  - upgrade helmet
  - add API documentation about `isAdmin` check
  - slugs:
     - use slugify from Sindresorhus instead
     - generate new slugs on database
  - learn latest MongoDB and upgrade it
  - improve body parsing:
     - e.g. errors (payload too large) trigger 500
  - blog post about test-openapi
  - migrations:
     - check production database matches our data model (perform live queries to fix it otherwise)
     - automated system that syncs staging database with production database
     - system to perform and test migrations against production database
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
  - use declarative way (with JSON-SCHEMA-MOCKER) instead of current approach for populating scripts
  - create fake|test database from OpenAPI:
     - can maybe specify in OpenAPI if a specific type of data is prefered
        - e.g. at least one user should be admin
        - can use faker, etc.
     - can replace populating scripts
     - can be merged with the test populating task at beginning of integration tests
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - yamllint

Analytics:
  Acquisition
    Number of new users, but abandoned (Didn't e-mail verify)
    Number of new users per day (E-mail Verified)
    Number of new phone verifications per day
    Number of first "selling" transaction per day (someone who received funds for the first time)
    Number of first "buying" transactions per day (someone who completed a transaction for the first time - not only visa confirmation, but funds transferred to someone else)
    Tracking against time (So we can understand behaviour and learn how to optimize the experience)
  Date and time user signed up (corelated with their user ID)
    Just want to make sure we can track an activity metric and also understand how long it took a user to do something. Then we can look at thinks like:
    Average time to first e-mail message
    Average time to first transaction
    Time to filling out a profile
    User demographics
  Country (presumably from web activity data, or phone verification?)
    Age, (#, and "undefined" for those who haven't shared it)
    Gender (M/F/Other and "undefined" for those who haven't shared it)
    Transactions
  Total number of transactions per day (All users)
    Total amount of $ (USD) spent by users per day
    Total amount of Income earned by users per day
    Total amount of Revenue for Prismlink per day
    Churn
  Number of users without a login/activity in 7 days
    Number of users without a login/activity in 14 days
    Number of users without a login/activity in 21 days
    Number of users without a login/activity in 28 days
    Platform activity
  Active connection categories sorted by popularity, and with average asking price
    Daily Snapshot of Total number of users "available to be contacted"
    Daily Snapshot of Total number of users "Not available to be contacted"
    Daily Snapshot of users with a profile picture loaded
    Number of platform e-mail messages sent (or received) per day
