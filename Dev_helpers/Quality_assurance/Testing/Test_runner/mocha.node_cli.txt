
         
   MOCHA  
         



ALTERNATIVES ==>                  #  - Mocha:
                                  #     - minimalistic
                                  #     - no CPU parallelism, unbounded I/O parallelism through library
                                  #  - Ava (prefered server-side):
                                  #     - less modular: runner + simple assertions + diff testing
                                  #     - unbounded I/O parallelism (concurrent tests), bounded CPU parallelism (CHILD_PROCESS.fork() each test file)
                                  #     - includes power-assert
                                  #     - includes babel
                                  #     - only server-side
                                  #  - Jest (prefered client-side):
                                  #     - much less modular: runner + assertions + data-driven testing + mocks/spies + timers mocks + modules mocks
                                  #       + diff testing + memory leaks detection + test coverage
                                  #     - test-framework-like features:
                                  #        - can be used to run other logic than testing (e.g. linting or compiling)
                                  #        - can pre-process files (e.g. Babel)
                                  #     - unbounded I/O parallelism (concurrent tests), bounded CPU parallelism (CHILD_PROCESS.fork() each test file)
                                  #     - interactive mode
                                  #     - nice reporting
                                  #     - can test only modified files
                                  #     - global sandboxing, including JSDOM
                                  #  - Jasmine:
                                  #     - less modular (runner + assertions + mocks/spies + timers mocks + XHR mocks)
                                  #     - less reporters
                                  #     - less features as a runner
                                  #     - no parallelism
                                  #  - QUnit: more TDD than BDD. Not as many features
                                  #  - Tape:
                                  #     - TAP serializer
                                  #     - in-JavaScript (no external test runner)
                                  #     - minimalistic: no PROMISE support, hooks, selection, bail, watch
                                  #     - no parallelism
                                  #     - no exception handling, and failed assertions do not throw
                                  #  - tape-modern: similar to tape but:
                                  #     - no need for TEST.end()
                                  #     - exception handling
                                  #     - slightly less TAP output capability
                                  #     - less test runners features: timeout, process 'exit' handler
                                  #  - node-tap:
                                  #     - less modular: runner + simple assertions + diff testing + test coverage
                                  #     - TAP output, but not great, so should use built-in reporters (similar to Mocha's)
                                  #     - either in-JavaScript or external test runner
                                  #     - bounded I/O parallelism (concurrent tests), bounded CPU parallelism (CHILD_PROCESS.spawn() each test file)
                                  #     - bad exception handling, failed assertions do not throw
                                  #     - can run only previously failed tests

VERSION ==>                       #7.1.2
                                  #Node.js, browser and CLI

REPORTERS ==>                     #See Mocha reporters doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


describe(STR, FUNC())             #FUNC must fire it|before|after[Each]()
                                  #But can do any JavaScript, e.g. data-driven testing:
                                  #  ARR.forEach(VAL => it(STR + VAL, FUNC2))
                                  #Nested describe() will create indentations.
                                  #Using an already defined describe(STR) will get it instead of setting it.

it(STR, FUNC([FUNC2]))            #Will be async if:
                                  #  - FUNC2 is defined (or mocha -A|--async-only is used),
                                  #    in which case must fire FUNC2([ERROR])
                                  #  - return PROMISE
                                  #To make test fail, throw an ERROR

before|after([STR, ]FUNC([FUNC2]))#Fire FUNC() once before|after the current describe() or (if none) all describe()
                                  #Child describe()'s before() are fired after their parent, after() before their parent.
                                  #STR is description. Only shown when FUNC() fails.
before|afterEach
 ([STR, ]FUNC([FUNC2]))           #Same but fired once for each it() instead

-r MODULE
--require MODULE                  #Fires require(MODULE) at beginning
--file FILE                       #Require a FILE

this                              #Is shared by all it|before|after[Each]() in a given describe()
                                  #Child describe() get a shallow copy.
                                  #Because of this, arrow functions should not be used
this.*                            #Contains some information about current it|before|after[Each](),
                                  #e.g. title, body, timeout, async, skip, parent|children

run()                             #Starts all run tests.
                                  #Only available when mocha --delay was used.
                                  #Useful when setting up describe() is async

-u STR                            #How functions are named:
--ui STR                          #  - "bdd" (def): describe|context(), it|specify(), before|after[Each]()
                                  #  - "require": same as "bdd" but must const { describe, ... } = require('mocha')
                                  #  - "tdd": suite(), test(), [suite]setup|teardown()
                                  #  - "exports": module.exports = { before|after[Each](...), STR: { ...: FUNC(...) } }
                                  #  - "qunit": suite(), test(), before|afterEach(), but without nesting
                                  #Custom ones can be created (see online doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #Can be:
                                  #  - --[no-]OPT
                                  #  - --config=FILE or --no-config
                                  #  - ./.mocharc.js|json|y[a]ml|jsonc
                                  #  - PACKAGE.mocha OBJ
                                  #     - --package=PACKAGE.json or --no-package


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SELECTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


describe.skip(...)                #Skip this
it.skip(...)                      #Can also omit FUNC
this.skip()                       #Same inside it|before[Each]()

describe.only(...)
it.only(...)                      #Only run this

--forbid-only|pending             #Disallow it.only|skip()

mocha [FILE|DIR...]               #Runs test files
                                  #Def: ./test/*.js|mjs
--recursive                       #Looks recursively into DIR
                                  #Def will be ./test
--ignore 'FILE|GLOB'              #Exclude files (uses Minimatch, see its doc)

-g REGEXP                         #Only run test cases which description matching partially REGEXP
--grep REGEXP                     #Can be used with pseudo-tags, e.g. "#..." or "@..." to include|exclude
-f STR
--fgrep STR                       #Same with just string matching
-i
--invert                          #Inverse -g or -f


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-b
--bail                            #Stops at first error
--exit                            #Calls process.exit() after all tests have run, even if some Node.js tasks are still hanging.
--allow-uncaught                  #Allow uncaught exceptions to stop the process.

-w                                #Runs then watches . for additional runs
--watch                           #Can type "rs" to restart tests
--watch-files GLOB,...            #
--watch-ignore GLOB,...           #

-S
--sort                            #Sort test files

--retries NUM                     #Silently retry tests if failed.
                                  #Only report last failure of a test if all retries failed
                                  #Can also use this.retries(NUM) inside it()

--OPT
--v8-OPT                          #Pass any option to node ...

--check-leaks                     #Errors if global variables are created
--globals VAR,...                 #Allow some global vars


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BROWSER ==>                       #See online doc for how to use Mocha in a browser
                                  #Can use mochawesome as a nice HTML reporter.

new Mocha([OPTS])                 #MOCHA
                                  #Most OPTS are available and are camelCase

MOCHA.addFile('FILE')->MOCHA      #FILE will be require'd(), i.e. cached
MOCHA.files                       #'FILE'_ARR
MOCHA.run(FUNC(NUM))->RUNNER      #NUM is number of failed tests

MOCHA.options                     #OPTS.
MOCHA.OPT(VAL)->MOCHA             #Sets MOCHA.options.OPT = VAL
                                  #Some OPT names are slightly different, e.g. MOCHA.reporter(REPORTER, REPORTER_OPTS)


GULP-MOCHA([OPTS])                #Executes Mocha tests (5.0.0)


mocha-phantomjs FILE|URL          #Command line (Node module)
                                  #Run mocha on HTML file using PhantomJS
                                  #HTML page should replace mocha.run() by:
                                  #  if (window.mochaPhantomJS){mochaPhantomJS.run();}else{mocha.run();}
-R MODULE                         #Reporter.
                                  #Some reporters based on Node.js modules will not work (since it is run in browser),
                                  #e.g. "html-cov"
-C|--no-color                     #
-t NUM                            #Test startup timeout
-A USERAGENT                      #
-c COOKIE_FILE                    #
-h HEADER_VAR=VAL                 #
-s WEBPAGE.SETTINGSVAR=VAL        #
-v WIDTHxHEIGHT                   #

GULP-MOCHA-PHANTOMJS(OBJ)        ##OBJ:
                                 ##  - reporter STR
                                 ##  - mocha OBJ
                                 ##  - dump FILE (redirected output)
                                 ##Client-side page must do (instead of mocha.run()):
                                 ##  if ( window.mochaPhantomJS ) { mochaPhantomJS.run() } else { mocha.run() }
                                 ##Version 0.6.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-c|C
--[no-]colors                     #

--full-trace                      #Show stack trace

ERROR.expected|actual             #If defined, many reporters will show a diff
--no-diff                         #Do not show diff
--inline-diffs                    #Show diffs in a more compact way


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPEED             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-t NUM                            #Test case timeout (def: 2000) (0 for none)
--timeout NUM                     #Can also use this.timeout(NUM) inside it|before[Each]|describe()
--no-timeouts                     #Same as -t 0
                                  #Implied by --inspect

-s NUM                            #Test case slow threshold (def: 75) (in ms).
--slow NUM                        #Slow test cases can be highlighted by REPORTER


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARALLELISM          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CPU PARALLELISM ==>               #The libraries below do not spawn new processes, i.e. only one event loop is used.
                                  #I.e. only one CPU core is used.
                                  #I did not find libraries that offer multiprocessing.
                                  #But they can still be useful with long I/O bound tests.

MOCHAPARALLEL(...)               ##To be used instead of describe(...).
                                 ##Runs it() inside a given describe() in parallel
                                 ##There are few quirks that do not work as describe|it|before|after[Each]() are monkey patched
                                 ##Module 'mocha.parallel' (0.15.6)
                                 ##this:
                                 ##  - each it() gets its own new OBJ
                                 ##  - before|after[Each]()'s `this` is global object
                                 ##  - two solutions:
                                 ##     - use arrow functions in it|before|after[Each]()
                                 ##     - use object declared inside describe()
                                 ##  - in either case, must be immutable object because of parallel it() runs

mocha-parallel-tests ...         ##To use instead of mocha ...
                                 ##Run describe() in parallel
                                 ##Module 'mocha-parallel-tests' (1.12.10)
--max-parallel NUM               ##


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LINTING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                      ##Module 'eslint-plugin-mocha' (6.3.0)

mocha/no-mocha-arrows            ##Avoid arrow functions with describe|it|before|after[Each]()
mocha/prefer-arrow-callback [OBJ]##Override of ESLint core rule (which should be disabled), which ignores
                                 ##non-arrow functions with describe|it|before|after[Each]()

mocha/no-global-tests            ##it() should be inside describe()
mocha/no-nested-tests            ##it() should not be inside another it()

mocha/max-top-level-suites [OBJ] ##Max OBJ.limit NUM (def: 1) describe() per file
mocha/no-setup-in-describe       ##describe() should only contain it|before|after[Each](), not other code
                                 ##Avoid this rule when using data-driven testing
mocha/no-async-describe          ##describe() should not contain async FUNC

mocha/no-identical-title         ##Avoid duplicated STR for two it|describe()
mocha/                           ##Matches REGEXP against describe|it() STR
 valid-suite|test-description    ##'FUNC'_ARR is function names "describe|it|etc."
 ['REGEXP'] ['FUNC'_ARR] [STR2]  ##STR2 is custom error message

mocha/no-hooks [OBJ]             ##Avoid before|after[Each]()
                                 ##OBJ: allow 'FUNC'_ARR
mocha/no-hooks-for-single-case   ##Avoid before|after[Each]() if there is only one it()
 [OBJ]                           ##OBJ: allow 'FUNC'_ARR
mocha/no-sibling-hooks           ##Only one before|after[Each]() per describe()
mocha/no-top-level-hooks         ##before|afterEach() should be inside describe()

mocha/handle-done-callbacks      ##If an async FUNC2 was defined, it must be called
mocha/no-return-from-async       ##If an async FUNC2 was defined, do not return a value
mocha/no-return-and-callback     ##If a callback was defined, do not return a value
mocha/no-synchronous-tests [OBJ] ##Force using async FUNC2, async|await or returning a PROMISE in every test.
                                 ##OBJ: allowed STR_ARR among 'callback', 'async', 'promise'

mocha/no-exclusive-tests [OBJ]   ##Avoid describe|it.only()
                                 ##OBJ: additionalTestFunctions 'FUNC'_ARR
mocha/no-skipped-tests [OBJ]     ##Avoid describe|it.skip()
                                 ##OBJ: additionalTestFunctions 'FUNC'_ARR
mocha/no-pending-tests           ##Avoid it(STR) with no FUNC
