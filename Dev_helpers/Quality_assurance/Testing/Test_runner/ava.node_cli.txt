
       
   AVA  
       



ALTERNATIVES ==>                  #See Mocha

VERSION ==>                       #1.2.1
                                  #Node or CLI

REPORTERS ==>                     #See ava reporters doc
ASSERTIONS ==>                    #See ava assertions doc
DIFF TESTING ==>                  #See ava snapshots doc

GLOB                              #Uses multimatch, i.e. can use '!...'

DEBUGGING ==>                     #Use ndb


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AVA                               #Should be named "test"

AVA('TEST_TITLE', TFUNC(TEST))    #Define a test
                                  #Thrown exceptions and rejectes promises make test fail.
                                  #'TEST_TITLE' must be unique for each test file

ASYNC ==>                         #Either:
                                  #  - TFUNC()->PROMISE|OBSERVABLE
                                  #  - AVA.[before|after*.]cb(...): end test with TEST.end()

AVA('TEST_TITLE',                 #Pass TARGS to TFUNC()
 TFUNC(TEST, TARGS...), TARGS...) #Meant for data-driven testing

TFUNC.title('TEST_TITLE',TARGS...)#Can be overriden to set 'TEST_TITLE' according to arguments
 ->'TEST_TITLE'                   #Only works when data-driven testing is used
                                  #Can then use:
                                  #  - AVA(TFUNC, ...): i.e. skip 'TEST_TITLE'
                                  #  - AVA(TFUNC_ARR): same as defining several tests

TEST.plan(NUM)                    #

AVA.before|after(...)             #Before|after all, for current test file
                                  #Same signature and async as tests
AVA.before|afterEach(...)         #Before|after each test, for current test file
                                  #Same signature and async as tests
AVA.after[Each].always(...)       #Same but also runs even if there were test failures

TEST.context                      #OBJ:
                                  #  - before(): initialized to {}
                                  #  - beforeEach(): shallow cloned from before()
                                  #  - beforeEach|test|afterEach(): shared by reference
                                  #  - after(): reference from before()

AVA.failing(...)                  #Make test pass if it fails (but reported as "known failure" by default reporter)
                                  #Make test fail if it passes.
                                  #Meant as temporary until test is fixed

AVA.meta.file                     #__filename of top-level test file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF ==>                          #Can be:
                                  #  - package.json "ava" CONF_OBJ
                                  #  - ROOT/ava.config.js exporting CONF_OBJ[()]
                                  #  - ava --FLAG: only the ones documented below, unless possible only through package.json

--init                            #npm install -D ava, then add npm script "npm test: ava"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SELECTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ava [FILE|DIR|GLOB...]            #Def: test[-*].js, *.test.js or test|__tests__/**/*.js
CONF.files                        #Always ignore fixtures|helpers|node_modules/** and _*

CONF.require                      #'MODULE'_ARR to require first

--match|m GLOB                    #Only run tests with matching TEST_TITLE
                                  #Can be done several times

AVA.skip(...)                     #Skip that test.
AVA.todo(...)                     #Skip that test. FUNC must not be defined

AVA.only(...)                     #Only run this test
                                  #Only for current file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--fail-fast                       #Stop all tests on first test failure

--watch|w                         #Watch mode (using Chokidar, see its doc)
                                  #Can be re-run by typing r
                                  #Can run --update-snapshots by typing u
CONF.sources                      #'GLOB'_ARR that trigger re-run in watch mode


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.log(...)                     #Like console.log(...) but indented for that test, and only shown on failure
                                  #In TAP output, is unknown line prepended by '  * '

--verbose|v                       #

--[no-]color                      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPEED             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.timeout(NUM)                 #As opposed to other test runners, timeout is reset to 0 each time another concurrent test ends
--timeout|T NUM|STR               #NUM is in ms, STR ends with 's|ms'
                                  #Def: none

--no-cache                        #Caches Babel compilation to tmp directory instead of ./node_modules/.cache/ava/
--reset-cache                     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARALLELISM          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--concurrency|c NUM               #CPU parallelism: run test files in parallel, in different processes, with maximum NUM processes at once
                                  #Def NUM: number of CPUs

I/O PARALLELISM ==>               #Tests within a specific test file are run in parallel.
AVA.serial[.before|skip|...](...) #Make this test serial instead
--serial|s                        #Make all tests serial instead
                                  #Also implies --concurrency 1

CI PARALLELISM ==>                #If currently run in multi-nodes CI, automatically uses CPU parallelism


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LINTING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                      ##Module eslint-plugin-ava (5.1.1)
                                 ##There is a recommended set with all rules errors except:
                                 ##  - off: max-asserts, no-cb-test and prefer-power-assert
                                 ##  - warn: no-todo-test

ava/no-unknown-modifiers         ##No typos in AVA.*() or assertion function names
ava/use-t-well                   ##Avoid typos in TEST.*()
ava/no-todo-implementation       ##AVA.todo() should not define any TFUNC
ava/no-nested-tests              ##No nested tests
ava/no-duplicate-modifiers       ##No duplicate modifiers like AVA.only.only()
ava/assertion-arguments [OBJ]    ##Correct number of arguments to assertions
                                 ##OBJ: message 'always|never': must [not] specify 'ASSERT_TITLE'

ava/no-cb-test                   ##No AVA.cb()
ava/test-ended                   ##Must call TEST.end() if AVA.cb()
ava/no-invalid-end               ##Must only call TEST.end() in AVA.cb()
ava/no-statement-after-end       ##No statements after TEST.end()

ava/test-title [STR]             ##Must set a 'TEST_TITLE'
                                 ##STR: 'always' or 'if-multiple' (def) (only if multiple test in current file)
ava/no-identical-title           ##No duplicate 'TEST_TITLE'

ava/no-ignored-test-files [OBJ]  ##Must not define tests outside OBJ.files (def: CONF.files)
ava/no-import-test-files [OBJ]   ##Must not import tests from OBJ.files (def: CONF.files)

ava/no-only-test                 ##No AVA.only()
ava/no-skip-test                 ##No AVA.skip()
ava/no-skip-assert               ##No ASSERT.skip()
ava/no-todo-test                 ##No AVA.todo()

ava/max-asserts [NUM]            ##Max number of assertions per test

ava/use-true-false               ##Use TEST.true|false(BOOL) instead of TEST.truthy|falsy(BOOL)
ava/prefer-power-assert          ##Avoid assertions that have same function name in POWER-ASSERT

ava/use-t                        ##TEST must be named "t"
ava/use-test                     ##AVA must be named "test"

ava/prefer-async-await           ##Prefer async|await over PROMISE
ava/no-async-fn-without-await    ##Must use await inside async FUNC


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BABEL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


HOW ==>                           #Babel is run on files before requiring them, and output to node_modules/.cache/ava/*
                                  #Transpiles:
                                  #  - test files (CONF.files)
                                  #  - helper files:
                                  #     - test|__tests__/helpers/** and test|__tests__/**/_*
                                  #     - can change CONF.extensions 'EXT'_ARR (def: ['js'])
                                  #  - not files required by them (source files)
                                  #Always run unless CONF.compileEnhancements false + CONF.babel false
ava --reset-cache                 #

CONF.babel.testOptions            #BABEL_CONF
                                  #Def BABEL_CONF.babelrc|configFile: true
                                  #Autofills BABEL_CONF:
                                  #  - cwd|filename|babelrcRoots|sourceFileName|sourceRoot
                                  #  - inputSourceMap
                                  #     - parse source map comment (using convert-source-map, see its doc)
CONF.babel.extensions             #'EXT'_ARR

POWER ASSERT ==>                  #Uses babel-plugin-espower (using @ava/babel-preset-transform-test-files)

STAGE 4 ==>                       #Adds @ava/babel-preset-stage-4:
                                  #  - all ES stage 4 features, minus ones already supported by current Node.js version
                                  #  - can be disabled with BABEL_CONF.preset ['module:ava/stage-4', false]
                                  #And the following core plugins:
                                  #  - syntax-async-generators
                                  #  - syntax-object-rest-spread
                                  #  - syntax-optional-catch-binding
