
          
   STATSD  
          



VERSION ==>                       #0.8.6

STATSD PROTOCOL ==>               #Each line is "METRIC:UINT|TYPE[|@FLOAT][|#TAG,...]"
                                  #  - METRIC: metric name
                                  #  - FLOAT (def: 1): hint of the sampling, e.g. "0.1" if only 1/10 metrics are sent
                                  #Available TYPEs:
                                  #  - c: cumulative count (adds to last value)
                                  #     - reset to 0 at each flush
                                  #  - m: meter. Like "c", but meant to compute occurence rate over time
                                  #  - g: non-cumulative count (only keeps last value)
                                  #     - if UINT is prefixed with +|-, relative to last value
                                  #  - s: like "c", but counts unique values:
                                  #     - UINT is any STR
                                  #     - increases by 1 if STR never sent, by 0 instead
                                  #  - ms: duration
                                  #     - automatically calculates count|percentiles|mean|deviation|sum|min|max of each flush period
                                  #  - h: histogram. Like "ms"
                                  #TAG,... are custom metadata
                                  #Can send multiple lines at once:
                                  #  - must be sure in fits in transport, e.g. within TCP|UDP MTU (512 bytes is reasonable)
                                  #Transport protocol-agnostic, e.g. TCP or UDP

statsd CONFIG_FILE                #Starts server:
                                  #  - a UDP|TCP|other server receives statsd protocol messages
                                  #  - the result is printed to stdout|syslog|other
                                  #  - a second TCP server listens for management intructions

CONFIG_FILE                       #Must be JavaScript OBJ (run with eval())

CONF.automaticConfigReload        #BOOL (def: true). If CONFIG_FILE is updated, reload CONF

CONF.deleteIdleStats              #BOOL (def: false). Do not send metrics when 0 since last flush
CONF.deleteCounters
CONF.deleteGauges
CONF.deleteTimers
CONF.deleteSets                   #Same for TYPE "c|g|ms|s"
CONF.gaugesMaxTTL                 #UINT (def: 1). Like CONF.deleteGauges but done using a TTL instead???

CONF.keyFlush.interval            #NUM (def: 0) ???

CONF.flushInterval                #NUM (in ms, def: 10s) ???

CONF.servers                      #Servers receiving metrics. OBJ_ARR:
                                  #  - server 'PATH':
                                  #     - points to Node.js file exporting a start(CONF, FUNC(BUFFER, OBJ))->BOOL
                                  #        - starts the client
                                  #        - BOOL is success
                                  #        - FUNC(BUFFER, OBJ) should be called on new messages
                                  #           - BUFFER is statsd protocol message
                                  #           - OBJ is arbitrary protocol-specific, only passed to 'packet' event
                                  #     - def is UDP with CONF:
                                  #        - address STR (def: undefined)
                                  #        - port NUM (def: 8125)
                                  #        - address_ipv6 BOOL (def: true)

CONF.mgmt_address                 #TCP management server address (def: undefined)
CONF.mgmt_port                    #TCP management server port (def: 8126)
MANAGEMENT SERVER ==>             #Is TCP with messages "CMD [ARG...]".
                                  #Available commands:
help                              #Prints available commands
???

CONF.percentThreshold             #0-100[_ARR] (def: 90). With TYPE "c", also send mean|sum|max for the NUMth percentiles
CONF.histogram                    #OBJ_ARR (def: [])
                                  #With TYPE "c", keep a histogram across flush periods
                                  #OBJ:
                                  #  - metric 'METRIC': '' for all
                                  #  - bins NUM|'inf'_ARR:
                                  #     - increasing
                                  #     - first NUM is assumed to be 0

CONF.prefixStats                  #STR (def: 'statsd') ???
CONF.keyNameSanitize              #BOOL (def: true) ???
CONF.title                        #Sets process.title (def: "statsd ...")

CONF.debug                        #BOOL (def: false). Verbose
CONF.log.backend                  #Where to print debug|error messages, among:
                                  #  - 'stdout' (def): prefixed with "DEBUG: "
                                  #  - 'syslog':
                                  #     - use modern-syslog
                                  #     - also uses CONF.log:
                                  #        - level STR (def: 'LOG_INFO')
                                  #        - application STR (def: 'statsd')
