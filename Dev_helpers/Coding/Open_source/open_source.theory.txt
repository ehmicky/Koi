
               
   OPEN_SOURCE  
               



Promotion:
  - time to post:
     - traffic is during work hours, i.e. before start work US, i.e. 3pm
     - Wednesday
  - channels should promote each other
     - e.g. promote my Twitter on READMEs
  - add "Star" buttons on project website

Naming:
  - should be the same for GitHub, package manager, domain name and in-code
  - should be descriptive, i.e. indicate what module does:
     - better SEO
     - more likely to be clicked on

GitHub:
  - tags:
     - first relevant and differentiating ones
     - then from https://github.com/topics:
        - algorithm, api, babel, bash, cli, code-quality, code-review, continuous-integration, css, data-structures,
          database, dependency-management, deployment, docker, documentation, es6, eslint, express, font, framework,
          git, graphql, gulp, html, http, javascript, json, library, linux, markdown, mobile, mongodb, mongoose,
          monitoring, nodejs, npmjs, operating-system, package-manager, parsing, rest-api, security, server,
          serverless, shell, terminal, testing, typescript, webapp, webpack, windows

Documentation:
  - scopes: tutorial, guide, reference
  - formats: text, video
  - move big sections into separate files
  - lots of links
  - use simple language
  - examples:
     - importance of examples, demos, screenshots and screencasts
     - have code snippets in README also in examples/ directory
        - should be runnable and tested
     - can use ```diff block if makes sense to show as a diff (before/after adding usage)
  - README.md:
     - most important
     - sections:
        - title
        - logo
        - badges
           - should include platform support
        - link to website
        - potential deprecation status
        - catchphrase
           - use emojis
        - sales pitch / how this will help you (why)
           - avoid writing down definitions
        - features (how)
        - synopsis example / screenshot / screencast
           - can be an example session of Node REPL / Bash shell
           - should be understandable without screenshots for accessibility
        - use cases
        - table of contents (if big) (what)
        - link to demo / online playground
        - install / prerequisites / get started
           - including updating if needs be
        - usage
        - options/API
        - link to examples directory
        - comparison with competing projects
        - benchmarks
        - who uses this project (see contributors_listing docs)
        - "Related" / "See also"
        - how to file bugs / ask questions / send feedback / send feature requests
        - how to contribute
        - code of conduct
        - roadmap
        - contributors list
           - with avatar, links
           - link to AUTHORS file
        - changelog

Contribution:
  - types:
     - communicate which types of contributions are the most welcomed
     - can be:
        - code (refactoring, PR/new feature, bug/issue, tests, porting, devOps, plugins)
        - code review
        - documentation (review existing or new)
           - translation
        - design (e.g. logo)
        - promotion: online, offline (events)
        - feature suggestions
        - bug reports
        - answering questions
        - engage community (e.g. chat moderation)
     - see all-contributors for standard name and emojis
  - constraints:
     - project goals and scope
     - testing
     - adding documentation
     - non-functional requirements: compatibility, performance, etc.
     - coding style
     - commit message convention
     - commit squashing policy
  - communicate process:
     - what:
        - how to file issue/PR
           - labels
           - security issues should be directly emailed, not open a public issue
           - whether should file issue before submitting PR to outline design and whether it will be accepted
           - link to each other with #NUM
           - not mix two different issues/PRs
           - good issues:
              - descriptive title
              - reproducible code
              - environment
           - which channel to use
              - e.g. Gitter for issues understanding how to use, GitHub issues for bug reports and feature requests
        - code review process:
           - should be within 48 hours
        - how to setup dev environment
     - how:
        - GitHub PR/issue templates
        - CONTRIBUTING.md
           - should be in top directory, to be recognized by GitHub
           - explain why they should read that document (i.e. will save everyone's time)
        - BUGS.md: same but for issues
        - use checklists:
           - use markdown [ ]
           - as small as possible while still covering everything
  - enforcing:
     - Git hooks
     - tasks runner like Gulp
     - CI
     - GitHub status checks
  - reward:
     - thank:
        - in advance in CONTRIBUTING.md
        - in issue/PR
        - in public, e.g. Twitter, blog post, etc.
        - in changelog
     - show list of names/avatars of all contributors in:
        - CONTRIBUTORS, AUTHORS or humans.txt file
        - team page on website

Code of conduct:
  - avoid negative or rude tone
  - online and offline
  - communicate:
     - in top directory file named CODE_OF_CONDUCT.md
     - how it is enforced
     - how to report
        - must allow anonymous reporting
  - enforce:
     - responses: private warn < public warn < asking for apology < temporary ban < total ban
     - in all cases, remove content
     - should investigate first
        - e.g. read previous comments and activity
  - examples:
     - https://www.contributor-covenant.org
     - https://js.foundation/community/code-of-conduct
     - https://www.djangoproject.com/conduct/

Attracting contributors:
  - first timers:
     - document:
        - label easy GitHub issues with "first-timers-only"
        - write that some issues are reserved for first timers
     - ease:
        - can already pre-work it, i.e. with tests and how-to instructions, with sole goal to attract new contributors
     - first-timers-bot
     - search for "first timers" on GitHub
     - promote on:
        - yourfirstpr
        - http://up-for-grabs.net
     - explain how to do a PR:
         - https://github.com/firstcontributions/first-contributions
         - https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github
         - https://github.com/Syknapse/Contribute-To-This-Project
  - submit issues to:
      - https://www.codetriage.com
      - https://contributor.ninja
      - https://24pullrequests.com
  - invite contributions with clear message:
      - including PR welcome badge
      - invite new features suggestions
  - start answering issues by asking if they can PR, while explaining we welcome contributions
  - thanks PR submitters in changelog
  - on project website add "Edit" button that redirects to GitHub edit button

Project management:
  - roadmap
  - GitHub organization

Communication:
  - Slack/Gitter
  - keep discussion public
  - answer within 48 hours, preferably 24
  - rejections:
     - reject issues/PRs instead of leaving them open
     - thank even if rejected
     - explain the rejection
     - link to guidelines or project scope document

Advertise user surveys:
  - maybe integrate it with documentation, e.g.:
      - poll widgets inside online doc
      - CLI instruction to provide with feedback
      - tutorials with optional feedback steps
  - make survey results publicly available (open data)

Metrics:
  - AARRR is a funnel for users that:
     - Acquisition: see the project
     - Activation: use the project once
     - Retention: use the project over time
     (- Referral: tell other users)
     - Revenue: pay

Bots:
  - alerts on new Stackoverflow questions

Trademarks:
  - anything showing source/origin/identity
  - can be:
      - name
      - logo
      - "trade dress": trademark applied to colors/designs/look&feel
  - only within a specific context
  - differences:
      - copyright: implementation
      - patent: logic/algorithm/idea
      - "service mark": like trademark but for a service instead of a product
  - cannot be similar sounding/looking, unless common words
  - prefer unusual words
  - registering:
      - unregistered trademarks still work but harder to enforce
      - country/countries-specific
      - bureaucratic and expensive
      - must pay renewal fees every 10 years
      - can be made unregistered if project not used anymore
  - symbols:
      - tm: registered or not
      - (R): registered
      - neither is required, it just advertise it
  - trademarked name (not logo) should always:
      - be capitalized or all-uppercased to differentiate from surrounding text
      - be not combined/hyphenated with another word
      - be not abbreviated
      - use same spelling
      - not be pluralized
      - not be translated
      - used as a noun nor verb (but adjective or geround is ok)
  - can transfer ownership to umbrella org like Linux fundation so they pay for trademarks and administrative things
  - by default fully restricted usage without permission except:
      - "nominative use":
          - when using name is necessary for understanding
          - e.g. "certification for {name}"
  - examples:
      - http://modeltrademarkguidelines.org/index.php/OSS_Trademark_Policies
      - http://modeltrademarkguidelines.org/index.php/Model_Trademark_Guidelines
          - for logo, name and trade dress
              - can exclude specific ones so they are fully restricted
          - allow any use except:
              - if confuse about origin
                  - e.g. saying it is official website or endorsed
              - if confuse about content
                  - e.g. saying distribution {name} but not sating there are modifications
              - bundling our main code with another main code. However this is ok:
                  - disitributing modified version
                  - distributing another main code but not bundled
                  - linking/libraries
              - for trade dress: not full website
              - for-profit user groups or goods
              - for domain names
              - for logo: must be kept as is
                  - no modification nor combining with another logo
                  - scaling and black&white is ok
          - should add:
              - (R) or tm next to first and most prominent name/logo on a page
              - footnote notice about trademark

Deprecating:
  - prepend description with DEPRECATED
  - make repo read-only
  - point to alternative project

Roadmaps:
  - ROADMAP.md
  - content:
     - start with welcome message
     - short-term, mid-term, long-term
     - links to PR/issues
     - overall project goals and scope
  - communicate:
      - GitHub milestones
  - formats:
      - flat list / kanban
      - agile board
          - GitHub project tab

Releasing:
  - changelog
  - GitHub release
  - git tag
  - blog post
  - promote on social media

Offline events:
  - contributors code sprints
  - conference talks

GitHub:
  - repo named ".github" for an organization:
      - files shown in all repos unless they have that file
      - only in GitHub not in git
      - only for root directory, docs/ or .github/
      - for CODE_OF_CONDUCT, CONTRIBUTING, README, issues/PR templates
  - issues/PR templates: done from "features" tab
     - can be committed as YAML to .github/
     - can divide between bugs, feature requests, PRs or custom categories
     - has:
         - title placeholder
         - content placeholder
         - labels
         - assignees

Promoting:
  - suggest users filling issues/PRs to promote project once issue/PR is solved
  - saythanks.io or alternative. Goals:
      - engaging users (answer them)
      - promote as a Testimony section (ask for permission first, ideally as a checkbox)
      - promote on CV website

Plugins:
  - put into separate repositories
  - create generic test suite
  - create doc on how to create new ones
  - create specific tags so they are easy to find on npm
  - naming convention, e.g. autoserver-format-yaml, so they can be require()'d
  - enccourage them as a way to reduce workload of core repo and attract contributors
