
                       
   ESLINT-PLUGIN-JSDOC  
                       



VERSION ==>                       #10.2.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/recommended                 #Preset with 70% of the rules as warnings

CONF.settings.jsdoc               #SETTINGS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CODE BLOCK           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/check-alignment             #Wrong alignment of * in code block
jsdoc/check-indentation           #Wrong alignment inside code block

jsdoc/require-jsdoc [OBJ]         #Every FUNC|CLASS must have /** */ block comment
                                  #OBJ:
                                  #  - publicOnly: only for top-level exports. BOOL (def: false) or OBJ2:
                                  #     - esm|cjs|window BOOL: using ESM|CommonJS or global variables (window.*)
                                  #     - ancestorsOnly BOOL: any top-level variable is considered top-level export
                                  #  - require.ESTREE_TYPE: ignore:
                                  #     - FunctionDeclaration BOOL (def: true)
                                  #     - [Arrow]FunctionExpression|MethodDefinition BOOL (def: false)
                                  #     - ClassDeclaration|Expression BOOL (def: false)
                                  #  - contexts 'ESTREE_TYPE'_ARR: only for variables matching those
SETTINGS.exemptEmptyFunctions     #BOOL (def: false). Ignore jsdoc/require-jsdoc from FUNCs with no parameters nor return values


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            @PARAM             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/require-param [OBJ]         #Must have a @param
                                  #OBJ:
                                  #  - exemptedBy 'TAG'_ARR: ignore if those are present

jsdoc/require-param-name          #@param must have a VAR
jsdoc/require-param-type          #@param must have a {TYPE}
jsdoc/require-param-description   #@param must have a COMMENT

jsdoc/require-hyphen-before-
 param-description                #'always|never'. COMMENT in @param must be preceded by ' - '

jsdoc/check-param-names           #@param VAR different from variable name


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           @RETURNS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/require-returns [OBJ]       #Must have a @returns
                                  #OBJ:
                                  #  - exemptedBy 'TAG'_ARR: ignore if those are present
                                  #  - forceReturnsWithAsync BOOL: if false (def), ignore if @async
SETTINGS.forceRequireReturn       #If false (Def), ignore jsdoc/require-returns if no return statement

jsdoc/require-returns-type        #@returns must have a {TYPE}
jsdoc/require-returns-description #@returns must have a COMMENT

jsdoc/require-returns-check       #If @returns, a return statement must exist


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CLASS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SETTINGS.ignorePrivate            #BOOL (def: false). Ignore blocks with @private

SETTINGS.overrideReplacesDocs     #BOOL (def: true). Ignore jsdoc/require-description|example|param|returns if @override
SETTINGS.
 augmentsExtendsReplacesDocs      #BOOL (def: false). Ignore jsdoc/require-description|example|param|returns if @augments
SETTINGS.implementsReplacesDocs   #BOOL (def: false). Ignore jsdoc/require-description|example|param|returns if @implements

jsdoc/implements-on-classes       #No @implements unless @class|constructs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMMENTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/require-description [OBJ]   #Must have a COMMENT|@description
                                  #OBJ:
                                  #  - exemptedBy 'TAG'_ARR: ignore if those are present
                                  #  - contexts 'ESTREE_TYPE'_ARR: only for variables matching those

jsdoc/
 newline-after-description STR    #'always|never'. Newline after COMMENT
jsdoc/require-description-
 complete-sentence                #COMMENT|@description must start with uppercase and end with period.
jsdoc/match-description OBJ       #COMMENTs must match OBJ.matchDescription 'REGEXP' (uses 'u' flag)
                                  #OBJ:
                                  #  - tags.TAG 'REGEXP' or true (same as OBJ.matchDescription): same for specific TAG
                                  #  - contexts 'ESTREE_TYPE'_ARR: only for variables matching those


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           @EXAMPLE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/require-example [OBJ]       #Must have an @example
                                  #OBJ:
                                  #  - exemptedBy 'TAG'_ARR: ignore if those are present
SETTINGS.
 avoidExampleOnConstructors       #BOOL (def: false). Ignore jsdoc/require-example on CLASS|@class

jsdoc/check-examples              #Runs ESLint inside @example
SETTINGS.baseConfig               #CONF when linting @example (def: current one)
SETTINGS.configFile               #CONF_FILE when linting @example (def: current one)
SETTINGS.eslintrcForExamples      #BOOL (def: false). Use .eslintrc when linting @example
SETTINGS.noDefaultExampleRules    #If false (def), when linting @example, add the following rules:
                                  #eol-last, no-console, no-undef, no-unused-vars, padded-blocks, import/no-unresolved, import/unambiguous, node/no-missing-import|require
SETTINGS.
 reportUnusedDisableDirectives    #If true (def), use --report-unused-disable-directives
SETTINGS.allowInlineConfig        #BOOL (def: true). When linting @example, allow // eslint-* comments
SETTINGS.[reject]exampleCodeRegex #'REGEXP'. Only (or do not) lint @example matching it
SETTINGS.matchingFilename         #When linting @example, dummy 'PATH' to use. For example for CONF.overrides or filename-related rules
SETTINGS.captionRequired          #BOOL (def: false). When linting @example, requires <caption> at beginning


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/check-tag-names             #No custom @TAG
SETTINGS.additionalTagNames       #Additional allowed 'TAG'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TYPES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/no-types                    #No {TYPE} after @param|returns. When using TypeScript since it's redundant

SETTINGS.tagNamePreference.TAG    #'TAG2' that is an alias
jsdoc/check-syntax                #No Google Closure-specific TYPEs
jsdoc/check-types [OBJ]           #No custom TYPE for primitive TYPEs
                                  #OBJ:
                                  #  - noDefaults BOOL (def: false). Only use SETTINGS.preferredTypes
                                  #  - unifyParentAndChildTypeChecks BOOL (def: false): with SETTINGS.preferredTypes.TYPE, make
                                  #    it work for TYPE[] and *.<TYPE> as well
jsdoc/no-undefined-types [OBJ]    #No unknown TYPE.
                                  #OBJ:
                                  #  - preferredTypesDefined BOOL (def: false): use SETTINGS.preferredTypes
                                  #  - definedTypes 'TYPE'_ARR: ignored
SETTINGS.preferredTypes.TYPE      #BOOL|'TYPE2'. Forbid|allow TYPE.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             VARS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc/valid-types                 #VAR must be valid JSDoc
SETTINGS.allowEmptyNamepaths      #If false (def: true), do not allow missing VAR
SETTINGS.checkSeesForNamepaths    #If true (def: false), @see must be followed by VAR (not URL)
