
                       
   ESLINT-PLUGIN-JSDOC  
                       



VERSION ==>                       #10.0.3

jsdoc/recommended                 #Preset with 70% of the rules as warnings

CONF.settings.jsdoc               #SETTINGS

jsdoc/check-alignment             #Wrong alignment of * in code block
jsdoc/check-indentation           #Wrong alignment inside code block

jsdoc/check-examples              #Runs ESLint inside @example
SETTINGS.baseConfig               #CONF when linting @example (def: current one)
SETTINGS.configFile               #CONF_FILE when linting @example (def: current one)
SETTINGS.eslintrcForExamples      #BOOL (def: false). Use .eslintrc when linting @example
SETTINGS.noDefaultExampleRules    #If false (def), when linting @example, add the following rules:
                                  #eol-last, no-console, no-undef, no-unused-vars, padded-blocks, import/no-unresolved, import/unambiguous, node/no-missing-import|require
SETTINGS.
 reportUnusedDisableDirectives    #If true (def), use --report-unused-disable-directives
SETTINGS.allowInlineConfig        #BOOL (def: true). When linting @example, allow // eslint-* comments
SETTINGS.[reject]exampleCodeRegex #'REGEXP'. Only (or do not) lint @example matching it
SETTINGS.matchingFilename         #When linting @example, dummy 'PATH' to use. For example for CONF.overrides or filename-related rules
SETTINGS.captionRequired          #BOOL (def: false). When linting @example, requires <caption> at beginning

jsdoc/check-param-names           #@param VAR different from variable name

jsdoc/check-syntax                #No Google Closure-specific TYPEs

jsdoc/check-tag-names             #No custom @TAG
SETTINGS.additionalTagNames       #Additional allowed 'TAG'_ARR

jsdoc/check-types [OPTS]          #No custom TYPE for primitive TYPEs
                                  #OPTS:
                                  #  - noDefaults BOOL (def: false). Only use SETTINGS.preferredTypes
                                  #  - unifyParentAndChildTypeChecks BOOL (def: false): with SETTINGS.preferredTypes.TYPE, make
                                  #    it work for TYPE[] and *.<TYPE> as well
SETTINGS.preferredTypes.TYPE      #BOOL|'TYPE2'. Forbid|allow TYPE.

jsdoc/implements-on-classes       #No @implements unless @class|constructs

jsdoc/match-description OPTS      #COMMENTs must match OPTS.matchDescription 'REGEXP' (uses 'u' flag)
                                  #OPTS:
                                  #  - tags.TAG 'REGEXP' or true (same as OPTS.matchDescription): same for specific TAG
                                  #  - contexts STR_ARR: only for variables matching those ESTree types

jsdoc/newline-after-description   #
jsdoc/no-types                    #
jsdoc/no-undefined-types          #
jsdoc/require-description         #
jsdoc/require-description-
 complete-sentence                #
jsdoc/require-example             #
jsdoc/require-hyphen-before-
 param-description                #
jsdoc/require-jsdoc               #
jsdoc/require-param               #
jsdoc/require-param-description   #
jsdoc/require-param-name          #
jsdoc/require-param-type          #
jsdoc/require-returns             #
jsdoc/require-returns-check       #
jsdoc/require-returns-description #
jsdoc/require-returns-type        #
jsdoc/valid-types                 #

SETTINGS.ignorePrivate            #BOOL (def: false). Do not lint blocks with @private
SETTINGS.tagNamePreference.TAG    #'TAG2' that is an alias
