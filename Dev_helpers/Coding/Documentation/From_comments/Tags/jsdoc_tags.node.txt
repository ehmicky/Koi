
              
   JSDOC_TAGS  
              




ALTERNATIVES ==>              #  - jsdoc tags (preferred): original one, most well known, not maintained well
                              #  - tsdoc: TypeScript-specific tags, built on top of jsdoc, not well maintained

VERSION ==>                   #3.6.2 (JSDoc)

TAGS ==>                      #Originally form JSDoc, but re-used by several documentation generators


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TYPES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TYPE                          #Can be any of the following.

boolean|string|number|bigint|
 symbol|undefined|object|
 function                     #
Constructor|Class             #Including RegExp|...
VAR                           #To a Constructor|Class
(TYPE|TYPE2|...)              #"or"
TYPE[]                        #ARR
Array.<TYPE>                  #ARR
{VAR: TYPE,...}               #OBJ
Object.<KEY_TYPE, VALUE_TYPE> #OBJ
*                             #Any type
...TYPE                       #Variadic
!TYPE                         #Required (non-null)
?TYPE                         #Optional (can be null)

@typedef {TYPE} TYPE2         #Type alias.
                              #TYPE2 should be used in other comment blocks.
                              #The current comment block can define other tags for that TYPE2

CLOSURE COMPILER ==>          #Some closure compiler-specific syntax exists, but not documented here.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           VARIABLES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VAR                           #Can be VARR:
                              #  - dot-separated
                              #  - can ""-quote special characters
                              #  - including ARR[].VAR2
                              #Can be a local variable, or any of the following

OBJ|MODULE|CLASS|FUNC~VAR     #Local|non-exported property (@inner)
OBJ|MODULE|CLASS|FUNC#VAR     #Instance property (@instance)
OBJ|MODULE|CLASS|FUNC.VAR     #Static|exported property (@static)
module:MODULE                 #Module (@module)
module:MODULE~VAR             #Non-exported module variable
module:MODULE.VAR             #Exported module variable
external:VAR                  #Global variable (@external)
event:VAR                     #Event payload (@event)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


/** COMMENT */
/**
 * COMMENT
 * @TAG VALUE                 #Must use /** */
 */                           #COMMENT is used as @description

AUTOMATIC DETECTION ==>       #Many of the tags below are automatically guessed by generators

TYPESCRIPT ==>               T#This notation means TypeScript TYPEs also defines this
                             T#  - IDEs (like VSCode) will show it in autocomplete
                             T#  - i.e. does not need to be defined when using TypeScript
                            -T#This notation is the same except COMMENT is not defined in TypeScript


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DESCRIPTION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@summary COMMENT              #Short generic comment.
@description COMMENT          #Long generic comment

@example ...                  #Code block sample.
                              #Up to next @TAG or */


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@type {TYPE}                 T#Variable declaration

@constant [{TYPE} NAME]      T#Constant
@readonly                    T#Readonly
@default [VAL]                #Variable has a default value (for constant or not)

@kind STR                    T#class|constant|event|external|file|function|member|mixin|module|namespace|typedef
                             T#Same as the corresponding @TAG


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@file COMMENT                 #Whole file.
                              #On top of file.
                              #Make file appear in index.
@module [[{TYPE}] MODULE]     #Module.
                              #On top of file.
                              #Def: CLI 'PATH' without '.EXT'

@requires VAR                 #Import declaration.
@exports MODULE               #Export declaration.

@external VAR                 #Global imported variable.
@global                       #Global variable


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LINKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


{@link LINK [[|] TITLE]}      #External LINK with title STR. Inline inside a COMMENT
[TITLE]{@link LINK}           #LINK is VAR|URL

@linkcode|linkplain           #Like @link except renders in monospace or not (def)

@see {@link VAR|URL}
@see VAR|URL                  #Like @link but for whole code block instead of inline inside a COMMENT

@tutorial TUTORIAL            #External link to TUT_DIR/TUTORIAL.html|md
{@tutorial TUTORIAL}          #Form with {} is inline instead, and has same syntax as @link (including TITLE)
                              #TUT_DIR is generator-specific


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         VARIABLE NAME         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@alias NAME                   #Changes the variable name
@name NAME                    #Same but must also specify the variable type using other tags.

@borrows VAR as VAR2          #Copy tags from VAR to VAR2
@lends VAR                    #Copy current tags to VAR

@variation NUM                #Means current VAR must be referenced in tags as VAR(NUM)
                              #Useful when several variables with same name.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@version VERSION_RANGE        #
@since VERSION                #Like @version >=VERSION

@deprecated [COMMENT]         #
@todo COMMENT                 #Can be done several times


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VISIBILITY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@ignore                       #Never show

@private                     T#Only used internally
@protected                   T#Only used within current CLASS|MODULE
@package                      #Only used within current package
@public                      T#Default visibility
@access STR                  T#Same, where STR is private|protected|package|public


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MEMBERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@namespace [[{TYPE}] NAME]   T#OBJ used as namespace.

@memberof[!]                 T#Belongs to OBJ|MODULE|CLASS|FUNC
 OBJ|MODULE|CLASS|FUNC       T#Must then distinguish using @inner|@static|@instance
                             T#Can force with !
@member {TYPE} NAME          T#Same but specifies TYPE and NAME
@property {TYPE} NAME        T#Same but specified on the parent instead.
                             T#Can use [NAME] if optional.

@inner                       T#OBJ|MODULE|CLASS|FUNC local|non-exported variable
@instance                    T#OBJ|MODULE|CLASS|FUNC instance variable
@static                      T#OBJ|MODULE|CLASS|FUNC static|exported variable (default)

@enum [{TYPE}]               T#OBJ used as ENUM whose values are TYPE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@function [VAR]              T#FUNC

@param [{TYPE}] VAR         -T#FUNC argument
 [- COMMENT]                -T#[VAR] for optional argument
                            -T#  - [VAR=VAL] for default value
                            -T#For overloaded functions, should do several block comments (not supported by all documentation generators)
@returns [{TYPE}] [COMMENT] -T#
@throws [{TYPE}] [COMMENT]    #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ASYNC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@async                       T#Async FUNC

@callback TYPE               T#Callback type declaration.
                             T#TYPE should be used in other comment blocks.
                             T#The current comment block can define other tags for that TYPE

@generator                   T#Generator FUNC
@yields [{TYPE}] [COMMENT]   T#Like @returns but for yield


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@event VAR                    #OBJ used as event payload

@fires VAR                    #Fires an event
@listens VAR                  #Listens to an event


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              OOP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@constructs [NAME]           T#new FUNC()
@class [CLASS NAME]          T#CLASS
                             T#Should add FUNC-related TAGs (@param, etc.) to CLASS not to constructor()

@interface                   T#Interface CLASS (only declaration)
@abstract                    T#Abstract FUNC (declaration or implementation)

@hideconstructor              #Constructor is private.

@classdesc COMMENT            #CLASS description

@this CLASS_VAR              T#FUNC() this instanceof CLASS

@augments PARENT             T#CLASS inheritance
@implements {PARENT_TYPE}    T#Interface inheritance
@mixes CLASS_VAR             T#CLASS mixin
@mixin [NAME]                 #CLASS that must be mixed in

@inheritdoc                   #Copy tags from PARENT.FUNC() to CLASS.FUNC()
@override                     #When CLASS.FUNC() and PARENT.FUNC() use same variable name, which one should prevail.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LEGAL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@author AUTHOR [<EMAIL>]      #

@copyright AUTHOR DATE        #
@license SPDX_LICENSE         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VSCODE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SUPPORT ==>                   #Show @TAG as is on hover and autocompletion
                              #Markdown support.
                              #Syntax highlighting on relevant @TAGs or ``` ... ```
                              #Clickable links


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             JSDOC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import/no-deprecated             ##Avoid import|require of a variable that has JSDoc @deprecated
