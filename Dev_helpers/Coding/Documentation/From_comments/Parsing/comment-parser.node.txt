
                  
   COMMENT-PARSER  
                  



ALTERNATIVES ==>                  #  - comment-parser (preferred): streaming mode, more high-profile
                                  #  - jest-docblock: only top of file, can strip
                                  #  - parse-comments

VERSION ==>                       #0.5.5

COMMENT-PARSER('FILE'[, OPTS])    #Parse JSDoc-like comments:
 ->BLOCK_ARR                      #  /**
                                  #   * DESCRIPTION
                                  #   * @TAG [{TYPE}] [NAME] DESCRIPTION
                                  #   * ...
                                  #   */
                                  #NAME can be optional with []: [NAME=VAL]
                                  #Comments starting with /*** or /* are ignored

COMMENT-PARSER.file
 ('PATH', FUNC(ERROR, BLOCK_ARR)) #Same for whole file.

COMMENT-PARSER.stream()->IOSTREAM #Same for whole file in streaming mode.
                                  #Takes file lines STR as input and outputs BLOCKs

OPTS.trim                         #BOOL (def: true). Trim whitespaces.
OPTS.join                         #When DESCRIPTION is continued on next line without a leading *, separate with:
                                  #  - false: '\n'
                                  #  - true: ' '
                                  #  - 1: block indent
                                  #  - STR

OPTS.dotted_names                 #If true (def: false) and TAG.name is 'VAR.VAR2', set as TAG.tags children to 'VAR' TAG

OPTS.parsers                      #FUNC_ARR to customize parsing. Should not be needed

BLOCK|TAG.source                  #Raw STR without the /** */ and leading *, trimmed
BLOCK|TAG.line                    #NUM (0-based). Starting line
BLOCK.description                 #'DESCRIPTION'
BLOCK.tags                        #TAG_ARR

TAG.tag                           #'TAG'
TAG.type                          #'TYPE' ('' if none)
TAG.name                          #'NAME' ('' if none)
TAG.optional                      #BOOL
TAG.default                       #Default 'VAL' (undefined if none)
TAG.description                   #TAG 'DESCRIPTION' ('' if none)
