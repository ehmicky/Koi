
         
   JSDOC  
         



VERSION ==>                   #3.3.0

CONF                          #Uses -c CONFFILE.json

jsdoc FILE...                 #Generates HTML documentation with:
                              #  - content based on /** */ comments
                              #     - non-documented members are not shown
                              #  - links to source code
                              #  - README.md content, parsed to HTML
CONF.source                   #Source FILE|DIR... to document
CONF.source.include|exclude   #'PATH'_ARR
CONF.source.includePattern    #'REGEXP' (def: *.js[doc])
CONF.source.excludePattern    #'REGEXP' (def: _*)
-r
CONF.opts.recurse             #BOOL (def: false). Allow FILE|DIR... instead of FILE...

-d DIR2
CONF.opts.destination         #Output 'DIR2' (def: '.')
-X
CONF.opts.explain             #BOOL (def: false). Output in JSON to stdout instead
-l
CONF.opts.lenient             #BOOL (def: false). Don't exit on errors

-t DIR                        #HTML template, using DIR/publish.js
CONF.opts.template 'DIR'      #Def: ./templates/default

CONF.tags.allowUnknownTags    #BOOL (def: true). do not throw on @unknown_tag

CONF.plugins                  #'MODULE|PATH'_ARR

'plugins/markdown'            #PLUGIN bundled with jsdoc. Allows Markdown in COMMENTs
CONF.markdown.parser          #"gfm" (must be specified)
CONF.markdown.tags            #STR_ARR. Additional tags to parse Markdown->HTML, beyond "description|classdesc|param|property|returns"
CONF.markdown.hardwrap        #BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



/** COMMENT */
/**
 * COMMENT
 * @TAG VALUE                 #Must use /** */
 */                           #COMMENT is used as @description

TYPE                          #Can be:
                              #  - typeof
                              #  - CLASS
                              #  - (TYPE|TYPE2|...) -> "or"
                              #  - TYPE[] -> ARR
                              #  - Array.<TYPE> -> ARR
                              #  - {VAR: TYPE,...} -> OBJ
                              #  - Object.<KEY_TYPE, VALUE_TYPE> -> OBJ
                              #  - {TYPE} -> OBJ with TYPE values
                              #  - {*} -> any type
                              #  - ...TYPE -> variadic
                              #  - !TYPE -> required
                              #  - ?TYPE -> optional

VAR                           #Can be:
                              #  - local variable
                              #  - OBJ|MODULE|CLASS|FUNC~VAR -> local|non-exported property (@inner)
                              #  - OBJ|MODULE|CLASS|FUNC#VAR -> instance property (@instance)
                              #  - OBJ|MODULE|CLASS|FUNC.VAR -> static|exported property (@static)
                              #  - module:MODULE -> module (@module)
                              #  - module:MODULE~VAR -> non-exported module variable
                              #  - module:MODULE.VAR -> exported module variable
                              #  - external:VAR -> global variable (@external)
                              #  - event:VAR -> event payload (@event)
                              #Can be VARR:
                              #  - dot-separated
                              #  - can ""-quote special characters
                              #  - including ARR[].VAR2

AUTOMATIC DETECTION ==>       #Many of the tags below are automatically guessed

@file COMMENT                 #Whole file.
                              #On top of file.
                              #Make file appear in index.
@module [[TYPE] MODULE]       #Module.
                              #On top of file.
                              #Def: CLI 'PATH' without '.EXT'
@requires VAR                 #Import declaration.
@external VAR                 #Global imported variable.
@exports MODULE               #Export declaration.

@summary COMMENT              #Short generic comment.
@description COMMENT          #Long generic comment
@example ...                  #Code block sample.
                              #Up to next @ or end of comment block.
                              #Can start with <caption>TITLE</caption>

@typedef {TYPE} TYPE2         #Type alias.
                              #The current comment block can define other tags for that TYPE2

@type {TYPE}                  #Variable declaration
@global                       #Global variable

@constructs [NAME]            #new FUNC()
@class [CLASS NAME]           #CLASS
@abstract                     #Abstract CLASS|FUNC (declaration or implementation)
@interface                    #Interface CLASS (only declaration)
@hideconstructor              #Constructor is private

@classdesc COMMENT            #CLASS description
@this CLASS                   #FUNC() this instanceof CLASS

@augments PARENT              #CLASS inheritance
@implements {PARENT}          #Interface inheritance
@mixes CLASS                  #CLASS mixin
@mixin                        #CLASS that must be mixed in
@inheritdoc                   #Copy tags from PARENT.FUNC() to CLASS.FUNC()
@override                     #When CLASS.FUNC() and PARENT.FUNC() use same variable name, which one should prevail.

@ignore                       #Never show
@private                      #Only show if --private
--private
CONF.opts.private             #BOOL (def: false)
@protected                    #Only used within current CLASS
@package                      #Only used within current MODULE
@public                       #Default visibility
@access private|protected|
 package|public               #

{@link LINK}                  #External LINK with title STR. Inline inside a COMMENT
[TITLE]{@link LINK}           #LINK is VAR|URL
{@link LINK|TITLE}
{@link LINK TITLE}
@linkcode|linkplain           #Like @link except renders in monospace or not (def)
CONF.templates.monospaceLinks #BOOL (def: false): imply @linkcode for VAR|URL
CONF.templates.cleverLinks    #BOOL (def: false): imply @linkcode for VAR
@see {@link VAR|URL}
@see VAR|URL                  #Like @link but for whole code block instead of inline inside a COMMENT

@tutorial TUTORIAL            #External link to TUT_DIR/TUTORIAL.html|md
{@tutorial TUTORIAL}          #Form with {} is inline instead, and has same syntax as @link (including TITLE)
                              #Can use TUT_DIR/TUTORIAL.json to specify:
                              #  - title STR: display name (def: TUTORIAL)
                              #  - children 'TUTORIAL2'_ARR: sub-tutorials
                              #Can use {@link} and {@tutorial} inside TUTORIAL.html|md
-u 'TUT_DIR'
CONF.opts.tutorials           #'TUT_DIR' (def: '.')

@alias NAME                   #Changes the variable name
@name NAME                    #Same but must also specify the variable type using other tags.
@borrows VAR as VAR2          #Copy tags from VAR to VAR2
@lends VAR                    #Copy current tags to VAR

@variation NUM                #Means current VAR must be referenced in tags as VAR(NUM)
                              #Useful when several variables with same name.

@version VERSION_RANGE        #
@since VERSION                #Like @version >=VERSION
@deprecated [COMMENT]         #
@todo COMMENT                 #

@author AUTHOR [<EMAIL>]      #
@copyright AUTHOR DATE        #
@license SPDX_LICENSE         #

@function [NAME]              #FUNC
@param [{TYPE}] VAR [- COMNT] #FUNC argument
                              #[VAR] for optional argument
                              #  - [VAR=VAL] for default value
@returns [{TYPE}] [COMMENT]   #
@throws [{TYPE}] [COMMENT]    #

@async                        #Async FUNC
@callback TYPE                #Callback type declaration
                              #The current comment block can define other tags for that TYPE

@generator                    #Generator FUNC
@yields [{TYPE}] [COMMENT]    #Like @returns but for generators

@event NAME                   #OBJ used as event payload
@fires NAME                   #Fires an event
@listens NAME                 #Listens to an event

@namespace [[{TYPE}] NAME]    #OBJ used as namespace.
@memberof[!]                  #Belongs to OBJ|MODULE|CLASS|FUNC. Must then distinguish using @inner|@static|@instance
 OBJ|MODULE|CLASS|FUNC        #Can force with !
@member {TYPE} VAR            #Same but specifies TYPE and VAR
@property {TYPE} VAR          #Same but specified on the parent instead.
@inner                        #NAMESPACE|MODULE|CLASS|FUNC local|non-exported variable
@instance                     #NAMESPACE|MODULE|CLASS|FUNC instance variable
@static                       #NAMESPACE|MODULE|CLASS|FUNC static|exported variable

@enum [{TYPE}]                #OBJ used as ENUM whose values are TYPE

@constant [{TYPE} VAR]        #Constant
@read-only                    #Readonly
@default [VAL]                #Variable default value (for constant or not)

@kind STR                     #class|constant|event|external|file|function|member|mixin|module|namespace|typedef
                              #Same as the corresponding @TAG
