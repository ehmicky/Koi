
         
   JSDOC  
         



VERSION ==>                   #3.3.0

CONF                          #Uses -c CONFFILE.json

jsdoc FILE...                 #Generates HTML documentation with:
                              #  - content based on /** */ comments
                              #     - non-documented members are not shown
                              #  - links to source code
                              #  - README.md content, parsed to HTML
CONF.source                   #Source FILE|DIR... to document
CONF.source.include|exclude   #'PATH'_ARR
CONF.source.includePattern    #'REGEXP' (def: *.js[doc])
CONF.source.excludePattern    #'REGEXP' (def: _*)
-r
CONF.opts.recurse             #BOOL (def: false). Allow FILE|DIR... instead of FILE...

-d DIR2
CONF.opts.destination         #Output 'DIR2' (def: '.')
-X
CONF.opts.explain             #BOOL (def: false). Output in JSON to stdout instead
-l
CONF.opts.lenient             #BOOL (def: false). Don't exit on errors

-t DIR                        #HTML template, using DIR/publish.js
CONF.opts.template 'DIR'      #Def: ./templates/default

CONF.tags.allowUnknownTags    #BOOL (def: true). do not throw on @unknown_tag

CONF.plugins                  #'MODULE|PATH'_ARR

'plugins/markdown'            #PLUGIN bundled with jsdoc. Allows parsing Markdown
CONF.markdown.parser          #"gfm" (must be specified)
CONF.markdown.tags            #STR_ARR. Additional tags to parse Markdown->HTML, beyond "description", "classdesc", "param", "property" and "returns"
CONF.markdown.hardwrap        #BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



/** COMMENT */
/**
 * COMMENT
 * @TAG VALUE                 #Must use /** */
 */                           #COMMENT is used as @description

@file COMMENT                 #Whole file.
                              #On top of file.
                              #Make file appear in index.
@module [MODULE]              #Module.
                              #On top of file.
                              #Def: 'PATH' without '.EXT'
                              #With @link, must use module:MODULE~VAR (local variable non-FUNC) or module:MODULE.VAR
                              #(local variable FUNC, this.* variable or assigned to module.exports).
@requires [module:]MODULE     #Import declaration.
@external VAR                 #Global imported variable.
                              #Usually with @see.
                              #Goal is to make referencable with external:VAR
@exports MODULE               #Export declaration.
                              #Guessed in CommonJS|AMD unless not exporting an OBJ literal.

@summary COMMENT              #Short generic comment.
@description COMMENT          #Long generic comment
@example ...                  #Code block sample.
                              #Up to next @ or end of comment block.

@classdesc COMMENT            #CLASS
@constructor                  #new FUNC()
@inner                        #CLASS local variable
                              #Refered at CLASS~VAR in @link
@instance                     #CLASS non-static property
                              #Refered at CLASS#VAR in @link
@static                       #CLASS static property
                              #Refered at CLASS.VAR in @link

@abstract                     #For abstract methods. Show as "(abstract) FUNC()"
@augments TYPE                #For child types. Show "extends TYPE" and parent methods with "inherited from TYPE#FUNC"
@lends TYPE                   #Declare a constructor in two parts:
                              #  - one variable name with @class
                              #  - one variable content with @lends TYPE
                              #Useful when using factory methods:
                              #  /** @class */
                              #  var TYPE = FUNC(
                              #    //** @lends TYPE
                              #    OBJ
                              #  )
                              #OBJ members are @static by default, but can be @instance by using @lends TYPE.prototype
                              #If OBJ contains constructor method, use @constructs TYPE on it and remove @class.
@this VAR                     #Indicates that this is of type VAR

@mixin                        #Type that need to be mixed with other ones.
@mixes TYPE                   #Type using a mixin

@private|protected|public     #@private are only shown if --private (and prepends "(private)")
                              #@protected are shown but prepends "(protected)"
                              #If constructor, members don't inherit this tag.
                              #Def: @public
--private
CONF.opts.private             #BOOL (def: false)

@global                       #Specify it is a global variable, when Jsdoc didn't autodetect it, e.g. when it is assigned
                              #dynamically to the global scope.
@memberof NAMESPACE|MODUL|TYPE#Declare as member of a namespace, module or constructor (implicit for the last one).
                              #If jsdoc complains it seems not to be the parent, can force with @memberof!

[[STR]]{@link VAR|URL}        #Creates a <a> link showing STR and pointing to VAR or URL.
                              #Can render link in monospace font by:
                              #  - using @linkcode (opposed to @linkplain) instead
                              #  - using CONFVAR templates.cleverLinks true (def: false): for links pointing to VAR
                              #  - using CONFVAR templates.monospaceLinks true (def: false): for links pointing to VAR or URL
                              #Can use @see {@link VAR|URL}:
                              #  - @see VAR|URL is short form
@tutorial TUTORIAL            #Creates link pointing to a HTML page at TUT_DIR/TUTORIAL.html|md
{@tutorial TUTORIAL}          #Form with {} is inline.
                              #Can use DIR/TUTORIAL.json to specify two properties:
                              #  - title STR: display name (def: TUTORIAL)
                              #  - children TUTORIAL2_ARR: sub-tutorials
                              #Can use {@link} and {@tutorial} inside TUTORIAL.html|md
                              #Tutorials are also shown on the top navigation of the documentation.
-u 'TUT_DIR'
CONF.opts.tutorials           #'TUT_DIR' (def: '.')

@alias|name VAR               #Changes the autodetected variable name.
                              #@name also removes autodetection of type, so must specify manually with another tag, but is the
                              #only way to go in some cases where Jsdoc doesn't recognize the variable.
@borrows VAR as VAR2          #Make comments for VAR apply to current VAR2 too (e.g. references)
@variation NUM                #When two VAR with same name, put @variation NUM, then reference each with VAR(NUM)

@event [TYPE#]VAR             #Declares an event, i.e. if fires FUNC(VAL), that VAL.
                              #Referenced as [TYPE#]VAR or [TYPE#]event:VAR
@fires [TYPE#]VAR             #Declares next function fires event VAR

@since VERSION                #
@version VERSION              #
@deprecated [COMMENT]         #COMMENT is e.g. "since version VERSION"
@todo COMMENT                 #

@author AUTHOR [<EMAIL>]      #
@copyright AUTHOR DATE        #
@license TEXT                 #

@type {TYPE_EXPR}             #Indicates type before a variable declaration. TYPE_EXPR can be:
                              #  - TYPE
                              #  - VAR
                              #  - (TYPE_EXPR|TYPE_EXPR2|...): multiple possibilities
                              #  - TYPE_EXPR[] (ARR)
                              #  - {VAR: TYPE_EXPR,...} (OBJ)
                              #  - ...TYPE_EXPR: variadic
                              #  - !TYPE_EXPR: non-null
                              #  - ?TYPE_EXPR: can be null
@typedef {TYPE_EXPR} TYPE     #Before a type declaration. Can then use TYPE in any TYPE_EXPR.
                              #Its comment can be associated only with the TYPE2 using it as a TYPE_EXPR if:
                              #  - it is in the same comment
                              #  - or TYPE is "TYPE2~TYPE"
@callback TYPE                #Same as @typedef but for a callback type.
                              #Must use @param, etc. like @function
@param {TYPE_EXPR}            #
ARG - COMMENT                 #Use [ARG] to indicate optional, [ARG=VAL] for default value.
@returns {TYPE_EXPR} [COMMENT]#

@namespace [{TYPE_EXPR}]      #Indicates the declaration of a namespace, i.e. an OBJ used as namespace.
[NAMESPACE]                   #With @link, must use NAMESPACE.VAR
@enum {TYPE_EXPR}             #Declare an OBJ used as ENUM
@property {TYPE_EXPR} VAR     #Member of an OBJ, whether @namespace, @typedef or @constructor
@member [{TYPE_EXPR}] [VAR]   #Member of an OBJ, but can be used just before the declaration of that member.

@constant [{TYPE_EXPR}]       #For non-FUNC definition.
@read-only                    #For non-FUNC definition.
@default [TYPE]               #For non-FUNC definition, comment the assigned value (def: deduce from assignment).
