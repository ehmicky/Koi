
         
   JSDOC  
         



VERSION ==>                   #3.6.2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                          #Uses:
                              #  - -c|--configure CONF_FILE.json
                              #  - ./conf.json


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        FILE SELECTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsdoc FILE...                 #Generates HTML documentation with:
                              #  - content based on /** */ comments
                              #     - non-documented members are not shown
                              #  - links to source code
                              #  - README.md content, parsed to HTML
                              #  - package.json information
CONF.source                   #Source FILE|DIR... to document
CONF.source.include|exclude   #'PATH'_ARR
CONF.source.includePattern    #'REGEXP' (def: *.js[doc])
CONF.source.excludePattern    #'REGEXP' (def: _*)
-r|--recurse
CONF.opts.recurse             #BOOL (def: false). Allow FILE|DIR... instead of FILE...
CONF.recurseDepth             #NUM
-R|--readme
CONF.opts.readme              #'PATH' to project's README (def: any from source FILE|DIR...)
-P|--package
CONF.opts.package             #'PATH' to project's package.json (def: any from source FILE|DIR...)

-d|--destination DIR2
CONF.opts.destination         #Output 'DIR2' (def: '.'). Can be 'console'
-X|--explain
CONF.opts.explain             #BOOL (def: false). Output in JSON to stdout instead


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-l|--lenient
CONF.opts.lenient             #BOOL (def: false). Don't exit on errors
--pedantic
CONF.opts.pendantic           #BOOL (def: false). Treat warnings as errors
CONF.tags.allowUnknownTags    #BOOL (def: true). do not throw on @unknown_tag

-e|--encoding STR
CONF.opts.encoding            #STR (def: 'utf8')
CONF.sourceType               #'module' (def) or 'script'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-t|--template                 #HTML template, using DIR/publish.js
CONF.opts.template 'DIR'      #Built-in ones:
                              #  - 'default'
                              #  - 'silent'
CONF.templates.default        #CONFT. Configuration for the default template
CONFT.outputSourceFiles       #BOOL (def: true). Show|link to source files.
CONFT.staticFiles             #OBJ. Same shape as CONF.source.
                              #Source files to copy to output directory (e.g. images).
CONFT.includeDate             #BOOL (def: true). Show current date in footer
CONFT.includeLongnameInNav    #If false (def), shorten names in navigation bar.
CONFT.layoutFile              #'PATH' to custom HTML layout

CONF.plugins                  #'MODULE|PATH'_ARR

'plugins/markdown'            #PLUGIN bundled with jsdoc. Allows Markdown in COMMENTs
                              #Uses marked parser
CONF.markdown.tags            #STR_ARR. Additional tags to parse Markdown->HTML, beyond "author|description|classdesc|param|property|returns|throws|see"
CONF.markdown.excludeTags     #STR_ARR. Inverse
CONF.markdown.hardwrap        #BOOL (def: false)
CONF.markdown.idInHeadings    #BOOL (def: false). Add HTML id attributes based on COMMENTs


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TYPES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TYPE                          #Can be any of the following.

boolean|string|number|bigint|
 symbol|undefined|object|
 function                     #
Constructor|Class             #Including RegExp|...
VAR                           #To a Constructor|Class
(TYPE|TYPE2|...)              #"or"
TYPE[]                        #ARR
Array.<TYPE>                  #ARR
{VAR: TYPE,...}               #OBJ
Object.<KEY_TYPE, VALUE_TYPE> #OBJ
*                             #Any type
...TYPE                       #Variadic
!TYPE                         #Required
?TYPE                         #Optional

@typedef {TYPE} TYPE2         #Type alias.
                              #TYPE2 should be used in other comment blocks.
                              #The current comment block can define other tags for that TYPE2

CLOSURE COMPILER ==>          #Some closure compiler-specific syntax exists, but not documented here.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           VARIABLES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VAR                           #Can be VARR:
                              #  - dot-separated
                              #  - can ""-quote special characters
                              #  - including ARR[].VAR2
                              #Can be a local variable, or any of the following

OBJ|MODULE|CLASS|FUNC~VAR     #Local|non-exported property (@inner)
OBJ|MODULE|CLASS|FUNC#VAR     #Instance property (@instance)
OBJ|MODULE|CLASS|FUNC.VAR     #Static|exported property (@static)
module:MODULE                 #Module (@module)
module:MODULE~VAR             #Non-exported module variable
module:MODULE.VAR             #Exported module variable
external:VAR                  #Global variable (@external)
event:VAR                     #Event payload (@event)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


/** COMMENT */
/**
 * COMMENT
 * @TAG VALUE                 #Must use /** */
 */                           #COMMENT is used as @description

AUTOMATIC DETECTION ==>       #Many of the tags below are automatically guessed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DESCRIPTION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@summary COMMENT              #Short generic comment.
@description COMMENT          #Long generic comment

@example ...                  #Code block sample.
                              #Up to next @TAG or */


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@type {TYPE}                  #Variable declaration

@constant [{TYPE} NAME]       #Constant
@readonly                     #Readonly
@default [VAL]                #Variable has a default value (for constant or not)

@kind STR                     #class|constant|event|external|file|function|member|mixin|module|namespace|typedef
                              #Same as the corresponding @TAG


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@file COMMENT                 #Whole file.
                              #On top of file.
                              #Make file appear in index.
@module [[{TYPE}] MODULE]     #Module.
                              #On top of file.
                              #Def: CLI 'PATH' without '.EXT'

@requires VAR                 #Import declaration.
@exports MODULE               #Export declaration.

@external VAR                 #Global imported variable.
@global                       #Global variable


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LINKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


{@link LINK [[|] TITLE]}      #External LINK with title STR. Inline inside a COMMENT
[TITLE]{@link LINK}           #LINK is VAR|URL

@linkcode|linkplain           #Like @link except renders in monospace or not (def)
CONF.templates.monospaceLinks #BOOL (def: false): imply @linkcode for VAR|URL
CONF.templates.cleverLinks    #BOOL (def: false): imply @linkcode for VAR

@see {@link VAR|URL}
@see VAR|URL                  #Like @link but for whole code block instead of inline inside a COMMENT

@tutorial TUTORIAL            #External link to TUT_DIR/TUTORIAL.html|md
{@tutorial TUTORIAL}          #Form with {} is inline instead, and has same syntax as @link (including TITLE)
                              #Can use TUT_DIR/TUTORIAL.json to specify:
                              #  - title STR: display name (def: TUTORIAL)
                              #  - children 'TUTORIAL2'_ARR: sub-tutorials
                              #Can use {@link} and {@tutorial} inside TUTORIAL.html|md
-u|--tutorials 'TUT_DIR'
CONF.opts.tutorials           #'TUT_DIR' (def: '.')


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         VARIABLE NAME         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@alias NAME                   #Changes the variable name
@name NAME                    #Same but must also specify the variable type using other tags.

@borrows VAR as VAR2          #Copy tags from VAR to VAR2
@lends VAR                    #Copy current tags to VAR

@variation NUM                #Means current VAR must be referenced in tags as VAR(NUM)
                              #Useful when several variables with same name.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@version VERSION_RANGE        #
@since VERSION                #Like @version >=VERSION

@deprecated [COMMENT]         #
@todo COMMENT                 #Can be done several times


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VISIBILITY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@ignore                       #Never show

@private                      #Only show if --private
--private
CONF.opts.private             #BOOL (def: false)
@protected                    #Only used within current CLASS|MODULE
@package                      #Only used within current package
@public                       #Default visibility
@access STR                   #Same, where STR is private|protected|package|public
-a|--access STR|all           #Only show the corresponding visibility


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MEMBERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@namespace [[{TYPE}] NAME]    #OBJ used as namespace.

@memberof[!]                  #Belongs to OBJ|MODULE|CLASS|FUNC
 OBJ|MODULE|CLASS|FUNC        #Must then distinguish using @inner|@static|@instance
                              #Can force with !
@member {TYPE} NAME           #Same but specifies TYPE and NAME
@property {TYPE} NAME         #Same but specified on the parent instead.
                              #Can use [NAME] if optional.

@inner                        #OBJ|MODULE|CLASS|FUNC local|non-exported variable
@instance                     #OBJ|MODULE|CLASS|FUNC instance variable
@static                       #OBJ|MODULE|CLASS|FUNC static|exported variable (default)

@enum [{TYPE}]                #OBJ used as ENUM whose values are TYPE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@function [VAR]               #FUNC

@param [{TYPE}] VAR [- COMNT] #FUNC argument
                              #[VAR] for optional argument
                              #  - [VAR=VAL] for default value
@returns [{TYPE}] [COMMENT]   #
@throws [{TYPE}] [COMMENT]    #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ASYNC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@async                        #Async FUNC

@callback TYPE                #Callback type declaration.
                              #TYPE should be used in other comment blocks.
                              #The current comment block can define other tags for that TYPE

@generator                    #Generator FUNC
@yields [{TYPE}] [COMMENT]    #Like @returns but for yield


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EVENTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@event VAR                    #OBJ used as event payload

@fires VAR                    #Fires an event
@listens VAR                  #Listens to an event


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              OOP              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@constructs [NAME]            #new FUNC()
@class [CLASS NAME]           #CLASS

@interface                    #Interface CLASS (only declaration)
@abstract                     #Abstract FUNC (declaration or implementation)

@hideconstructor              #Constructor is private.

@classdesc COMMENT            #CLASS description

@this CLASS_VAR               #FUNC() this instanceof CLASS

@augments PARENT              #CLASS inheritance
@implements {PARENT_TYPE}     #Interface inheritance
@mixes CLASS_VAR              #CLASS mixin
@mixin [NAME]                 #CLASS that must be mixed in

@inheritdoc                   #Copy tags from PARENT.FUNC() to CLASS.FUNC()
@override                     #When CLASS.FUNC() and PARENT.FUNC() use same variable name, which one should prevail.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             LEGAL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@author AUTHOR [<EMAIL>]      #

@copyright AUTHOR DATE        #
@license SPDX_LICENSE         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VSCODE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SUPPORT ==>                   #Show @TAG as is on hover and autocompletion
                              #Markdown support.
                              #Syntax highlighting on relevant @TAGs
                              #Clickable links


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             JSDOC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


import/no-deprecated             ##Avoid import|require of a variable that has JSDoc @deprecated

