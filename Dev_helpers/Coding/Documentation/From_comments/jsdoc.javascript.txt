
         
   JSDOC  
         



VERSION ==>                   #3.3.0

CONF                          #Uses -c CONFFILE.json

jsdoc FILE...                 #Generates HTML documentation with:
                              #  - content based on /** */ comments
                              #     - non-documented members are not shown
                              #  - links to source code
                              #  - README.md content, parsed to HTML
CONF.source                   #Source FILE|DIR... to document
CONF.source.include|exclude   #'PATH'_ARR
CONF.source.includePattern    #'REGEXP' (def: *.js[doc])
CONF.source.excludePattern    #'REGEXP' (def: _*)
-r
CONF.opts.recurse             #BOOL (def: false). Allow FILE|DIR... instead of FILE...

-d DIR2
CONF.opts.destination         #Output 'DIR2' (def: '.')
-X
CONF.opts.explain             #BOOL (def: false). Output in JSON to stdout instead
-l
CONF.opts.lenient             #BOOL (def: false). Don't exit on errors

-t DIR                        #HTML template, using DIR/publish.js
CONF.opts.template 'DIR'      #Def: ./templates/default

CONF.tags.allowUnknownTags    #BOOL (def: true). do not throw on @unknown_tag

CONF.plugins                  #'MODULE|PATH'_ARR

'plugins/markdown'            #PLUGIN bundled with jsdoc. Allows parsing Markdown
CONF.markdown.parser          #"gfm" (must be specified)
CONF.markdown.tags            #STR_ARR. Additional tags to parse Markdown->HTML, beyond "description", "classdesc", "param", "property" and "returns"
CONF.markdown.hardwrap        #BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



/** COMMENT */
/**
 * COMMENT
 * @TAG VALUE                 #Must use /** */
 */                           #COMMENT is used as @description

TYPE                          #Can be:
                              #  - typeof
                              #  - CLASS
                              #  - (TYPE|TYPE2|...) -> "or"
                              #  - TYPE[] -> ARR
                              #  - Array.<TYPE> -> ARR
                              #  - {VAR: TYPE,...} -> OBJ
                              #  - Object.<KEY_TYPE, VALUE_TYPE> -> OBJ
                              #  - {TYPE} -> OBJ with TYPE values
                              #  - {*} -> any OBJ
                              #  - ...TYPE -> variadic
                              #  - !TYPE -> required
                              #  - ?TYPE -> optional
                              #  - TYPE= -> optional and has a default value

VAR                           #Can be:
                              #  - local variable
                              #  - CLASS|FUNC~VAR -> CLASS|FUNC local variable
                              #  - CLASS#VAR -> CLASS non-static property
                              #  - CLASS|FUNC.VAR -> CLASS|FUNC static property
                              #  - module:MODULE -> module
                              #  - module:MODULE~VAR -> non-exported module variable
                              #  - module:MODULE.VAR -> exported module variable

@file COMMENT                 #Whole file.
                              #On top of file.
                              #Make file appear in index.
@module [[TYPE] MODULE]       #Module.
                              #On top of file.
                              #Def: CLI 'PATH' without '.EXT'
@requires [module:]MODULE     #Import declaration.
@external VAR                 #Global imported variable.
                              #Usually with @see.
                              #Goal is to make referencable with external:VAR
@exports MODULE               #Export declaration.
                              #Guessed in CommonJS|AMD unless not exporting an OBJ literal.

@summary COMMENT              #Short generic comment.
@description COMMENT          #Long generic comment
@example ...                  #Code block sample.
                              #Up to next @ or end of comment block.

@typedef {TYPE} TYPE2         #Type alias.
                              #The current comment block can define other tags for that TYPE2
@callback TYPE                #Callback type declaration
                              #The current comment block can define other tags for that TYPE

@type {TYPE}                  #Variable declaration
@global                       #Global variable
@memberof[!]                  #Namespace|module|class member
 NAMESPACE|MODULE|CLASS       #Can force with !

@classdesc COMMENT            #CLASS
@augments PARENT              #CLASS inheritance
@mixes CLASS                  #CLASS mixin
@mixin                        #CLASS that must be mixed in
@constructor                  #new FUNC()
@inner                        #CLASS local variable
@instance                     #CLASS non-static property
@static                       #CLASS static property
@abstract                     #Abstract CLASS.FUNC()
@this CLASS                   #FUNC() this instanceof CLASS

@private                      #Only show if --private
--private
CONF.opts.private             #BOOL (def: false)
@protected                    #Show but mark as protected.
@public                       #Default visibility

{@link LINK}                  #External LINK with title STR. Inline inside a COMMENT
[TITLE]{@link LINK}           #LINK is VAR|URL
{@link LINK|TITLE}
{@link LINK TITLE}
@linkcode|linkplain           #Like @link except renders in monospace or not (def)
CONF.templates.monospaceLinks #BOOL (def: false): imply @linkcode for VAR|URL
CONF.templates.cleverLinks    #BOOL (def: false): imply @linkcode for VAR
@see {@link VAR|URL}
@see VAR|URL                  #Like @link but for whole code block instead of inline inside a COMMENT

@tutorial TUTORIAL            #External link to TUT_DIR/TUTORIAL.html|md
{@tutorial TUTORIAL}          #Form with {} is inline instead, and has same syntax as @link (including TITLE)
                              #Can use TUT_DIR/TUTORIAL.json to specify:
                              #  - title STR: display name (def: TUTORIAL)
                              #  - children 'TUTORIAL2'_ARR: sub-tutorials
                              #Can use {@link} and {@tutorial} inside TUTORIAL.html|md
-u 'TUT_DIR'
CONF.opts.tutorials           #'TUT_DIR' (def: '.')

@alias|name VAR               #Changes the autodetected variable name.
                              #@name also removes autodetection of type, so must specify manually with another tag, but is the
                              #only way to go in some cases where Jsdoc doesn't recognize the variable.
@borrows VAR as VAR2          #Make comments for VAR apply to current VAR2 too (e.g. references)
@lends CLASS                  #Declare a constructor in two parts:
                              #  - one variable name with @class
                              #  - one variable content with @lends CLASS
                              #Useful when using factory methods:
                              #  /** @class */
                              #  var CLASS = FUNC(
                              #    //** @lends CLASS
                              #    OBJ
                              #  )
                              #OBJ members are @static by default, but can be @instance by using @lends CLASS.prototype
                              #If OBJ contains constructor method, use @constructs CLASS on it and remove @class.
@variation NUM                #When two VAR with same name, put @variation NUM, then reference each with VAR(NUM)

@event [CLASS#]VAR            #Declares an event, i.e. if fires FUNC(VAL), that VAL.
                              #Referenced as [CLASS#]VAR or [CLASS#]event:VAR
@fires [CLASS#]VAR            #Declares next function fires event VAR

@since VERSION                #
@version VERSION              #
@deprecated [COMMENT]         #COMMENT is e.g. "since version VERSION"
@todo COMMENT                 #

@author AUTHOR [<EMAIL>]      #
@copyright AUTHOR DATE        #
@license TEXT                 #

@param {TYPE_EXPR} ARG - CMNT #Function argument
                              #Each part can be omitted
                              #[ARG] for optional ARG
                              #  - [ARG=VAL] for default value
@returns {TYPE_EXPR} [COMMENT]#

@namespace [{TYPE_EXPR}]      #Indicates the declaration of a namespace, i.e. an OBJ used as namespace.
[NAMESPACE]                   #With @link, must use NAMESPACE.VAR
@enum {TYPE_EXPR}             #Declare an OBJ used as ENUM
@property {TYPE_EXPR} VAR     #Member of an OBJ, whether @namespace, @typedef or @constructor
@member [{TYPE_EXPR}] [VAR]   #Member of an OBJ, but can be used just before the declaration of that member.

@constant [{TYPE_EXPR}]       #For non-FUNC definition.
@read-only                    #For non-FUNC definition.
@default [TYPE]               #For non-FUNC definition, comment the assigned value (def: deduce from assignment).
